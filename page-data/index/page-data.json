{"componentChunkName":"component---src-pages-index-jsx","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"allMarkdownRemark":{"group":[{"fieldValue":"NextJS","totalCount":4},{"fieldValue":"auth","totalCount":4},{"fieldValue":"datastructure","totalCount":4},{"fieldValue":"development","totalCount":8},{"fieldValue":"firebase","totalCount":2},{"fieldValue":"frontend","totalCount":18},{"fieldValue":"fullstack","totalCount":1},{"fieldValue":"heroku","totalCount":1},{"fieldValue":"javascript","totalCount":2},{"fieldValue":"netlify","totalCount":2},{"fieldValue":"nextjs","totalCount":1},{"fieldValue":"nodejs","totalCount":4},{"fieldValue":"react","totalCount":20},{"fieldValue":"react-native","totalCount":1},{"fieldValue":"redux","totalCount":2},{"fieldValue":"sockjs","totalCount":1},{"fieldValue":"typescript","totalCount":2},{"fieldValue":"wanted","totalCount":3},{"fieldValue":"webbrowser","totalCount":2},{"fieldValue":"websocket","totalCount":2}],"nodes":[{"excerpt":"Chrome DevTools의 Network 탭이 데이터를 분석하고 오류의 원인을 찾기 위해 사용되었다면 Source 탭은 실제 코드를 확인하면서 디버깅하는 데 사용된다. 이때, breakpoint라는 기능을 사용하는데 이는 코드의 특정 지점에서 실행을 멈추고 상태를 점검할 수 있도록 도와준다. Breakpoint를 설정하고 활용하는 방법은 다음과 같다.…","fields":{"slug":"/debug02/"},"frontmatter":{"date":"June 27, 2024","update":"Jun 27, 2024","title":"디버깅 환경 : 디버거의 Breakpoint를 활용한 문제 해결","tags":["frontend","development"]}},{"excerpt":"디버깅이란? (Debugging) 디버깅은 코드가 예상대로 동작하지 않을 때 오류가 나는 부분을 찾아 원인을 파악하고 해결하는 전체적인 과정을 뜻한다. 디버깅하는 방법  는 대표적인 디버깅 방법이다. console.log()로 코드의 동작을 확인하고 데이터 흐름을 추적할 수 있다. 하지만 무분별한 console.log()의 사용은 코드의 가독성을 떨어트리…","fields":{"slug":"/debug01/"},"frontmatter":{"date":"June 26, 2024","update":"Jun 26, 2024","title":"디버깅 환경 : Chrome DevTools로 에러 발생 원인 파악하기","tags":["frontend","development"]}},{"excerpt":"1. lint-staged : 에러 판독기 git에서 staged된 상태 파일들에 한해 lint를 실행하여 커밋 전에 코드 스타일을 검사하고 수정하는 도구 협업 환경에서는 모든 개발자가 일관된 코드 품질을 유지하는 것이 중요하다. 하지만 개발 환경이 모두 다르기때문에 코드 스타일 규칙이 지켜지지 않는 경우가 종종 발생한다. 이러한 문제를 해결하기 위해 l…","fields":{"slug":"/husky/"},"frontmatter":{"date":"June 21, 2024","update":"Jun 21, 2024","title":"협업을 위한 프로젝트 설정 - husky + lint-staged","tags":["frontend","development"]}},{"excerpt":"prettier Prettier는 코드를 정해진 스타일로 교정해주는 도구이다. 주로 ESLint와 함께 사용되며 ESLint를 통해 에러를 최소화하여 코드 품질을 높이고 prettier를 통해 코드 스타일을 자동 포맷팅하여 코드의 가독성과 일관성을 높인다. prettier 설치 prettier config 추가  파일을 생성하고 다음과 같은 규칙을 추가한…","fields":{"slug":"/prettier/"},"frontmatter":{"date":"June 12, 2024","update":"Jun 12, 2024","title":"협업을 위한 프로젝트 설정 - Prettier","tags":["frontend","development"]}},{"excerpt":"ESLint ESLint는 JavaScript/Typescript 코드에서 문법 오류를 검사하고 코드 최적화를 도와주는 도구이다.  ESLint를 사용하면 코드 품질을 높이고 일관된 코드를 작성할 수 있어 협업 환경에서 주로 사용된다. Lint란? 소스코드를 분석하여 문법적인 오류나 스타일적인 오류, 적절하지 않은 구조 등에 표시를 달아주는 행위. ESL…","fields":{"slug":"/eslint/"},"frontmatter":{"date":"June 10, 2024","update":"Jun 10, 2024","title":"협업을 위한 프로젝트 설정 - ESLint","tags":["frontend","development"]}},{"excerpt":"리스트 (List) List는 sequence라고도 불리며 \"순서\"를 가지고 원소를 저장하는 자료구조이다.\nList 구현은 크게 2가지로 나뉘는데 Array List와 Linked List가 있다. python에서 사용하는  자료구조는 Array List 형태이다. Array List Array List는 말 그대로 배열을 기반으로 만들어진 자료구조이다.…","fields":{"slug":"/data-structure04/"},"frontmatter":{"date":"February 16, 2024","update":"Jan 16, 2024","title":"[Data Structure] List - Array & Dynamic Array ","tags":["datastructure"]}},{"excerpt":"메모리 구조란? 메모리는 데이터를 저장하는 공간으로, 프로그램의 성능을 최적화하기 위해 메모리 구조를 잘 이해하고 적절한 자료구조를 사용하는 것이 중요하다. 메모리: 데이터를 저장하는 곳으로, 전기신호를 0과 1로 저장하는 트랜지스터로 이루어져 있다. RAM 메모리: 휘발성 메모리로, 0과 1로 이루어진 이진수(bit)를 저장한다. 메모리 단위와 자료형 …","fields":{"slug":"/data-structure03/"},"frontmatter":{"date":"January 21, 2024","update":"Jan 21, 2024","title":"[Data Structure] 메모리 구조와 Node의 주소값","tags":["datastructure"]}},{"excerpt":"시간 복잡도란? 시간 복잡도는 알고리즘이 처리하는 입력 크기 n에 따라 소요되는 시간을 \"Big-O 표기법\"으로 나타낸 것이다. 이를 통해 알고리즘의 성능을 분석하고 비교할 수 있으며, 특히 대용량 데이터를 다룰 때 어떤 알고리즘이 더 효율적인지 판단하는 데 중요한 기준이 된다. 시간 복잡도 cases Best Case: 가장 이상적인 입력의 시간 복잡도…","fields":{"slug":"/data-structure02/"},"frontmatter":{"date":"January 10, 2024","update":"Jan 10, 2024","title":"[Data Structure] 시간 복잡도와 Big-O 표기법","tags":["datastructure"]}},{"excerpt":"자료구조란? 자료구조 (Data Structure) : 데이터를 저장하고 관리하는 방식. 데이터를 체계적으로 저장하여 메모리를 효율적으로 사용하면서 빠르고 안정적으로 데이터를 처리할 수 있다. 자료구조의 종류 선형 자료구조: Array, Dynamic Array, Linked List, Queue, Stack, Hash Table 비선형 자료구조: Tre…","fields":{"slug":"/data-structure01/"},"frontmatter":{"date":"January 08, 2024","update":"Jan 08, 2024","title":"[Data Structure] 자료구조와 알고리즘","tags":["datastructure"]}},{"excerpt":"NextJS 14 주요 업데이트 Next.js 14 버전에서는 서버 컴포넌트(Server Components)와 서버 액션(Server Actions)이라는 두 가지 기능이 업데이트되었다. 14 버전의 주요 개선점 개발자 환경 및 생산성 향상 유저가 다운로드하는 자바스크립트 코드 감소 많은 코드와 라이브러리 삭제 가능 1. 서버 컴포넌트 서버 컴포넌트는 …","fields":{"slug":"/next-tutorial-05/"},"frontmatter":{"date":"October 10, 2023","update":"Oct 10, 2023","title":"NextJS ver.14: 서버 컴포넌트와 서버 액션","tags":["NextJS","react"]}},{"excerpt":"tRPC 소개 tRPC는 풀스택 타입스크립트 환경에서 타입 안전한 백엔드 API를 작성할 수 있도록 돕는 라이브러리이다.  tRPC를 사용하면 백엔드와 프론트엔드 간의 통신을 단순화하여 풀스택 타입스크립트 개발의 생산성을 크게 향상시킬 수 있다. 기존 HTTP 호출방식의 문제점 과거에는 Swagger를 사용해 .yaml 파일을 기반으로 스키마를 생성하는 …","fields":{"slug":"/trpc/"},"frontmatter":{"date":"September 11, 2023","update":"Sep 11, 2023","title":"타입 안정성을 위한 최적의 선택: tRPC API 개발 가이드","tags":["fullstack"]}},{"excerpt":"🔥 React Native 튜토리얼 React Native는 웹브라우저가 아닌, IOS와 안드로이드 같은 운영체제와 소통하기 위한 도구(인터페이스)이다! 1. No DIV, Use View React Native는 웹사이트가 아니기 때문에 html 태그 (div, section, p..)를 쓸 수 없다. 대신 컨테이너로  대신  를 사용한다. 모든 Vie…","fields":{"slug":"/reactnative-rules/"},"frontmatter":{"date":"February 20, 2023","update":"Feb 20, 2023","title":"React Native 꼭 알아야할 주요 특징","tags":["react-native"]}},{"excerpt":"1️⃣ MongoDB 프로젝트 생성 https://www.mongodb.com/ 홈페이지에서 회원가입 후, 프로젝트를 생성 한다. 생성한 프로젝트에 데이터 베이스를 추가한다. Free 버전 선택!\n Security > Database Access에서 사용자를 추가한다. 이때 패스워드는 나중에 쓰이므로 저장해둘 것!\n Security > Network Acce…","fields":{"slug":"/next-tutorial-04/"},"frontmatter":{"date":"December 05, 2022","update":"Dec 05, 2022","title":"Next-Auth + MongoDB 로그인 유저값 저장하기","tags":["NextJS","react"]}},{"excerpt":"🅰 서버 기반 인증 시스템 (Session / Cookie) 서버 기반 인증 시스템은 로그인 시 세션 ID를 클라이언트에게 발급해주고 클라이언트는 요청 시마다 세션 ID가 담긴 쿠키를 헤더에 담아 보내는 방식이다. 상태를 유지해야 하므로 Stateful한 구조를 가지고 있다. 인증방식 사용자가 로그인하면 올바른 사용자임을 확인하고 고유한 세션 ID 값을 …","fields":{"slug":"/node-tutorial-04/"},"frontmatter":{"date":"November 25, 2022","update":"Nov 25, 2022","title":"[Node] Server Authentication (Session vs JWT)","tags":["nodejs"]}},{"excerpt":"✨ Next-Auth란? Next.js에서 소셜 로그인 기능을 쉽게 추가하고 관리할 수 있는 Node.js 라이브러리 (Authentication)📝 Next-Auth Docs 바로가기 Installation 🔎 Next Auth 설정하기 1. Google OAuth 인증 정보 발급 Next Auth를 설정하기에 앞서 사용하고자 하는 API의 Client…","fields":{"slug":"/next-tutorial-03/"},"frontmatter":{"date":"November 19, 2022","update":"Nov 19, 2022","title":"Next-Auth로 Google 로그인 기능 구현","tags":["NextJS","react"]}},{"excerpt":"😎 프로젝트 소개 NextJS와 GraphQL로 빌드한 싸이월드 클론 프로젝트 제작 기간 : 2022.10.14 - 2022.11.03 Github Repo 프로젝트 배포 링크 🚀 프로젝트를 시작하기 전에.. 1. NextJS & GraphQL 설치 2. 폴더 구조 3. 절대 경로 설정 파일 import 시,  와 같은 상대경로를  와 같은 절대경로로 바…","fields":{"slug":"/cyworld-clone/"},"frontmatter":{"date":"November 10, 2022","update":"Nov 10, 2022","title":"싸이월드 클론 built in NextJS","tags":["typescript","react"]}},{"excerpt":"app/ Directory app/ 디렉토리 구조는 beta버전이기 때문에 실제 프로덕션 레벨에서는 권장되지 않는다. 기존에는 pages 디렉토리 안에 파일을 생성하여 Automating Routing을 실행했지만, 13버전부터는 app/이라는 새로운 디렉토리가 등장하였다. 파일 시스템 기반에서 디렉터리 기반 라우팅 시스템으로 전환하였다. 현재는 page…","fields":{"slug":"/next-tutorial-02/"},"frontmatter":{"date":"November 10, 2022","update":"Nov 10, 2022","title":"NextJS ver.13 특징 살펴보기","tags":["NextJS","react"]}},{"excerpt":"🧐 NextJS란? NextJS : React에서 서버 사이드 렌더링을 간편하게 해주는 프레임워크 작동 원리 Next.js는, 기본적으로 서버측에서 React코드를 실행한다. React.js를 서버측에서 pre-rendering하여 html을 생성하고, 브라우저로 보내준다. 그 후, 브라우저에서 React를 사용해 웹페이지를 완성한다. ➡ 결과 : 속도가…","fields":{"slug":"/next-tutorial-01/"},"frontmatter":{"date":"November 05, 2022","update":"Nov 05, 2022","title":"NextJS 작동 원리와 파일 구조","tags":["nextjs"]}},{"excerpt":"💻 CSR (Client Side Rendering) CSR은 JavaScript를 사용하여 직접 웹브라우저에서 페이지를 렌더링하는 것을 의미한다. \n모든 로직 및 데이터 가져오기, 템플릿 및 라우팅은 서버가 아닌 클라이언트(브라우저)에서 처리된다. 동작 순서 클라이언트 ➡ 서버 : 사이트 접속을 알림 서버 ➡ 클라이언트 : index.html 전송 \n처…","fields":{"slug":"/csr-ssr/"},"frontmatter":{"date":"August 12, 2022","update":"Aug 12, 2022","title":"브라우저의 렌더링 종류 CSR vs SSR vs PR","tags":["webbrowser"]}},{"excerpt":"Brower Rendering 1. 주소 입력 클라이언트측에서 URL을 통해 서버로 요청을 보낸다. 2. HTML 파일 다운로드 서버는 클라이언트가 요청한 URL에 따라 결과물을 만들어서 응답한다. 이때, 리턴값은 HTML 파일일 수도 있고, JSON일 수도 있고, 이미지 등의 파일일 수도 있다. 아래의 경우에는 HTML 파일을 반환하며, 브라우저가 가장…","fields":{"slug":"/rendering/"},"frontmatter":{"date":"August 11, 2022","update":"Aug 11, 2022","title":"브라우저의 렌더링 과정","tags":["webbrowser"]}},{"excerpt":"📚 노드의 주요 특성 1. 이벤트 기반 노드는 이벤트 발생 시 미리 지정해둔 작업을 수행하는 이벤트 기반으로 작동합니다. 이벤트가 생기면 해당 이벤트에 대한 함수를 Event Listener에서 찾아 Callback 함수를 호출합니다. 이벤트의 예: 클릭, 네트워크 요청, 타이머 등 Event Listener : 이벤트를 등록하는 함수 Callback 함…","fields":{"slug":"/node-tutorial-03/"},"frontmatter":{"date":"August 02, 2022","update":"Aug 02, 2022","title":"[Node] 노드의 주요 특성 Non Blocking / Single Thread","tags":["nodejs"]}},{"excerpt":"🚀 호출스택과 이벤트 루프 1. 호출 스택 (call stack) 노드는 자바스크립트 코드의 맨 위부터 한 줄씩 실행합니다. 함수 호출 부분을 발견하면 호출한 함수를 호출 스택에 넣고, 함수가 실행되는 동안 호출 스택에 머물러 있다가 실행이 완료되면 호출 스택에서 지워집니다. (Last In First Out) 함수는 호출 순서대로 스택에 쌓인 후, 역순…","fields":{"slug":"/node-tutorial-02/"},"frontmatter":{"date":"July 31, 2022","update":"Jul 31, 2022","title":"[Node] 호출스택과 이벤트 루프","tags":["nodejs"]}},{"excerpt":"🔎 Node란? Nodejs : Chrome V8 Javascript 엔진으로 빌드된 Javascript 런타임 공식문서에서의 노드는 Javascript 런타임이라고 표현되어 있습니다. 하지만 대부분은 Node를 서버 실행을 위해 사용합니다. 여기서 '서버'와 '런타임'은 무엇이고 어떤 차이가 있을까요? 서버로서의 노드 네트워크는 요청과 응답을 주고받으며…","fields":{"slug":"/node-tutorial-01/"},"frontmatter":{"date":"July 27, 2022","update":"Jul 27, 2022","title":"[Node] 서버와 런타임 개념 이해하기","tags":["nodejs"]}},{"excerpt":"✨ StompJS 란? stomp : 단순 <또는 스트리밍) 텍스트 지향 메시징 프로토콜. spring에 종속적. StompJS Docs stomp 설치 최근 브라우저는 모두 socket을 지원하지만 IE 9 이하에서는 사용이 불가능합니다. 브라우저 대응이 필요한 경우, 를 추가로 설치하여 사용합니다.  (@types 패키지는 typescript를 사용하…","fields":{"slug":"/sockjs/"},"frontmatter":{"date":"May 10, 2022","update":"May 10, 2022","title":"Stomp.JS 로 채팅방 구현하기","tags":["sockjs"]}},{"excerpt":"🔎 Socket.io 란? Socket.io 👉 Websocket 기반으로 웹 클라이언트와 서버 간의 실시간 양방향 통신을 가능하게 해주는 Cross-platform WebSocket API Socket.io는 WebSocket을 편리하게 쓸 수 있도록 하는 라이브러리입니다. 브라우저간의 호환성을 높이고 이라는 기능을 이용해 일부 Client에만 데이터를…","fields":{"slug":"/socketio/"},"frontmatter":{"date":"April 27, 2022","update":"Apr 27, 2022","title":"Socket.io 기능 알아보기","tags":["websocket"]}},{"excerpt":"✨ Socket 이란? 네트워트 상에서 Socket은 프로토콜, IP 주소, 포트 넘버 등으로 해석됩니다. 떨어져 있는 두 호스트를 연결해주는 도구로 사용되며 Socket을 통해 데이터를 내보내거나 받아올 수 있는 데이터 통로가 만들어 집니다. 소켓의 역할에 따라 클라이언트 소켓, 서버소켓으로 구분됩니다. WebSocket 사용자의 브라우저와 서버 사이의…","fields":{"slug":"/about-socket/"},"frontmatter":{"date":"April 20, 2022","update":"Apr 20, 2022","title":"Socket 통신의 특징 및 프로토콜의 종류","tags":["websocket"]}},{"excerpt":"🎉 firebase 프로젝트 생성 Firebase 에 접속하여 새로운 프로젝트를 생성합니다. 👉 Firebase 바로가기 프로젝트 이름을 입력합니다. Analytics가 필요하지 않으면 OFF 프로젝트에 해당하는 앱을 추가합니다. (ios / android / web) 먼저 1)앱 이름을 정하고 2)생성되는 config 코드를 복사합니다. (프로젝트 배포…","fields":{"slug":"/google-auth-firebase/"},"frontmatter":{"date":"March 17, 2022","update":"Mar 17, 2022","title":"구글 로그인 기능 with Firebase","tags":["firebase","auth"]}},{"excerpt":"👨‍💼 Google 사용자 인증 정보 생성 외부 사이트에서 구글 로그인과 같은 구글 API를 사용하기 위해서는 사용자 인증 정보(OAuth 클라이언트 ID)를 발급받아야 한다.  발급 절차는 아래와 같다. Google Cloud Platform에 접속하여 새 프로젝트를 생성한다. 👉 Google Cloud 바로가기 프로젝트 이름을 입력하고 만들기버튼을 클릭한…","fields":{"slug":"/google-auth-clientid/"},"frontmatter":{"date":"March 12, 2022","update":"Mar 12, 2022","title":"Google OAuth Client ID 만들기","tags":["firebase","auth"]}},{"excerpt":"✔ 등록 (Register) Resource Server에 새로운 Client를 등록합니다. Client ID : 애플리케이션 식별 ID (노출 가능) Client Secret : 식별 비밀번호 (노출 X) Authorized Redirect URLs : server로부터 데이터를 받을 주소 ✔ Resource Owner의 승인 Server의 데이터를 C…","fields":{"slug":"/auth-flow/"},"frontmatter":{"date":"March 10, 2022","update":"Mar 10, 2022","title":"OAuth 2.0 흐름 파악하기","tags":["auth"]}},{"excerpt":"🔎 OAuth 개념 알기 웹 사이트를 이용할 때 \"네이버로 로그인\" 같이 별도의 회원가입 없이 로그인을 제공하는 서비스를 이용해 본적이 있나요? 이때 해당 플랫폼의 아이디가 있다면 외부 서비스에서도 인증을 가능하게하고 그 서비스의 API를 사용할 수 있습니다. 이것을 OAuth라고 합니다. OAuth 란? OAuth : 사용자가 애플리케이션에게 모든 권한…","fields":{"slug":"/about-auth/"},"frontmatter":{"date":"March 03, 2022","update":"Mar 03, 2022","title":"OAuth 2.0 의 개념 및 용어 정리","tags":["auth"]}},{"excerpt":"💡 redux-thunk란? redux-thunk는 redux 에서 비동기 작업이 필요할 때 사용하는 미들웨어(middleware)입니다. 이 미들웨어를 사용하면 액션 객체가 아닌 함수를 디스패치 할 수 있습니다. 여기서 thunk란 특정 작업을 나중에 하도록 미루기 위해 함수로 감싼 것을 말합니다. 📝 redux-thunk 예시 기본 Redux : '액…","fields":{"slug":"/redux-thunk/"},"frontmatter":{"date":"February 28, 2022","update":"Feb 28, 2022","title":"Redux-thunk로 비동기 작업하기","tags":["react","redux"]}},{"excerpt":"💡 Redux란? Redux란 '상태 관리 라이브러리'로써 기존에 흩어져 있는 state들을 한 곳에 모아 관리하여 예측 불가능한 버그를 최소화하고 효율적으로 state를 사용할 수 있도록 합니다. 또한 Redux는 React 외에도 Angular, Vue, jQuery 등 다양한 환경에서 사용할 수 있습니다. why-using-redux 에서의 상태관리…","fields":{"slug":"/about-redux/"},"frontmatter":{"date":"February 20, 2022","update":"Feb 20, 2022","title":"Redux - 상태 관리 라이브러리","tags":["react","redux"]}},{"excerpt":"☝ 프로젝트 시작하기 전 이번 프로젝트부터는 javascript가 아닌 typescript를 사용하기로 했다. 타입스크립트가 적용된 CRA를 내려받고 절대경로(ex ) 설정도 해두었다.  타입스크립트 절대경로 설정 (tsconfig.json) 📌 프로젝트 링크 Github\n배포링크 📑 견적서 게시판 제작 1. json-server로 REST-API 요청 …","fields":{"slug":"/estimate-board/"},"frontmatter":{"date":"February 10, 2022","update":"Feb 10, 2022","title":"견적서 게시판 (필터링 기능)","tags":["wanted","typescript","react","heroku"]}},{"excerpt":"☝ 프로젝트 시작하기 전 이번 프로젝트는 e-Commerce 서비스에서 주로 사용하는 어드민 페이지를 제작하는 것으로 판매 상품을 등록할 수 있는 폼 양식이 포함된 상품 등록 페이지를 만들기로 했다. 팀원들과는 비슷한 옵션별로 역할을 분담한 후 작업했는데 반복 코드를 줄이기 위해 페이지 전체에서 공통으로 쓰이는 UI는 미리 컴포넌트로 만들어 두었다. no…","fields":{"slug":"/admin-registry/"},"frontmatter":{"date":"January 31, 2022","update":"Jan 31, 2022","title":"어드민 페이지 (이미지 첨부 기능 / useForm)","tags":["wanted","javascript","react","netlify"]}},{"excerpt":"☝ 프로젝트 시작하기 전 프리온보딩 첫번째 과제가 발표되었다! 첫번째 과제는 4명의 팀원 중 2명씩 짝을 이루어 기능이 다른 환율계산기를 1개씩 구현하는 것이었다. 배정된 짝과 논의 해서 탭기능이 추가된 환율계산기를 만들기로 결정했다. 본격적으로 프로젝트를 시작하기 전에 협업에 필요한 규칙을 몇가지 정하기로 했다. 프로젝트 폴더 구조는 어떻게 만들까? 커…","fields":{"slug":"/currency-converter/"},"frontmatter":{"date":"January 28, 2022","update":"Jan 28, 2022","title":"환율 계산기(Currency Converter) 만들기","tags":["wanted","javascript","react","netlify"]}},{"excerpt":"✨ useReducer 정의 useState처럼 state를 생성 및 관리하는 hook입니다. 여러개의 하위값을 가진 복잡한 state를 다뤄야하거나 배열값에 추가,삭제,수정 등의 동시작업이 필요한 경우 사용합니다.  : state 업데이트를 위한 요구  : 요구의 내용  : state를 업데이트하는 역할 (은행) reducer 🔎 useReducer 사…","fields":{"slug":"/hook-useReducer/"},"frontmatter":{"date":"January 25, 2022","update":"Jan 25, 2022","title":"[React] React Hook - useReducer","tags":["frontend","react"]}},{"excerpt":"✨ useCallback 정의 useCallback은 useMemo와 같이 Memoization 기법을 사용하여 컴포넌트 최적화에 사용됩니다. useMemo는 함수에서 반환되는 '값'을 저장한다면 useCallback은 '함수 그 자체'를 저장해두고 재사용하는 것입니다. useCallback 역시 2개의 인자를 필요로 하는데, memoization할 콜백…","fields":{"slug":"/hook-useCallback/"},"frontmatter":{"date":"January 20, 2022","update":"Jan 20, 2022","title":"[React] React Hook - useCallback","tags":["frontend","react"]}},{"excerpt":"✨ useMemo 정의 useMemo는 'Memoization' 되어있는 값을 반환시켜주는 hook입니다. Memoization이란 기존에 수행한 연산의 결과값을 어딘가에 저장해두고 동일한 입력이 들어오면 재활용하는 프로그래밍 기법을 말합니다. Memoization을 절적히 적용하면 중복 연산을 피할 수 있기 때문에 메모리를 조금 더 쓰더라도 애플리케이션…","fields":{"slug":"/hook-useMemo/"},"frontmatter":{"date":"January 14, 2022","update":"Jan 14, 2022","title":"[React] React Hook - useMemo","tags":["frontend","react"]}},{"excerpt":"✨ useContext 정의 Context API : 전역적으로 사용되는 state나 데이터를 필요한 컴포넌트에 전달하는 방법 Context를 사용하면 컴포넌트를 재사용하기 어려워 질 수 있다. Prop drilling을 피하기 위한 목적이라면 Component Composition (컴포넌트 합성)을 먼저 고려해볼 것! **Prop drilling : …","fields":{"slug":"/hook-useContext/"},"frontmatter":{"date":"January 11, 2022","update":"Jan 11, 2022","title":"[React] React Hook - useContext","tags":["frontend","react"]}},{"excerpt":"✨ useRef 정의 Ref는 'reference'의 약자로 '참조'라는 뜻입니다. useRef는 인자로 전달된 값을 에 할당하여 객체로 반환해 주는데, 이때 current에 할당된 값은 렌더링되어도 그대로 유지됩니다.\n그래서 렌더링에 상관없이 동일한 참조값이 필요한 경우 useRef를 사용합니다. 또한 current 값이 바뀌어도 컴포넌트가 리렌더링되지…","fields":{"slug":"/hook-useRef/"},"frontmatter":{"date":"January 08, 2022","update":"Jan 08, 2022","title":"[React] React Hook - useRef","tags":["frontend","react"]}},{"excerpt":"✨ useEffect 정의 첫 렌더링 할 때(mount), 다시 렌더링될 때(update), 화면에서 사라질 때(unmount), 특정한 작업을 수행하고 싶은 경우 사용하는 Hook입니다.  를 사용 할 때에는 첫번째 인자에는 함수, 두번째 인자로는 의존값이 들어있는 배열 Dependency Array(deps)를 넣습니다. 렌더링될 때마다 실행 - De…","fields":{"slug":"/hook-useEffect/"},"frontmatter":{"date":"December 26, 2021","update":"Dec 26, 2021","title":"[React] React Hook - useEffect","tags":["frontend","react"]}},{"excerpt":"✨ useState 정의 상태 관리에 사용되는 Hook이며 상태값을 생성하고 업데이트 시킬 수 있습니다. useState를 호출 하면 state값이 저장되는 '변수'와 state값을 변화시키는 '함수'가 배열로 리턴됩니다.  : 상태 값 저장 변수 (현재 상태 값)  : 상태 값 갱신 함수 (state를 업데이트하는 setter 함수) 💡 useState…","fields":{"slug":"/hook-useState/"},"frontmatter":{"date":"December 23, 2021","update":"Dec 23, 2021","title":"[React] React Hook - useState","tags":["frontend","react"]}},{"excerpt":"🌟 Hook의 등장 배경 리액트 컴포넌트 종류 : Class Component / Functional Component Hook이 등장하기 전 리액트에는 여러 문제들이 있었습니다. Class Component는 Functional Component에 비해 문법이 어렵고 로직의 재사용이 힘든 단점이 있으나 Functional Component로는 할 수 없…","fields":{"slug":"/about-react-hook/"},"frontmatter":{"date":"December 22, 2021","update":"Dec 22, 2021","title":"[React] React Hook이란?","tags":["frontend","react"]}},{"excerpt":"리액트 기반의 프로젝트를 시작할 때 npm으로 create-react-app 패키지를 설치하면 손쉽게 리액트 프로젝트 빌드가 가능합니다. () 하지만 리액트 폴더구조와 빌드 시스템에 대해 자세히 알아보고 싶다면 create-react-app을 사용하지 않고 아래 순서에 따라 직접 리액트를 빌드해보는 것을 추천합니다! 리액트 시작하기 (CRA ❌) 1. 프…","fields":{"slug":"/react-scratch/"},"frontmatter":{"date":"December 21, 2021","update":"Dec 21, 2021","title":"[React] 리액트 시작하기 (without CRA)","tags":["frontend","react"]}},{"excerpt":"🧐 React란? React는 페이스북에서 개발한 Javascript 기반의 라이브러리로써 사용자와의 인터렉션을 UI로 쉽게 구현할 수 있도록 만들어 졌습니다. 다운로드 ✨ React의 필요성 사용자 요청에 의한 UI 변화가 거의 없는 정적인 페이지는 React 라이브러리를 사용하지 않고도 개발이 가능합니다. 하지만 웹 애플리케이션이라 불릴 만큼 규모가 …","fields":{"slug":"/about-react/"},"frontmatter":{"date":"December 20, 2021","update":"Dec 20, 2021","title":"[React] 리액트의 개념과 특징","tags":["frontend","react"]}},{"excerpt":"✨ Webpack 등장 배경 이전 module 포스팅에서 javascript파일이 여러개로 나뉜 경우 간단하게  을  태그에 추가하면 하나의  태그만으로도 모든 javascript를 연결할 수 있다고 설명한 바 있습니다. (CommonJS / ES Module 모듈화) 👉 이전 포스팅 바로가기  image 하지만 안타깝게도 이런 모듈 시스템을 지원하는 브…","fields":{"slug":"/dev-webpack/"},"frontmatter":{"date":"November 29, 2021","update":"Nov 29, 2021","title":"프론트엔드 개발환경 #3 - webpack이란?","tags":["frontend","development"]}},{"excerpt":"🧐 모듈(Module) 이란? Javascript를 공부하다보면 이라는 단어를 자주 접하게 됩니다.\nModule이란 코드를 내보낼 수 있는 파일 혹은 재사용 가능한 코드들의 묶음을 말하는데\n이런 모듈이 모여서 하나의 프로그램이 완성된다고 볼 수 있습니다.\n Module 사용 전 기존에는 html에  태그를 이용해서 모든 파일을 하나하나 불러오는 방식을 사…","fields":{"slug":"/dev-module/"},"frontmatter":{"date":"November 21, 2021","update":"Nov 21, 2021","title":"프론트엔드 개발환경 #2 - 모듈 (Module)","tags":["frontend","development"]}},{"excerpt":"✔ npm npm : Node Package Manager(Modules) npm은 NodeJS를 설치하면 함께 설치되는 패키지 관리도구입니다. 이 패키지는 모듈이라고도 불리며 npm을 통해 서비스 개발에 필요한 webpack, CRA, react 등의 다양한 모듈 라이브러리를 설치할 수 있습니다. ex)   명령어를 사용해 초기  파일을 만들고 프로젝트…","fields":{"slug":"/dev-npm/"},"frontmatter":{"date":"November 17, 2021","update":"Nov 17, 2021","title":"프론트엔드 개발환경 #1 - npm / npx / yarn","tags":["frontend","development"]}}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}