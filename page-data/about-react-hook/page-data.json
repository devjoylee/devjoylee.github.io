{"componentChunkName":"component---src-templates-post-jsx","path":"/about-react-hook/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"a2c215be-4572-531c-af95-c85a84c12601","excerpt":"🌟 Hook의 등장 배경 리액트 컴포넌트 종류 : Class Component / Functional Component Hook이 등장하기 전 리액트에는 여러 문제들이 있었습니다. Class Component는 Functional Component에 비해 문법이 어렵고 로직의 재사용이 힘든 단점이 있으나 Functional Component로는 할 수 없…","html":"<h2>🌟 Hook의 등장 배경</h2>\n<p>리액트 컴포넌트 종류 : <strong>Class Component</strong> / <strong>Functional Component</strong></p>\n<p>Hook이 등장하기 전 리액트에는 여러 문제들이 있었습니다. Class Component는 Functional Component에 비해 문법이 어렵고 로직의 재사용이 힘든 단점이 있으나 Functional Component로는 할 수 없었던 state관리나 Life Cycle Method가 가능하다는 이유로 어쩔 수 없이 Class Component를 사용해왔습니다.</p>\n<p>Hook이 등장하기 전의 리액트는</p>\n<ul>\n<li>\n<p>컴포넌트 사이에서 상태와 관련된 로직을 재사용하기 어려웠습니다.</p>\n</li>\n<li>\n<p>생명주기 컴포넌트로 인한 복잡한 컴포넌트는 이해하기 어려웠습니다. 상태관련 로직이 모두 같은 공간에 위치하기 때문입니다.</p>\n</li>\n</ul>\n<h2>🧐 Hook 이란?</h2>\n<p>Hook은 리액트 16.8 버전 이후 함수형 컴포넌트에 추가된 기능입니다. 즉, React Hook은 함수형 컴포넌트가 클래스형 컴포넌트의 기능을 사용할 수 있도록 해주는 기능이며 Hook이 등장하면서 더 이상 상태를 관리하기 위해 Class Component를 쓸 필요가 없어졌습니다.</p>\n<p>기존에는 Class Component 에서만 상태를 관리 할 수 있었고, 함수형 컴포넌트에서는 상태를 관리할 수 없었습니다. 하지만 Hook이 등장하면서 함수형 컴포넌트 에서도 상태 관리를 할 수 있게 되었고, 상태 관리 뿐만 아니라 기존 클래스형 컴포넌트에서만 가능하던 여러 기능을 사용할 수 있게 되었습니다.</p>\n<p>👉 <a href=\"https://reactjs.org/docs/hooks-intro.html\">React Hook 공식문서 바로가기</a></p>\n<h2>🧾 Hook의 종류</h2>\n<h3>useState</h3>\n<p>가장 대표적인 Hook으로 상태값을 생성 및 업데이트시켜주는 Hook입니다.</p>\n<p>👉 <a href=\"https://devjoylee.github.io/hook-useState\">useState 더 알아보기</a></p>\n<h3>useEffect</h3>\n<p>컴포넌트가 렌더링될 때마다 특정 작업을 수행하도록 설정하는 Hook입니다.</p>\n<p>👉 <a href=\"https://devjoylee.github.io/hook-useEffect\">useEffect 더 알아보기</a></p>\n<h3>useReducer</h3>\n<p>useState처럼 상태관리에 쓰이며 구조가 복잡한 상태관리에 적합한 Hook입니다.</p>\n<p>👉 <a href=\"https://devjoylee.github.io/hook-useReducer\">useReducer 더 알아보기</a></p>\n<h3>useRef</h3>\n<p>렌더링과 관련없는 값을 관리하거나 DOM에 접근이 필요한 경우 사용하는 Hook입니다.</p>\n<p>👉 <a href=\"https://devjoylee.github.io/hook-useRef\">useRef 더 알아보기</a></p>\n<h3>useMemo</h3>\n<p>렌더링 시 메모리에 값을 저장해두고 필요할 때 불러와서 사용할 수 있도록 하는 Hook입니다.</p>\n<p>👉 <a href=\"https://devjoylee.github.io/hook-useMemo\">useMemo 더 알아보기</a></p>\n<h3>useCallback</h3>\n<p>useMemo와 비슷하나 값이 아닌 함수를 재사용하고자 할 때 사용하는 Hook입니다.</p>\n<p>👉 <a href=\"https://devjoylee.github.io/hook-useCallback\">useCallback 더 알아보기</a></p>\n<h3>useContext</h3>\n<p>전역적으로 사용되는 state나 데이터를 필요한 컴포넌트에 전달하는 Hook입니다.</p>\n<p>👉 <a href=\"https://devjoylee.github.io/hook-useContext\">useContext 더 알아보기</a></p>\n<br />\n<blockquote>\n<p>REFERENCE<br /> React(23) 리액트 훅이란? <a href=\"https://devbirdfeet.tistory.com/52\">https://devbirdfeet.tistory.com/52</a><br />리액트 공식 문서 <a href=\"https://reactjs.org/docs/hooks-intro.html\">https://reactjs.org/docs/hooks-intro.html</a><br/>[React] Hooks의 종류 <a href=\"https://lelana.tistory.com/146\">https://lelana.tistory.com/146</a></p>\n</blockquote>","frontmatter":{"title":"[React] React Hook이란?","date":"December 22, 2021","update":"December 22, 2021","tags":["frontend","react"],"series":"React.js"},"fields":{"slug":"/about-react-hook/","readingTime":{"minutes":3.755}}},"seriesList":{"edges":[{"node":{"id":"b4d0435e-daf0-5a20-814d-e6eb0a6637d0","fields":{"slug":"/about-react/"},"frontmatter":{"title":"[React] 리액트의 개념과 특징"}}},{"node":{"id":"9eb4fd90-0091-59ae-af4a-2157f1d48e9a","fields":{"slug":"/react-scratch/"},"frontmatter":{"title":"[React] 리액트 시작하기 (without CRA)"}}},{"node":{"id":"a2c215be-4572-531c-af95-c85a84c12601","fields":{"slug":"/about-react-hook/"},"frontmatter":{"title":"[React] React Hook이란?"}}},{"node":{"id":"da1bdaf1-0908-5a09-96fe-84b01ec1a4c9","fields":{"slug":"/hook-useState/"},"frontmatter":{"title":"[React] React Hook - useState"}}},{"node":{"id":"74a83270-4b1c-509e-99d5-3bdb5a24f619","fields":{"slug":"/hook-useEffect/"},"frontmatter":{"title":"[React] React Hook - useEffect"}}},{"node":{"id":"97466c71-229f-5eef-b94f-3b2c3a1e58b8","fields":{"slug":"/hook-useRef/"},"frontmatter":{"title":"[React] React Hook - useRef"}}},{"node":{"id":"5c86f011-9568-5f1a-80cb-399a2cd6e93c","fields":{"slug":"/hook-useContext/"},"frontmatter":{"title":"[React] React Hook - useContext"}}},{"node":{"id":"25c35473-fd2a-5a2e-b427-00b3b9282235","fields":{"slug":"/hook-useMemo/"},"frontmatter":{"title":"[React] React Hook - useMemo"}}},{"node":{"id":"b987645f-66e7-5659-9c5b-6ef6d8f77751","fields":{"slug":"/hook-useCallback/"},"frontmatter":{"title":"[React] React Hook - useCallback"}}},{"node":{"id":"d7f27a35-173b-529a-bef4-f6d9f3505d63","fields":{"slug":"/hook-useReducer/"},"frontmatter":{"title":"[React] React Hook - useReducer"}}}]},"previous":{"fields":{"slug":"/react-scratch/"},"frontmatter":{"title":"[React] 리액트 시작하기 (without CRA)"}},"next":{"fields":{"slug":"/hook-useState/"},"frontmatter":{"title":"[React] React Hook - useState"}}},"pageContext":{"id":"a2c215be-4572-531c-af95-c85a84c12601","series":"React.js","previousPostId":"9eb4fd90-0091-59ae-af4a-2157f1d48e9a","nextPostId":"da1bdaf1-0908-5a09-96fe-84b01ec1a4c9"}},"staticQueryHashes":[],"slicesMap":{}}