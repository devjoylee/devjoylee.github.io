{"componentChunkName":"component---src-templates-post-jsx","path":"/dev-webpack-1/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"4abdc966-b005-5179-858e-f2e261f4a12a","excerpt":"✨ Webpack 등장 배경 이전 module 포스팅에서 javascript파일이 여러개로 나뉜 경우 간단하게  을  태그에 추가하면 하나의  태그만으로도 모든 javascript를 연결할 수 있다고 설명한 바 있습니다. (CommonJS / ES Module 모듈화) 👉 이전 포스팅 바로가기  image 하지만 안타깝게도 이런 모듈 시스템을 지원하는 브…","html":"<h2>✨ Webpack 등장 배경</h2>\n<p>이전 module 포스팅에서 javascript파일이 여러개로 나뉜 경우 간단하게 <code class=\"language-text\">type=\"module\"</code> 을 <code class=\"language-text\">script</code> 태그에 추가하면 하나의 <code class=\"language-text\">script</code> 태그만으로도 모든 javascript를 연결할 수 있다고 설명한 바 있습니다. (CommonJS / ES Module 모듈화)</p>\n<p>👉 <a href=\"https://devjoylee.github.io/dev-module\">이전 포스팅 바로가기 </a></p>\n<p><img src=\"https://images.velog.io/images/joyact/post/dfabe050-6ecc-4706-9e40-208164cb5621/image.png\" alt=\"image\"></p>\n<p>하지만 안타깝게도 이런 모듈 시스템을 지원하는 브라우저는 한정되어 있습니다. 인터넷 익스플로러를 포함한 몇 브라우저는 여전히 모듈 시스템을 사용하지 않고있습니다. 따라서 모든 브라우저에 호환가능한 모듈링 시스템이 필요했고 이때 등장한 것이 <strong>Webpack</strong> 입니다.</p>\n<hr>\n<h2>🧐 Webpack이란?</h2>\n<blockquote>\n<p>Webpack : a module bundler</p>\n</blockquote>\n<p><img src=\"https://images.velog.io/images/joyact/post/d47c7828-ea1a-4844-bf88-d950f185899c/image.png\" alt=\"image\"></p>\n<p>**웹팩(Webpack)**은 여러개 파일을 하나의 파일로 합쳐주는 번들러(bundler)입니다. 웹팩을 사용하면 여러개의 javascript 파일을 하나로 합쳐줌으로써 지저분한 <code class=\"language-text\">&lt;script></code> 태그의 반복 사용을 줄일 수 있고 효율적인 디버깅이 가능해집니다.</p>\n<p>또 다른 웹팩의 기능으로는 변환(transforming) 기능이 있습니다. ES6와 같은 모던 javascript를 ES5 형식으로 변환하고, Sass를 CSS로 변환시킴으로써 모든 브라우저가 이해할 수 있는 환경을 자체적으로 만들어냅니다.</p>\n<hr>\n<h2>➕ Webpack 설치</h2>\n<ol>\n<li>\n<p>npm install\n<code class=\"language-text\">npm install webpack webpack-cli --save-dev</code></p>\n</li>\n<li>\n<p>webpack.config.js 파일 생성\n<code class=\"language-text\">module.exports</code> 내부에 필요한 configuration 옵션을 추가합니다.</p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2>🚀 Webpack의 기능</h2>\n<p><img src=\"https://images.velog.io/images/joyact/post/835b56bd-c22f-4fdf-b49f-57559b59a90d/Full-Stack-Introduction-to-Webpack.docx-2.jpg\" alt=\"image\"></p>\n<p>모듈을 번들링하기 전, Webpack은 모듈 파일들을 그래프의 형식으로 인덱싱을 하게됩니다. 이를 <strong>Dependency Graph</strong>라고 하며 쉽게 말해 비슷한 형태의 파일을 하나로 묶기위해 분류하는 작업이라고 볼 수 있습니다.\n<br /></p>\n<h3>기능1. The entry point</h3>\n<p><img src=\"https://images.velog.io/images/joyact/post/2afea557-9875-4a91-ac40-94117260cc6a/image.png\" alt=\"\"></p>\n<p>The entry point는 Dependency Graph의 출발점이자 모듈 번들링을 시작하는 파일을 의미합니다. default 값은 <code class=\"language-text\">./src/index.js</code> 이며 직접 값을 지정하고 싶은경우 아래와 같이 configuration을 설정합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./app/index.js\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>기능2. Loaders</h3>\n<p><img src=\"https://images.velog.io/images/joyact/post/877e8797-5b3d-490e-9076-b428a968acf8/image.png\" alt=\"image\"></p>\n<p>loader는 웹팩을 강력한 도구로 만들어주는 핵심 기능 중 하나입니다. 모듈에서 다루는 import, export 기능은 javascript와 json파일에만 국한되있는 것으로 css파일이나 image 파일을 다루게 되면 에러가 발생합니다. 하지만 loader를 사용하면 css, image 파일에도 접근이 가능하게 됩니다.</p>\n<ol>\n<li>\n<p>필요한 loader 설치</p>\n<blockquote>\n<p><strong>svg 파일 로더</strong> : <code class=\"language-text\">npm install svg-inline-loader --save-dev</code> > <strong>css 파일 로더</strong> : <code class=\"language-text\">npm install style-loader css-loader --save-dev</code> > <strong>js 파일 로더(es6->es5)</strong> : <code class=\"language-text\">npm install babel-loader --save-dev</code></p>\n</blockquote>\n</li>\n<li>\n<p>webpack.config.js 옵션 추가</p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.svg$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token string\">\"svg-inline-loader\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"style-loader\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"css-loader\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(js)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token string\">\"babel-loader\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>기능3. Output</h3>\n<p>Output은 번들링된 최종 파일 저장소를 뜻합니다. default 값으로 <code class=\"language-text\">dist/index.js</code> 가 설정이 되고 configuration 옵션에서 변경이 가능합니다.</p>\n<blockquote>\n<p><strong>순서</strong> : 모듈 번들링 ➡ dist 폴더 생성 ➡ dist 폴더 내부에 번들링된 최종 파일 저장\n(생성된 파일 명은 옵션의 <code class=\"language-text\">filename</code>으로 지정)</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index_bundle.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>기능4. Plugin</h3>\n<p>Loader가 각 모듈(파일)을 위한 기능이라면, Plugin은 최종 번들된 파일을 위한 기능을 수행합니다.</p>\n<ul>\n<li><em><strong>HtmlWebpackPlugin</strong></em></li>\n</ul>\n<p>웹팩 번들링이 완료된 후 최종파일이 생성되면, 생성된 파일을 경로로 하는 <code class=\"language-text\">script</code> 태그가 추가된 index.html 파일을 만들어주는 플러그인입니다. 만약 output의 경로가 변경되더라도 직접 html을 수정할 필요없이 자동으로 script태그의 경로가 함께 업데이트 됩니다.</p>\n<ol>\n<li>\n<p>플러그인 설치\n<code class=\"language-text\">npm install html-webpack-plugin --save-dev</code></p>\n</li>\n<li>\n<p>webpack.config.js 옵션 추가</p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token comment\">// webpack.config.js</span>\n\t<span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">...</span>\n\tmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    \t<span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"https://images.velog.io/images/joyact/post/ebea04b9-b261-4f62-911d-79da4c2a7635/image.png\" alt=\"image\"></p>\n<blockquote>\n<p>REFERENCE <br /> Youtube uidotdev Webpack Crash Course <a href=\"https://youtu.be/lFjinlwpcHY\">https://youtu.be/lFjinlwpcHY</a> / <br /> 네이버 블로그 <a href=\"https://blog.naver.com/wlsdml1103/221333814197\">https://blog.naver.com/wlsdml1103/221333814197</a></p>\n</blockquote>","frontmatter":{"title":"프론트엔드 개발환경 #3 - webpack이란?","date":"November 29, 2021","update":"November 29, 2021","tags":["frontend","development"],"series":"프론트엔드 개발환경"},"fields":{"slug":"/dev-webpack-1/","readingTime":{"minutes":5.28}}},"seriesList":{"edges":[{"node":{"id":"eb7b3d41-2d26-582f-bd64-d0c09e51db7f","fields":{"slug":"/dev-npm/"},"frontmatter":{"title":"프론트엔드 개발환경 #1 - npm / npx / yarn"}}},{"node":{"id":"6f34930c-d0b0-5498-abed-6fddfc9b3f7e","fields":{"slug":"/dev-module/"},"frontmatter":{"title":"프론트엔드 개발환경 #2 - 모듈 (Module)"}}},{"node":{"id":"4abdc966-b005-5179-858e-f2e261f4a12a","fields":{"slug":"/dev-webpack-1/"},"frontmatter":{"title":"프론트엔드 개발환경 #3 - webpack이란?"}}}]},"previous":{"fields":{"slug":"/dev-module/"},"frontmatter":{"title":"프론트엔드 개발환경 #2 - 모듈 (Module)"}},"next":{"fields":{"slug":"/about-react/"},"frontmatter":{"title":"[React] 리액트의 개념과 특징"}}},"pageContext":{"id":"4abdc966-b005-5179-858e-f2e261f4a12a","series":"프론트엔드 개발환경","previousPostId":"6f34930c-d0b0-5498-abed-6fddfc9b3f7e","nextPostId":"b4d0435e-daf0-5a20-814d-e6eb0a6637d0"}},"staticQueryHashes":[],"slicesMap":{}}