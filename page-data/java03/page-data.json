{"componentChunkName":"component---src-templates-post-jsx","path":"/java03/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"4882d76a-1a89-5ed8-97ae-801036dd9b66","excerpt":"1. 메서드 오버로딩(Method Overloading) 메서드 오버로딩은 같은 이름의 메서드를 매개변수의 타입이나 개수를 다르게 하여 여러 개 정의하는 것이다. 이는 하나의 메서드 이름으로 다양한 작업을 처리할 수 있도록 한다. 사용 예시  2. 메서드 오버라이딩(Method Overriding) 메서드 오버라이딩은 자식 클래스에서 부모 클래스의 메서드…","html":"<h2>1. 메서드 오버로딩(Method Overloading)</h2>\n<p>메서드 오버로딩은 같은 이름의 메서드를 매개변수의 타입이나 개수를 다르게 하여 여러 개 정의하는 것이다. 이는 하나의 메서드 이름으로 다양한 작업을 처리할 수 있도록 한다.</p>\n<ul>\n<li>사용 예시</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Woof!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sound<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sound<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> times<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> times<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2></h2>\n<h2>2. 메서드 오버라이딩(Method Overriding)</h2>\n<p>메서드 오버라이딩은 자식 클래스에서 부모 클래스의 메서드를 재정의하는 것이다. 이는 부모 클래스의 기본 동작을 자식 클래스에 맞게 변경할 수 있도록 한다.</p>\n<h3>오버라이딩의 규칙</h3>\n<ul>\n<li>메서드 이름, 매개변수, 반환 타입이 모두 동일해야 한다.</li>\n<li>접근 제어자는 부모 클래스의 메서드보다 더 제한적이면 안 된다.</li>\n<li><code class=\"language-text\">@Override</code> 어노테이션을 사용하여 컴파일러가 올바르게 오버라이딩되었는지 확인하도록 권장한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Puppy</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" makes a small woof!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>3. Overloading과 Overriding의 차이점</h2>\n<table>\n<thead>\n<tr>\n<th><strong>구분</strong></th>\n<th><strong>메서드 오버로딩</strong></th>\n<th><strong>메서드 오버라이딩</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>정의</strong></td>\n<td>같은 이름의 메서드를 여러개 정의하는 것</td>\n<td>부모 클래스의 메서드를 자식 클래스에서 재정의</td>\n</tr>\n<tr>\n<td><strong>적용 대상</strong></td>\n<td>같은 클래스 내부</td>\n<td>상속 관계의 클래스</td>\n</tr>\n<tr>\n<td><strong>메서드 이름</strong></td>\n<td>동일</td>\n<td>동일</td>\n</tr>\n<tr>\n<td><strong>매개변수</strong></td>\n<td>다르게 정의</td>\n<td>동일해야 함</td>\n</tr>\n<tr>\n<td><strong>반환 타입</strong></td>\n<td>상관없음</td>\n<td>동일해야 함</td>\n</tr>\n<tr>\n<td><strong>어노테이션</strong></td>\n<td>필요 없음</td>\n<td><code class=\"language-text\">@Override</code> 사용 권장</td>\n</tr>\n</tbody>\n</table>\n<h2>4. 상속(Inheritance)</h2>\n<p>상속은 <strong>기존 클래스의 특성을 다른 클래스가 물려받아 재사용하거나 확장</strong>하는 개념이다. 상속을 통해 코드의 재사용성을 높이고 계층 구조를 통해 논리적인 관계를 표현할 수 있다.</p>\n<h3>상속의 특징</h3>\n<ul>\n<li><code class=\"language-text\">extends</code> <strong>키워드 사용</strong>: 자식 클래스는 부모 클래스를 상속받기 위해 <code class=\"language-text\">extends</code> 키워드를 사용한다.</li>\n<li><strong>단일 상속만 가능</strong>: 자바는 다중 상속을 지원하지 않으며, 한 클래스는 오직 하나의 부모 클래스만 가질 수 있다.</li>\n<li><code class=\"language-text\">super</code> <strong>키워드로 부모 클래스 참조</strong>: 부모 클래스의 생성자나 메서드를 호출할 때 사용한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 부모 클래스</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Some sound\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 자식 클래스</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 부모 클래스의 생성자 호출</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 메서드 오버라이딩</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Woof!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<hr>\n<h3>다중 상속과 다이아몬드 문제</h3>\n<p>자바는 <strong>다중 상속을 지원하지 않는다</strong>. 이는 다중 상속으로 인해 발생할 수 있는 <strong>다이아몬드 문제</strong>를 방지하기 위함이다. 다이아몬드 문제란, 두 부모 클래스가 동일한 메서드를 가지고 있을 때 자식 클래스가 이를 상속받을 경우, 어떤 부모 클래스의 메서드를 호출해야 하는지 모호해지는 상황을 말한다.</p>\n<p>자바에서는 다중 상속 대신 <strong>인터페이스</strong>를 사용하여 이러한 문제를 해결한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 인터페이스를 통한 다중 상속 대체</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Pet</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Pet</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dog is eating.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dog is playing.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>4. 사용 <strong>예시: 상속과 오버라이딩</strong></h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 부모 클래스</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// protected 접근 제어자로 선언된 변수로, 자식 클래스에서 접근 가능</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 생성자: 객체 생성 시 이름을 초기화</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 동물이 움직인다는 기본 동작을 출력하는 메서드</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"동물이 움직입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 자식 클래스</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bird</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Bird 클래스의 생성자: 부모 클래스의 생성자를 호출하여 name을 초기화</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bird</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 부모 클래스의 생성자 호출</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 부모 클래스의 move 메서드를 오버라이딩하여 새의 움직임을 정의</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"가 하늘을 납니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// name은 부모 클래스에서 상속받은 변수</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 새만의 추가 기능을 정의한 메서드</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"가 노래합니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 사용 예시</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Bird 클래스의 객체 생성, 이름은 \"참새\"</span>\n        <span class=\"token class-name\">Bird</span> sparrow <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bird</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"참새\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 오버라이딩된 move 메서드 호출: \"참새가 하늘을 납니다.\" 출력</span>\n        sparrow<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Bird 클래스에 정의된 sing 메서드 호출: \"참새가 노래합니다.\" 출력</span>\n        sparrow<span class=\"token punctuation\">.</span><span class=\"token function\">sing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","frontmatter":{"title":"[Java] 메서드 오버로딩, 오버라이딩과 상속(extends)","date":"January 24, 2025","update":"January 24, 2025","tags":["java","fullstack"],"series":"Java"},"fields":{"slug":"/java03/","readingTime":{"minutes":6.385}}},"seriesList":{"edges":[{"node":{"id":"2f6e0a4c-40b5-5c6c-92d5-e22ddbf95047","fields":{"slug":"/java01/"},"frontmatter":{"title":"[Java] 기초 개념 : 변수/자료형/접근제어자/static"}}},{"node":{"id":"a948370d-78e5-5c83-9d5b-bac385844fb9","fields":{"slug":"/java02/"},"frontmatter":{"title":"[Java] 클래스의 기본 특징 : 속성/생성자/메서드/this/super"}}},{"node":{"id":"4882d76a-1a89-5ed8-97ae-801036dd9b66","fields":{"slug":"/java03/"},"frontmatter":{"title":"[Java] 메서드 오버로딩, 오버라이딩과 상속(extends)"}}}]},"previous":{"fields":{"slug":"/java02/"},"frontmatter":{"title":"[Java] 클래스의 기본 특징 : 속성/생성자/메서드/this/super"}},"next":null},"pageContext":{"id":"4882d76a-1a89-5ed8-97ae-801036dd9b66","series":"Java","previousPostId":"a948370d-78e5-5c83-9d5b-bac385844fb9","nextPostId":null}},"staticQueryHashes":[],"slicesMap":{}}