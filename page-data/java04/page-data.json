{"componentChunkName":"component---src-templates-post-jsx","path":"/java04/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"3d33ab1c-9124-53a8-a942-0ad731f4580c","excerpt":"1. Java 동작 방식 Java는 \"Write Once, Run Anywhere\" 철학을 기반으로 한 번 작성된 코드를 다양한 플랫폼에서 실행할 수 있는 언어이다. JDK를 사용해 개발하고 JVM을 통해 실행된다. 이 과정에서 컴파일과 런타임을 거치며 JVM 내부의 다양한 메모리 영역과 실행 엔진이 관여한다. Java 구성 요소 JDK (Java Dev…","html":"<h2>1. Java 동작 방식</h2>\n<p>Java는 \"Write Once, Run Anywhere\" 철학을 기반으로 한 번 작성된 코드를 다양한 플랫폼에서 실행할 수 있는 언어이다. <strong>JDK</strong>를 사용해 개발하고 <strong>JVM</strong>을 통해 실행된다. 이 과정에서 컴파일과 런타임을 거치며 JVM 내부의 다양한 메모리 영역과 실행 엔진이 관여한다.</p>\n<img src='https://github.com/user-attachments/assets/b340d87f-a539-4322-bb8c-070bd3d8f52d' alt='' width='800'>\n<h3>Java 구성 요소</h3>\n<ul>\n<li><strong>JDK (Java Development Kit)</strong> : “JRE + 컴파일러(<code class=\"language-text\">javac</code>) + 개발 도구(디버거, 빌드 도구 등)”로 구성된 도구 모음.\n<br/>Java 애플리케이션을 개발하고 컴파일하는데 사용된다.</li>\n<li><strong>JRE (Java Runtime Environment)</strong> : JVM + 라이브러리로 구성. 자바를 실행할 수 있는 환경을 제공한다</li>\n<li><strong>JVM (Java Virtual Machine)</strong> : 바이트코드 실행하는 가상 환경. 각 운영 체제에 맞는 기계어로 변환하여 실행</li>\n</ul>\n<h3>쉽게 이해하기</h3>\n<ul>\n<li><strong>JDK</strong>: 개발 및 조립을 가능하게 하는 <strong>“자동차 + 공구 세트”</strong></li>\n<li><strong>JRE</strong>: 운전을 가능하게 하는 <strong>“자동차 프레임”</strong></li>\n<li><strong>JVM</strong>: 자동차를 실제로 움직이게 하는 <strong>“엔진”</strong></li>\n</ul>\n<h2>2. 자바의 컴파일과 런타임</h2>\n<p>자바는 <strong>컴파일과 런타임</strong> 과정을 거쳐 최종적으로 프로그램이 실행된다. 이 과정에서 중요한 역할을 하는 것이 JVM이다.</p>\n<img src='https://github.com/user-attachments/assets/a4036ba5-7783-4cb4-9280-3bce6bc0631b' alt='' width='700'>\n<h3>컴파일 단계 (Complie)</h3>\n<p>컴파일은 JDK에 포함된 자바 컴파일러(javac)를 통해 “자바 소스 코드(.java)를 바이트코드(.class)로 변환”하는 과정이다.</p>\n<ol>\n<li>개발자가 자바 소스코드 작성한다 (<code class=\"language-text\">.java</code> 파일)</li>\n<li><code class=\"language-text\">javac</code> 컴파일러가 코드를 분석하고 문법 검사 수행한다. 오류가 발견되면 컴파일이 중지된다.</li>\n<li>컴파일이 성공하면 바이트코드가 생성된다. (<code class=\"language-text\">.class</code> 파일)<br/> 이때, 바이트코드(Byte Code)란 JVM에서 실행할 준비가 된 중간 코드를 뜻한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">javac HelloWorld.java  <span class=\"token comment\"># HelloWorld.class 생성</span></code></pre></div>\n<h3>런타임 단계 (Runtime)</h3>\n<p>런타임은 컴파일된 바이트코드(.class 파일)를 기계어코드로 변경 후 JVM을 통해 실행하는 과정이다.</p>\n<ol>\n<li><strong>Class Loader</strong> : JVM의 클래스 로더가 <code class=\"language-text\">.class</code> 파일을 읽고 바이트코드를 메모리(Runtime Data Area)에 저장한다. <br/>동적 로딩 방식으로 필요한 클래스만 실시간으로 로드한다.</li>\n<li><strong>Runtime Data Area</strong> : JVM의 메모리 영역으로, 프로그램 실행에 필요한 데이터를 저장한다. 주요 메모리 영역은 아래와 같다.\n<ul>\n<li>Method Area: 클래스 정보(메타데이터), 정적 변수, 메서드 코드 저장.</li>\n<li>Heap Area: 객체와 인스턴스 변수를 저장.</li>\n<li>Stack Area: 메서드 호출과 지역 변수 저장.</li>\n<li>PC Register: 현재 실행 중인 명령의 주소 저장.</li>\n<li>Native Method Stack: 네이티브 코드 실행에 사용.</li>\n</ul>\n</li>\n<li><strong>Execution Engine :</strong> JVM의 핵심 컴포넌트로, 바이트코드를 실제 기계어로 변환하여 실행한다. 엔진은 자바 클래스가 JVM에 로드된 이후에 바이트 코드를 실제 기계어로 OS에 맞게 변환하고 Runtime Data Area에서 필요한 데이터를 가져와 실행한다.\n<ul>\n<li>Interpreter: 바이트코드를 한 줄씩 해석하여 실행.</li>\n<li>JIT(Just-In-Time) Compiler: 자주 실행되는 코드를 네이티브 코드로 변환하여 실행 속도를 향상.</li>\n<li>가비지 컬렉션: 더 이상 사용되지 않는 객체를 자동으로 제거하여 메모리를 관리.</li>\n</ul>\n</li>\n</ol>","frontmatter":{"title":"[Java] Java 개발 환경과 JVM의 동작 원리","date":"February 01, 2025","update":"February 01, 2025","tags":["java","fullstack"],"series":"Java"},"fields":{"slug":"/java04/","readingTime":{"minutes":4.63}}},"seriesList":{"edges":[{"node":{"id":"2f6e0a4c-40b5-5c6c-92d5-e22ddbf95047","fields":{"slug":"/java01/"},"frontmatter":{"title":"[Java] 기초 개념 : 변수/자료형/접근제어자/static"}}},{"node":{"id":"a948370d-78e5-5c83-9d5b-bac385844fb9","fields":{"slug":"/java02/"},"frontmatter":{"title":"[Java] 클래스의 기본 특징 : 속성/생성자/메서드/this/super"}}},{"node":{"id":"4882d76a-1a89-5ed8-97ae-801036dd9b66","fields":{"slug":"/java03/"},"frontmatter":{"title":"[Java] 메서드 오버로딩, 오버라이딩과 상속(extends)"}}},{"node":{"id":"3d33ab1c-9124-53a8-a942-0ad731f4580c","fields":{"slug":"/java04/"},"frontmatter":{"title":"[Java] Java 개발 환경과 JVM의 동작 원리"}}},{"node":{"id":"c11cfae8-d567-5f7c-9aaa-f7db3054d355","fields":{"slug":"/java05/"},"frontmatter":{"title":"[Java] 스레드와 프로세스 이해하기"}}},{"node":{"id":"de4bb462-81cc-5cad-9aa2-72302beb6ac4","fields":{"slug":"/java06/"},"frontmatter":{"title":"[Java] Java에서 Thread Safety를 지키는 방법"}}}]},"previous":{"fields":{"slug":"/java03/"},"frontmatter":{"title":"[Java] 메서드 오버로딩, 오버라이딩과 상속(extends)"}},"next":{"fields":{"slug":"/java05/"},"frontmatter":{"title":"[Java] 스레드와 프로세스 이해하기"}}},"pageContext":{"id":"3d33ab1c-9124-53a8-a942-0ad731f4580c","series":"Java","previousPostId":"4882d76a-1a89-5ed8-97ae-801036dd9b66","nextPostId":"c11cfae8-d567-5f7c-9aaa-f7db3054d355"}},"staticQueryHashes":[],"slicesMap":{}}