{"componentChunkName":"component---src-templates-post-jsx","path":"/next-tutorial-01/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"4f12cffb-fcfd-5035-af57-53d4b7f438bd","excerpt":"🧐 NextJS란? NextJS : React에서 서버 사이드 렌더링을 간편하게 해주는 프레임워크 작동 원리 Next.js는, 기본적으로 서버측에서 React코드를 실행한다. React.js를 서버측에서 pre-rendering하여 html을 생성하고, 브라우저로 보내준다. 그 후, 브라우저에서 React를 사용해 웹페이지를 완성한다. ➡ 결과 : 속도가…","html":"<h2>🧐 NextJS란?</h2>\n<blockquote>\n<p>NextJS : React에서 서버 사이드 렌더링을 간편하게 해주는 프레임워크</p>\n</blockquote>\n<h3>작동 원리</h3>\n<ol>\n<li>Next.js는, 기본적으로 서버측에서 React코드를 실행한다.</li>\n<li>React.js를 서버측에서 pre-rendering하여 html을 생성하고, 브라우저로 보내준다.</li>\n<li>그 후, 브라우저에서 React를 사용해 웹페이지를 완성한다. ➡ 결과 : 속도가 빠르고 SEO에 유리하다</li>\n</ol>\n<h3>주요 기능</h3>\n<ul>\n<li>직관적인 페이지 기반 라우팅 시스템( 동적 경로 지원 포함 )</li>\n<li>사전 렌더링, 정적 생성(SSG) 및 서버 측 렌더링(SSR) 모두 페이지 단위로 지원된다.</li>\n<li>자동 코드 분할! ( 빠른 로딩 )</li>\n<li>최적화된 프리페치를 통한 클라이언트 측 라우팅</li>\n<li>내장 CSS 및 Sass 지원 및 모든 CSS-in-JS 라이브러리 지원</li>\n<li>Fast Refresh를 지원한다. ( 빠른 리프레쉬 )</li>\n<li>Serverless Functions로 API 엔드포인트를 빌드하기 위한 API 경로</li>\n</ul>\n<h2>🔎 React와 NextJs의 차이점</h2>\n<h3>1. library vs framework</h3>\n<ul>\n<li>\n<p>React (library) : 필요할 때 불러와서 사용. 라우팅, 폴더 구조 등을 사용자가 직접 정해서 사용한다.</p>\n</li>\n<li>\n<p>NextJS (framework) : 정해진 규칙에 맞춰 코드를 작성하면 앱이 실행됨. 라우팅, 폴더 구조를 커스텀할 수 없다.</p>\n</li>\n</ul>\n<h3>2. CSR vs SSR</h3>\n<ul>\n<li>\n<p>React (CSR) : 브라우저가 javascript 파일에서 UI를 모두 다운받은 후 페이지가 출력된다.</p>\n</li>\n<li>\n<p>NextJS (SSR) : 페이지가 먼저 렌더링된 후 (pre-rendering) API 등 필요한 javascript는 나중에 가져온다</p>\n</li>\n</ul>\n<h2>📚 File Structure</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">public</span>  <span class=\"token comment\">// 어플리케이션에 사용되는 정적 파일들</span>\n└── assets\n     ├── images\n     └── icons\n\npages   <span class=\"token comment\">// 페이지 라우팅 (파일/폴더명으로 url 결정)</span>\n  ├── api\n  ├── product\n  │     └── <span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tsx\n  ├── _app<span class=\"token punctuation\">.</span>tsx\n  ├── _document<span class=\"token punctuation\">.</span>tsx\n  └── index<span class=\"token punctuation\">.</span>tsx\n\nsrc     <span class=\"token comment\">// 그 외 필요한 sources 모음</span>\n  ├── components\n  │   ├── common\n  │   └── layout\n  ├── styles\n  │   └── globals<span class=\"token punctuation\">.</span>css\n  ├── hooks\n  ├── types\n  └── utils</code></pre></div>\n<h3>_app.tsx</h3>\n<ul>\n<li>NextJS 실행 시 가장 먼저 실행되는 파일</li>\n<li>모든 페이지에서 쓰는 스타일, 레이아웃을 적용시키는 곳 (ex global.css)</li>\n<li>google analytics , 검색엔진, 스크립트 분석 등에 사용</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> type <span class=\"token punctuation\">{</span> AppProps <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"next/app\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppLayout <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@components\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"@styles/globals.scss\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">MyApp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> pageProps <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> AppProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>AppLayout<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Component <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>pageProps<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>AppLayout<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>_document.tsx</h3>\n<ul>\n<li>_app.js 다음으로 실행되는 파일</li>\n<li>index.html 파일과 같은 역할 (<code class=\"language-text\">&lt;meta></code> 태그 &#x26; <code class=\"language-text\">&lt;link></code> 태그 추가)</li>\n<li>html, body와 같은 기본 태그들의 속성을 지정하여 어플리케이션의 구조를 만들어 주는 파일</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Html<span class=\"token punctuation\">,</span> Head<span class=\"token punctuation\">,</span> Main<span class=\"token punctuation\">,</span> NextScript <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"next/document\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Document</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Html<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Head<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>meta name<span class=\"token operator\">=</span><span class=\"token string\">\"description\"</span> content<span class=\"token operator\">=</span><span class=\"token string\">\"Generated by create next app\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>link rel<span class=\"token operator\">=</span><span class=\"token string\">\"icon\"</span> href<span class=\"token operator\">=</span><span class=\"token string\">\"/favicon.ico\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Head<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Main <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>NextScript <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Html<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>pages</h3>\n<p>React에서는 react-router-dom을 설치하고 라우터를 직접 만들어야하지만 NextJS는 그렇지 않다.\n<br/> pages폴더 안에 파일이나 폴더를 만들면 라우팅 설정이 자동으로 이루어진다.</p>\n<ul>\n<li>index.tsx 파일 : 메인 페이지 (localhost:3000)</li>\n<li>파일/폴더명 = URL 주소 ➡ 파일/폴더명에 해당하는 주소로 페이지가 라우팅된다.</li>\n<li>컴포넌트의 이름은 중요하지 않으나 반드시 <code class=\"language-text\">export default</code> 로 컴포넌트 작성 ❗❗.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">pages\n  ├── about\n  │     ├── index<span class=\"token punctuation\">.</span>tsx        <span class=\"token comment\">// localhost:3000/about</span>\n  │     └── <span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>tsx          <span class=\"token comment\">// localhost:3000/about/new</span>\n  ├── product\n  │     └── <span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span>\n  │          ├── index<span class=\"token punctuation\">.</span>tsx   <span class=\"token comment\">// localhost:3000/product/25</span>\n  │          └── edit<span class=\"token punctuation\">.</span>tsx    <span class=\"token comment\">// localhost:3000/product/25/edit</span>\n  └── index<span class=\"token punctuation\">.</span>tsx              <span class=\"token comment\">// localhost:3000</span></code></pre></div>","frontmatter":{"title":"NextJS 작동 원리와 파일 구조","date":"November 05, 2022","update":"November 05, 2022","tags":["nextjs"],"series":"NextJS"},"fields":{"slug":"/next-tutorial-01/","readingTime":{"minutes":4.315}}},"seriesList":{"edges":[{"node":{"id":"4f12cffb-fcfd-5035-af57-53d4b7f438bd","fields":{"slug":"/next-tutorial-01/"},"frontmatter":{"title":"NextJS 작동 원리와 파일 구조"}}},{"node":{"id":"d6aa89ae-0d27-5829-9b78-f3fb7b803414","fields":{"slug":"/next-tutorial-02/"},"frontmatter":{"title":"NextJS ver.13 특징 살펴보기"}}},{"node":{"id":"81067629-51a8-508c-a80f-6006f4f32da6","fields":{"slug":"/next-tutorial-03/"},"frontmatter":{"title":"Next-Auth로 Google 로그인 기능 구현"}}},{"node":{"id":"90921c61-72d1-55bc-9932-3d0a3ae55f92","fields":{"slug":"/next-tutorial-04/"},"frontmatter":{"title":"Next-Auth + MongoDB 로그인 유저값 저장하기"}}},{"node":{"id":"715017e0-660b-5773-ac5c-b5b525c5b968","fields":{"slug":"/next-tutorial-05/"},"frontmatter":{"title":"NextJS 14: 새로운 기능과 주요 업데이트"}}}]},"previous":{"fields":{"slug":"/csr-ssr/"},"frontmatter":{"title":"브라우저의 렌더링 종류 CSR vs SSR vs PR"}},"next":{"fields":{"slug":"/cyworld-clone/"},"frontmatter":{"title":"싸이월드 클론 built in NextJS"}}},"pageContext":{"id":"4f12cffb-fcfd-5035-af57-53d4b7f438bd","series":"NextJS","previousPostId":"3aecd297-5bbc-5c51-878d-23ce1882baf8","nextPostId":"3912a174-9712-5ab9-a0c0-af782a79bf52"}},"staticQueryHashes":[],"slicesMap":{}}