{"componentChunkName":"component---src-templates-post-jsx","path":"/next-tutorial-05/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"715017e0-660b-5773-ac5c-b5b525c5b968","excerpt":"NextJS 14 주요 업데이트 Next.js 14 버전에서는 서버 컴포넌트(Server Components)와 서버 액션(Server Actions)이라는 두 가지 기능이 업데이트되었다. 14 버전의 주요 개선점 개발자 환경 및 생산성 향상 유저가 다운로드하는 자바스크립트 코드 감소 많은 코드와 라이브러리 삭제 가능 1. 서버 컴포넌트 서버 컴포넌트는 …","html":"<h2>NextJS 14 주요 업데이트</h2>\n<p>Next.js 14 버전에서는 서버 컴포넌트(Server Components)와 서버 액션(Server Actions)이라는 두 가지 기능이 업데이트되었다.</p>\n<h3>14 버전의 주요 개선점</h3>\n<ul>\n<li>개발자 환경 및 생산성 향상</li>\n<li>유저가 다운로드하는 자바스크립트 코드 감소</li>\n<li>많은 코드와 라이브러리 삭제 가능</li>\n</ul>\n<h2>1. 서버 컴포넌트</h2>\n<p>서버 컴포넌트는 컴포넌트를 서버에서 렌더링하여 클라이언트로 전송하는 방식이다. 이를 통해 클라이언트는 자바스크립트 코드를 제외한 최종 렌더링된 HTML를 전송받는다.</p>\n<h3>서버 컴포넌트의 장점</h3>\n<ul>\n<li>향상된 성능: 클라이언트로 전송되는 자바스크립트 양이 줄어들어 초기 로드 시간이 단축되므로 사용자 경험이 향상된다.</li>\n<li>보안 강화: 서버에서만 데이터를 처리함으로 클라이언트에 민감한 데이터가 노출되지 않는다.</li>\n<li>간편한 데이터 페칭: 서버에서 직접 데이터베이스나 API에 접근하여 데이터를 가져오기 때문에 클라이언트 측에서 복잡한 데이터 페칭 로직을 작성할 필요가 없다.</li>\n</ul>\n<h3>이전 버전과의 비교</h3>\n<p><strong>이전 버전 :</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Posts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>posts<span class=\"token punctuation\">,</span> setPosts<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchPosts</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/posts\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">setPosts</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">fetchPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>posts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Next.js 14 버전 :</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Posts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/posts\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>2. 서버 액션</h2>\n<p>서버 액션(Server Actions)은 서버에서 비동기 작업을 수행하고 결과를 클라이언트로 반환하는 새로운 패턴이다. 이를 통해 클라이언트에서 복잡한 상태 관리 없이 서버와의 상호작용을 단순화할 수 있다.</p>\n<h3>사용 예제</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'use server'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 서버 컴포넌트 모드 활성화</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// useState 훅을 React로부터 가져옴</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">LikeButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>likes<span class=\"token punctuation\">,</span> setLikes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handleLike</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'use server'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 서버에서 실행되는 함수임을 명시</span>\n\n    <span class=\"token comment\">// 서버에 /api/like 엔드포인트로 POST 요청을 보내고, 새로운 좋아요 수를 받아옴</span>\n    <span class=\"token keyword\">const</span> newLikes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/like'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n    <span class=\"token function\">setLikes</span><span class=\"token punctuation\">(</span>newLikes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 새로운 좋아요 수로 상태 업데이트</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleLike<span class=\"token punctuation\">}</span><span class=\"token operator\">></span> \n      <span class=\"token function\">Like</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>likes<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>서버 액션의 장점</h3>\n<ul>\n<li>간결한 코드: 클라이언트와 서버 간의 상호작용을 간소화하여 클라이언트에서의 상태 관리 코드가 줄어든다.</li>\n<li>향상된 성능: 서버에서 직접 작업을 처리하므로 클라이언트에서의 부담이 줄어들어 전체적인 성능이 향상된다.</li>\n<li>안정성 및 보안: 서버에서 비동기 작업을 처리하므로 클라이언트에서의 보안 취약점을 줄일 수 있다.</li>\n</ul>\n<h3>서버 액션 사용 시 고려사항</h3>\n<ul>\n<li>서버 액션은 서버에서 실행되므로 네트워크 지연에 대한 고려가 필요하다.</li>\n<li>비동기 작업의 결과가 클라이언트에 즉시 반영되지 않을 수 있으므로 사용자 경험을 고려한 디자인이 필요하다.</li>\n<li>서버에서의 작업이 실패할 경우 이를 처리할 적절한 에러 핸들링이 필요하다.</li>\n</ul>","frontmatter":{"title":"NextJS ver.14: 서버 컴포넌트와 서버 액션","date":"October 10, 2023","update":"October 10, 2023","tags":["NextJS","react"],"series":"NextJS"},"fields":{"slug":"/next-tutorial-05/","readingTime":{"minutes":4.455}}},"seriesList":{"edges":[{"node":{"id":"4f12cffb-fcfd-5035-af57-53d4b7f438bd","fields":{"slug":"/next-tutorial-01/"},"frontmatter":{"title":"NextJS 작동 원리와 파일 구조"}}},{"node":{"id":"d6aa89ae-0d27-5829-9b78-f3fb7b803414","fields":{"slug":"/next-tutorial-02/"},"frontmatter":{"title":"NextJS ver.13 특징 살펴보기"}}},{"node":{"id":"81067629-51a8-508c-a80f-6006f4f32da6","fields":{"slug":"/next-tutorial-03/"},"frontmatter":{"title":"Next-Auth로 Google 로그인 기능 구현"}}},{"node":{"id":"90921c61-72d1-55bc-9932-3d0a3ae55f92","fields":{"slug":"/next-tutorial-04/"},"frontmatter":{"title":"Next-Auth + MongoDB 로그인 유저값 저장하기"}}},{"node":{"id":"715017e0-660b-5773-ac5c-b5b525c5b968","fields":{"slug":"/next-tutorial-05/"},"frontmatter":{"title":"NextJS ver.14: 서버 컴포넌트와 서버 액션"}}}]},"previous":{"fields":{"slug":"/trpc/"},"frontmatter":{"title":"타입 안정성을 위한 최적의 선택: tRPC API 개발 가이드"}},"next":{"fields":{"slug":"/data-structure01/"},"frontmatter":{"title":"[Data Structure] 자료구조와 알고리즘"}}},"pageContext":{"id":"715017e0-660b-5773-ac5c-b5b525c5b968","series":"NextJS","previousPostId":"619399ee-c0ac-5834-ab44-d002a0a8fa4e","nextPostId":"92f3d338-07cc-5841-8ae3-47582ebd98d3"}},"staticQueryHashes":[],"slicesMap":{}}