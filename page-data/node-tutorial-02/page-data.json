{"componentChunkName":"component---src-templates-post-jsx","path":"/node-tutorial-02/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"b41e2071-5fee-55e1-a87d-55db62201ad6","excerpt":"🚀 호출스택과 이벤트 루프 1. 호출 스택 (call stack) 노드는 자바스크립트 코드의 맨 위부터 한 줄씩 실행합니다. 함수 호출 부분을 발견하면 호출한 함수를 호출 스택에 넣고, 함수가 실행되는 동안 호출 스택에 머물러 있다가 실행이 완료되면 호출 스택에서 지워집니다. (Last In First Out) 함수는 호출 순서대로 스택에 쌓인 후, 역순…","html":"<h2>🚀 호출스택과 이벤트 루프</h2>\n<h3>1. 호출 스택 (call stack)</h3>\n<p>노드는 자바스크립트 코드의 맨 위부터 한 줄씩 실행합니다. 함수 호출 부분을 발견하면 호출한 함수를 호출 스택에 넣고, 함수가 실행되는 동안 호출 스택에 머물러 있다가 실행이 완료되면 호출 스택에서 지워집니다. (Last In First Out)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"첫번째\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">third</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"두번째\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">third</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"세번째\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>함수는 호출 순서대로 스택에 쌓인 후, 역순으로 실행됩니다. 이때, 스택 가장 아래에 쌓이는 anonymous는 파일이 실행되면 만들어지는 가상의 실행 환경 (global context)를 의미합니다.</p>\n<img src='https://user-images.githubusercontent.com/68415905/183275903-67f4f44d-2a1a-4009-b384-2a20c7003456.JPG' alt='' width='500'>\n<h3>2. 이벤트 루프</h3>\n<p>호출 스택 내부의 함수는 순차적, 동기적으로 실행됩니다. 그래서 setTimeout과 같은 비동기 함수는 호출 스택만으로는 정의하기가 어렵습니다. 이를 파악하기 위해서는 이벤트 루프, 태스크 큐(task queue), 백그라운드(background)를 알아야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3초 후 실행\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"시작\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"끝\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>이벤트 루프: 이벤트 발생 시 호출할 콜백 함수들을 관리하고, 호출된 콜백 함수의 실행 순서를 결정하는 역할을 담당합니다. 노드가 종료될 때까지 이벤트 처리를 위한 작업을 반복하므로 루프(loop)라고 부릅니다.</li>\n<li>백그라운드: setTimeout 같은 타이머나 이벤트 리스너들이 대기하는 곳입니다. 자바스크립트가 아닌 다른 언어로 작성된 프로그램이라고 봐도 됩니다. 여러 작업이 동시에 실행될 수 있습니다.</li>\n<li>태스크 큐: 이벤트 발생 후, 백그라운드에서는 태스크 큐로 타이머나 이벤트 리스너의 콜백 함수를 보냅니다. 정해진 순서대로 콜백들이 줄을 서 있으므로 콜백 큐라고도 부릅니다. 콜백들은 보통 완료된 순서대로 줄을 서 있지만 특정한 경우에는 순서가 바뀌기도 합니다.</li>\n</ul>\n<br>\n<img src='https://user-images.githubusercontent.com/68415905/183276969-638c31c2-cdf0-4afa-9ae9-649e9151c6de.jpg' alt='' width='550'>\n<hr>\n<img src='https://user-images.githubusercontent.com/68415905/183276970-efde2d93-ddd2-4014-bc53-da8343168547.jpg' alt='' width='550'>\n<hr>\n<img src='https://user-images.githubusercontent.com/68415905/183276971-006e63b0-c613-41de-8be3-01779662b58b.jpg' alt='' width='550'>\n<hr>\n<br /><br /><br />\n<blockquote>\n<p>REFERENCE <br /> Node.js 교과서 개정 2판 <a href=\"https://thebook.io/080229/ch01/01/\">https://thebook.io/080229/ch01/01/</a></p>\n</blockquote>","frontmatter":{"title":"[Node] 호출스택과 이벤트 루프","date":"July 31, 2022","update":"July 31, 2022","tags":["nodejs"],"series":"NodeJS"},"fields":{"slug":"/node-tutorial-02/","readingTime":{"minutes":3.065}}},"seriesList":{"edges":[{"node":{"id":"d540ece5-ec47-5dc0-bfd8-f32073d02e7d","fields":{"slug":"/node-tutorial-01/"},"frontmatter":{"title":"[Node] 서버와 런타임 개념 이해하기"}}},{"node":{"id":"b41e2071-5fee-55e1-a87d-55db62201ad6","fields":{"slug":"/node-tutorial-02/"},"frontmatter":{"title":"[Node] 호출스택과 이벤트 루프"}}},{"node":{"id":"c7a36d8f-2365-553c-95cc-f27a4756b5b1","fields":{"slug":"/node-tutorial-03/"},"frontmatter":{"title":"[Node] 노드의 주요 특성 (논블로킹 싱글스레드 모델)"}}},{"node":{"id":"3a4f3896-1aa8-56e9-b946-78d8e4ba1e9f","fields":{"slug":"/node-tutorial-04/"},"frontmatter":{"title":"[Node] 노드 내장 객체 알아보기"}}},{"node":{"id":"df6ad95f-d2ef-55f8-9f40-e05ce2880629","fields":{"slug":"/node-tutorial-05/"},"frontmatter":{"title":"[Node] 노드 내장 모듈 사용하기"}}}]},"previous":{"fields":{"slug":"/node-tutorial-01/"},"frontmatter":{"title":"[Node] 서버와 런타임 개념 이해하기"}},"next":{"fields":{"slug":"/node-tutorial-03/"},"frontmatter":{"title":"[Node] 노드의 주요 특성 (논블로킹 싱글스레드 모델)"}}},"pageContext":{"id":"b41e2071-5fee-55e1-a87d-55db62201ad6","series":"NodeJS","previousPostId":"d540ece5-ec47-5dc0-bfd8-f32073d02e7d","nextPostId":"c7a36d8f-2365-553c-95cc-f27a4756b5b1"}},"staticQueryHashes":[]}