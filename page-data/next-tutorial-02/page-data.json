{"componentChunkName":"component---src-templates-post-jsx","path":"/next-tutorial-02/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"d6aa89ae-0d27-5829-9b78-f3fb7b803414","excerpt":"app/ Directory app/ 디렉토리 구조는 beta버전이기 때문에 실제 프로덕션 레벨에서는 권장되지 않는다. 기존에는 pages 디렉토리 안에 파일을 생성하여 Automating Routing을 실행했지만, 13버전부터는 app/이라는 새로운 디렉토리가 등장하였다. 파일 시스템 기반에서 디렉터리 기반 라우팅 시스템으로 전환하였다. 현재는 page…","html":"<h2>app/ Directory</h2>\n<p><strong>app/ 디렉토리 구조는 beta버전이기 때문에 실제 프로덕션 레벨에서는 권장되지 않는다.</strong></p>\n<img src='https://velog.velcdn.com/images/hwangyena/post/0e40f528-e985-4164-a017-ae67cd6ff3e2/image.png' alt='pic' witdh='800'>\n<p>기존에는 pages 디렉토리 안에 파일을 생성하여 Automating Routing을 실행했지만, 13버전부터는 app/이라는 새로운 디렉토리가 등장하였다. 파일 시스템 기반에서 디렉터리 기반 라우팅 시스템으로 전환하였다. 현재는 pages와 app 디렉토리가 공존하는 베타 버전으로 제공된다. app 디렉토리 안에는 layout.js, page.js, head.js파일이 존재한다. *dev server를 돌리면 자동적으로 head.js와 layout.js를 생성해준다.</p>\n<ul>\n<li>page.js : 고유한 ui를 정의하는데 사용(index.js같은 느낌)</li>\n<li>layout.js : 여러 경로에서 공유되는 ui를 정의하는데 사용(nav, footer 컴포넌트)</li>\n</ul>\n<h2>Data Fetching</h2>\n<ul>\n<li>이제 getStaticProps, getServerSideProps 사용 대신, 간편하게 <code class=\"language-text\">use</code> hooks 사용으로 SSR을 대체할 수 있어졌다.</li>\n<li><code class=\"language-text\">use</code> hook을 사용하면 fetch, cache, 데이터 재검증을 컴포넌트 레벨에서 가능해진다.</li>\n<li>즉, Static Site Generation (SSG), Server-Side Rendering (SSR), 그리고 Incremental Static Regeneration (ISR)의 모든 이점을 하나의 API를 통해 사용할 수 있다.</li>\n</ul>\n<img src='https://velog.velcdn.com/images/hwangyena/post/cce5ed30-39be-466c-9e44-ddc7233ca369/image.png'>\n<img src='https://velog.velcdn.com/images/hwangyena/post/536b971e-9433-4167-9dcc-9f079d769fab/image.png' width='500'>\n<h2>@next/font</h2>\n<p>새로 등장한 <code class=\"language-text\">next/font</code>! 브라우저에서 Google로 폰트 import 요청없이 폰트 사용이 가능하다.<br/></p>\n<p><a href=\"https://nextjs.org/docs/api-reference/next/font\">next/font Docs 보러가기</a></p>\n<ul>\n<li>CSS와 font는 빌드 타임에 정적 자원으로 불러와지기 때문에 실제 브라우저에서는 google로 요청을 보낼일이 없다</li>\n<li>개인 정보 보호 및 성능 향상을 위한 외부 네트워크 요청 제거</li>\n<li>모든 폰트 파일에 대한 자동 self-hosting 내장</li>\n<li>CSS의 size-adjust 속성을 자동으로 적용 -> Layout shift 요소 제거</li>\n<li>다양한 weight와 styles 사용 시 배열을 사용</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Inter<span class=\"token punctuation\">,</span> Roboto <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@next/font/google'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> inter <span class=\"token operator\">=</span> <span class=\"token function\">Inter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span>html className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>inter<span class=\"token punctuation\">.</span>className<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n\n<span class=\"token keyword\">const</span> roboto <span class=\"token operator\">=</span> <span class=\"token function\">Roboto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">weight</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"400\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"700\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">style</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"normal\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"italic\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">subsets</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"latin\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>커스텀 폰트(local)도 자동 self-hosting, 캐싱, pre-loading 기능과 함께 제공된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> localFont <span class=\"token keyword\">from</span> <span class=\"token string\">'@next/font/local'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> myFont <span class=\"token operator\">=</span> <span class=\"token function\">localFont</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">src</span><span class=\"token operator\">:</span> <span class=\"token string\">'./my-font.woff2'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span>html className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>myFont<span class=\"token punctuation\">.</span>className<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></code></pre></div>\n<h2>next/image</h2>\n<p>레이아웃 변경 없이 쉽게 이미지를 표시하고 성능 향상을 위해 필요에 따라 파일을 최적화할 수 있게 되었다. 기존에는 width height값을 적용하지 않으면 레이아웃이 깨지는 Layout shift가 발생하곤 했는데 Next.js 13에서는 이를 자동으로 처리해준다.</p>\n<ul>\n<li>client-side JavaScript에서 image shift 현상 최소화</li>\n<li>웹 플랫폼에 맞게 조정</li>\n<li>스타일링과 설정이 더 편해짐</li>\n<li>기본적으로 <code class=\"language-text\">alt</code> 태그를 내장하여 접근성을 향상시킴 (필수)</li>\n<li>네이티브한 lazy 로딩은 hydartion이 필요없기 때문에 더 빠름</li>\n<li>⚠️ 기존에 사용되던 next/image 는 next/legacy/image path로 import 할 것.</li>\n</ul>\n<h3>CLS 방지</h3>\n<blockquote>\n<p>Next.js will automatically determine the width and height of your image based on the imported file. These values are used to prevent Cumulative Layout Shift while your image is loading.</p>\n</blockquote>\n<p>자동으로 width 랑 height 정보를 받아와서, CLS 를 막아준다. 하지만, 로컬 이미지 파일이 아닌 remote URL 기반이라면, 반드시 width와 height을 명시해주어야 한다.</p>\n<h3>Priority</h3>\n<p>Next JS Image에는 priority 속성이 있는데 LCP(Largest Contentful Paint)를 줄일 수 있게 도와주는 기능이다. 쉽게 말하자면, 사용자 화면에 모든 UI 렌더링되는 최종 시간을 줄일 수 있다는 뜻이다. 이미지 용량이 커서, 렌더링 저하를 유발시킬 것 같은 이미지 컴퍼넌트에 아래와 같이 priority 속성을 줌으로서, next js 가 화면을 로딩할 때 해당 이미지 렌더링에 우선순위를 줘고 최종적으로 LCP를 줄일 수 있다고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Image <span class=\"token keyword\">from</span> <span class=\"token string\">\"next/image\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Image src<span class=\"token operator\">=</span><span class=\"token string\">\"/me.png\"</span> alt<span class=\"token operator\">=</span><span class=\"token string\">\"photo\"</span> width<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">500</span><span class=\"token punctuation\">}</span> height<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">500</span><span class=\"token punctuation\">}</span> priority <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>next/link</h2>\n<ul>\n<li>Link Component 안에 더이상 <code class=\"language-text\">&lt;a></code> 태그를 사용하지 않아도 된다.</li>\n<li>Link 태그에도 props나 함수를 사용할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// before</span>\n<span class=\"token operator\">&lt;</span>Link href<span class=\"token operator\">=</span><span class=\"token string\">\"/about\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>a onclick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clicked'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>About<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n\n<span class=\"token comment\">// after</span>\n<span class=\"token operator\">&lt;</span>Link href<span class=\"token operator\">=</span><span class=\"token string\">\"/about\"</span> onclick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clicked'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  About\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span></code></pre></div>","frontmatter":{"title":"NextJS ver.13 특징 살펴보기","date":"November 10, 2022","update":"November 10, 2022","tags":["NextJS","react"],"series":"NextJS"},"fields":{"slug":"/next-tutorial-02/","readingTime":{"minutes":5.215}}},"seriesList":{"edges":[{"node":{"id":"4f12cffb-fcfd-5035-af57-53d4b7f438bd","fields":{"slug":"/next-tutorial-01/"},"frontmatter":{"title":"NextJS 작동 원리와 파일 구조"}}},{"node":{"id":"d6aa89ae-0d27-5829-9b78-f3fb7b803414","fields":{"slug":"/next-tutorial-02/"},"frontmatter":{"title":"NextJS ver.13 특징 살펴보기"}}},{"node":{"id":"81067629-51a8-508c-a80f-6006f4f32da6","fields":{"slug":"/next-tutorial-03/"},"frontmatter":{"title":"Next-Auth로 Google 로그인 기능 구현"}}},{"node":{"id":"90921c61-72d1-55bc-9932-3d0a3ae55f92","fields":{"slug":"/next-tutorial-04/"},"frontmatter":{"title":"Next-Auth + MongoDB 로그인 유저값 저장하기"}}}]},"previous":{"fields":{"slug":"/cyworld-clone/"},"frontmatter":{"title":"싸이월드 클론 built in NextJS"}},"next":{"fields":{"slug":"/next-tutorial-03/"},"frontmatter":{"title":"Next-Auth로 Google 로그인 기능 구현"}}},"pageContext":{"id":"d6aa89ae-0d27-5829-9b78-f3fb7b803414","series":"NextJS","previousPostId":"3912a174-9712-5ab9-a0c0-af782a79bf52","nextPostId":"81067629-51a8-508c-a80f-6006f4f32da6"}},"staticQueryHashes":[],"slicesMap":{}}