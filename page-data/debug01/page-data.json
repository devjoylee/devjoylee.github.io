{"componentChunkName":"component---src-templates-post-jsx","path":"/debug01/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"ab4be412-009d-574c-9879-825b66400dc6","excerpt":"디버깅이란? (Debugging) 디버깅은 코드가 예상대로 동작하지 않을 때 오류가 나는 부분을 찾아 원인을 파악하고 해결하는 전체적인 과정을 뜻한다. 디버깅하는 방법  는 대표적인 디버깅 방법이다. console.log()로 코드의 동작을 확인하고 데이터 흐름을 추적할 수 있다. 하지만 무분별한 console.log()의 사용은 코드의 가독성을 떨어트리…","html":"<h2>디버깅이란? (Debugging)</h2>\n<blockquote>\n<p>디버깅은 코드가 예상대로 동작하지 않을 때 오류가 나는 부분을 찾아 원인을 파악하고 해결하는 전체적인 과정을 뜻한다.</p>\n</blockquote>\n<h2>디버깅하는 방법</h2>\n<h3><code class=\"language-text\">console.log()</code></h3>\n<p><code class=\"language-text\">console.log()</code>는 대표적인 디버깅 방법이다. console.log()로 코드의 동작을 확인하고 데이터 흐름을 추적할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 👇 console.log() 지옥</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">example</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"작동 중\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> header <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> header <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"response는 뭐지?\"</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"받는 데이터가 뭐지?\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"에러 발생!\"</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<p>하지만 무분별한 console.log()의 사용은 코드의 가독성을 떨어트리고 브라우저의 콘솔창에 그대로 노출되어 보안유지에 취약하다.</p>\n<img width='500' alt='' src='https://github.com/devjoylee/toyota_display_ads/assets/68415905/6dedf002-23f8-4114-864e-e3cc20686af3' style='margin-left: 0'>\n<h3>Chrome DevTools</h3>\n<p>대부분의 브라우저는 강력한 디버깅 도구를 제공한다. 그 중에도 가장 보편적으로 쓰이는 것이 Chrome의 DevTools이다. <br/> 브라우저에서 <code class=\"language-text\">F12</code> (Windows) 또는 <code class=\"language-text\">Option + Command + J</code> (Mac) 키를 누르면 도구창이 열린다.</p>\n<p>DevTools의 Network 탭을 이용하면 console.log를 사용하지 않아도 네트워크 요청과 응답 데이터를 자세히 확인할 수 있다. 이를 통해 어떤 데이터가 주고받는지, 요청이 성공했는지 또는 실패했는지를 쉽게 알 수 있다. 에러가 발생했을 때 Network 탭을 활용하면 요청의 상태 코드, 헤더, 페이로드, 응답 내용을 확인할 수 있어 문제의 원인을 보다 정확하게 분석하고 신속하게 해결할 수 있다.</p>\n<h2>Devtools 네트워킹 분석 도구</h2>\n<h3>Network 탭 활용하기</h3>\n<ol>\n<li>\n<p>먼저 Network 탭으로 이동하고 페이지를 새로고침하면 브라우저가 내려받은 파일이 순서대로 출력된다. <br/>각 파일의 Status를 통해 정상 작동 여부(200)나 에러 발생 여부(404)를 확인할 수 있다.</p>\n</li>\n<li>\n<p>파일을 클릭하면 해당 파일이 가진 데이터를 자세히 살펴볼 수 있다.</p>\n</li>\n<li>\n<p>데이터를 확인하며 발생한 에러의 원인을 분석한다.</p>\n</li>\n</ol>\n<img width='700' alt='' src='https://github.com/devjoylee/toyota_display_ads/assets/68415905/1af48878-d83d-47e7-9848-f1d15973b077' style='margin-left: 0'>\n<h3>Network 탭 상세 설명</h3>\n<ul>\n<li>\n<p>Headers 탭 : 서버에 요청한 데이터의 Header 값 ex) URL, 상태 코드\n<img width='828' alt='Screenshot 2024-06-27 at 2 32 21 PM' src='https://github.com/devjoylee/toyota_display_ads/assets/68415905/dcb9d9d7-d148-43d6-bd6e-65f9bd6b2286' style='margin-left: 0'></p>\n</li>\n<li>\n<p>Payload : 서버에 요청한 쿼리 데이터 정보 확인\n<img width='745' alt='Screenshot 2024-06-27 at 2 33 17 PM' src='https://github.com/devjoylee/toyota_display_ads/assets/68415905/ce96e777-239a-432e-b250-ef2669123e4f' style='margin-left: 0'></p>\n</li>\n<li>\n<p>Preview / Response : 서버에서 반환한 데이터 정보. 에러가 있는 경우 에러메세지 반환\n<img width='750' alt='Screenshot 2024-06-27 at 2 33 42 PM' src='https://github.com/devjoylee/toyota_display_ads/assets/68415905/02c138d4-a758-4dfd-b408-d33ee31e4357' style='margin-left: 0'></p>\n<img width='750' alt='Screenshot 2024-06-27 at 2 33 32 PM' src='https://github.com/devjoylee/toyota_display_ads/assets/68415905/9a4aaac5-2d05-481c-9c09-56a4be29770c' style='margin-left: 0'>\n</li>\n</ul>\n<br />\n<br />\n<br />\n<blockquote>\n<p>REFERENCE<br /> 브라우저 디버깅하는 방법 [2024] <a href=\"https://www.youtube.com/watch?v=C4poqiG8ulM\">https://www.youtube.com/watch?v=C4poqiG8ulM</a></p>\n</blockquote>","frontmatter":{"title":"디버깅 환경 : Chrome DevTools로 에러 발생 원인 파악하기","date":"June 26, 2024","update":"June 26, 2024","tags":["frontend","development"],"series":"Dev Environment"},"fields":{"slug":"/debug01/","readingTime":{"minutes":3.63}}},"seriesList":{"edges":[{"node":{"id":"6a885fc6-db67-5e8e-87eb-b695ef8c1df6","fields":{"slug":"/eslint/"},"frontmatter":{"title":"협업을 위한 프로젝트 설정 - ESLint"}}},{"node":{"id":"76430891-9c35-5424-8f64-5ce947d3c32e","fields":{"slug":"/prettier/"},"frontmatter":{"title":"협업을 위한 프로젝트 설정 - Prettier"}}},{"node":{"id":"8f667285-8ab0-5043-b4ae-f4fc69bad25e","fields":{"slug":"/husky/"},"frontmatter":{"title":"협업을 위한 프로젝트 설정 - husky + lint-staged"}}},{"node":{"id":"ab4be412-009d-574c-9879-825b66400dc6","fields":{"slug":"/debug01/"},"frontmatter":{"title":"디버깅 환경 : Chrome DevTools로 에러 발생 원인 파악하기"}}},{"node":{"id":"014caa5e-050c-58cb-9c41-612cd5d0ede2","fields":{"slug":"/debug02/"},"frontmatter":{"title":"디버깅 환경 : 디버거의 Breakpoint를 활용한 문제 해결"}}}]},"previous":{"fields":{"slug":"/husky/"},"frontmatter":{"title":"협업을 위한 프로젝트 설정 - husky + lint-staged"}},"next":{"fields":{"slug":"/debug02/"},"frontmatter":{"title":"디버깅 환경 : 디버거의 Breakpoint를 활용한 문제 해결"}}},"pageContext":{"id":"ab4be412-009d-574c-9879-825b66400dc6","series":"Dev Environment","previousPostId":"8f667285-8ab0-5043-b4ae-f4fc69bad25e","nextPostId":"014caa5e-050c-58cb-9c41-612cd5d0ede2"}},"staticQueryHashes":[],"slicesMap":{}}