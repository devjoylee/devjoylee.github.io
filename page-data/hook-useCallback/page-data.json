{"componentChunkName":"component---src-templates-post-jsx","path":"/hook-useCallback/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"b987645f-66e7-5659-9c5b-6ef6d8f77751","excerpt":"✨ useCallback 정의 useCallback은 useMemo와 같이 Memoization 기법을 사용하여 컴포넌트 최적화에 사용됩니다. useMemo는 함수에서 반환되는 '값'을 저장한다면 useCallback은 '함수 그 자체'를 저장해두고 재사용하는 것입니다. useCallback 역시 2개의 인자를 필요로 하는데, memoization할 콜백…","html":"<h2>✨ useCallback 정의</h2>\n<p>useCallback은 useMemo와 같이 Memoization 기법을 사용하여 컴포넌트 최적화에 사용됩니다. useMemo는 함수에서 반환되는 '값'을 저장한다면 useCallback은 '함수 그 자체'를 저장해두고 재사용하는 것입니다. useCallback 역시 2개의 인자를 필요로 하는데, memoization할 콜백함수와 dependency array를 인자로 받아옵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> value\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>🔎 useCallback 사용하기</h2>\n<p>함수형 컴포넌트가 렌더링되면 내부의 모든 변수가 초기화됩니다. 그러므로 컴포넌트 내부에 존재하는 함수 역시 렌더링될 때마다 초기화되고 새로운 함수가 생성됩니다.</p>\n<p>이때, 내부 함수를 useCallback으로 감싸주면, 컴포넌트가 렌더링 되어도 함수가 초기화되는 것을 막을 수 있습니다. 첫 렌더링 때, 함수 객체를 만들어서 초기화한 후 저장해두고 이후 렌더링 부터는 저장된 함수를 사용하는 것 입니다.</p>\n<ul>\n<li><code class=\"language-text\">useCallback</code> 적용 전</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">,</span> setNumber<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">someFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 렌더링마다 초기화</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">number: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>number<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"someFunction이 변경되었습니다.\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>someFunction<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// 렌더링 발생 로직..</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<ul>\n<li><code class=\"language-text\">useCallback</code> 적용 후</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">,</span> setNumber<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> someFunction <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 첫 렌더링에만 초기화</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">number: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>number<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number가 바뀔 때 만 업데이트</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"someFunction이 변경되었습니다.\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>someFunction<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// 렌더링 발생 로직..</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<br/>\n<blockquote>\n<p>REFERENCE<br/>Youtube 별코딩 <a href=\"https://youtu.be/XfUF9qLa3mU\">https://youtu.be/XfUF9qLa3mU</a><br/>useCallback 과 useMemo 의 차이 <a href=\"https://basemenks.tistory.com/238\">https://basemenks.tistory.com/238</a></p>\n</blockquote>","frontmatter":{"title":"[React] React Hook - useCallback","date":"January 20, 2022","update":"January 20, 2022","tags":["frontend","react"],"series":"React.js"},"fields":{"slug":"/hook-useCallback/","readingTime":{"minutes":2.095}}},"seriesList":{"edges":[{"node":{"id":"b4d0435e-daf0-5a20-814d-e6eb0a6637d0","fields":{"slug":"/about-react/"},"frontmatter":{"title":"[React] 리액트의 개념과 특징"}}},{"node":{"id":"9eb4fd90-0091-59ae-af4a-2157f1d48e9a","fields":{"slug":"/react-scratch/"},"frontmatter":{"title":"[React] 리액트 시작하기 (without CRA)"}}},{"node":{"id":"a2c215be-4572-531c-af95-c85a84c12601","fields":{"slug":"/about-react-hook/"},"frontmatter":{"title":"[React] React Hook이란?"}}},{"node":{"id":"da1bdaf1-0908-5a09-96fe-84b01ec1a4c9","fields":{"slug":"/hook-useState/"},"frontmatter":{"title":"[React] React Hook - useState"}}},{"node":{"id":"74a83270-4b1c-509e-99d5-3bdb5a24f619","fields":{"slug":"/hook-useEffect/"},"frontmatter":{"title":"[React] React Hook - useEffect"}}},{"node":{"id":"97466c71-229f-5eef-b94f-3b2c3a1e58b8","fields":{"slug":"/hook-useRef/"},"frontmatter":{"title":"[React] React Hook - useRef"}}},{"node":{"id":"5c86f011-9568-5f1a-80cb-399a2cd6e93c","fields":{"slug":"/hook-useContext/"},"frontmatter":{"title":"[React] React Hook - useContext"}}},{"node":{"id":"25c35473-fd2a-5a2e-b427-00b3b9282235","fields":{"slug":"/hook-useMemo/"},"frontmatter":{"title":"[React] React Hook - useMemo"}}},{"node":{"id":"b987645f-66e7-5659-9c5b-6ef6d8f77751","fields":{"slug":"/hook-useCallback/"},"frontmatter":{"title":"[React] React Hook - useCallback"}}},{"node":{"id":"d7f27a35-173b-529a-bef4-f6d9f3505d63","fields":{"slug":"/hook-useReducer/"},"frontmatter":{"title":"[React] React Hook - useReducer"}}}]},"previous":{"fields":{"slug":"/hook-useMemo/"},"frontmatter":{"title":"[React] React Hook - useMemo"}},"next":{"fields":{"slug":"/hook-useReducer/"},"frontmatter":{"title":"[React] React Hook - useReducer"}}},"pageContext":{"id":"b987645f-66e7-5659-9c5b-6ef6d8f77751","series":"React.js","previousPostId":"25c35473-fd2a-5a2e-b427-00b3b9282235","nextPostId":"d7f27a35-173b-529a-bef4-f6d9f3505d63"}},"staticQueryHashes":[],"slicesMap":{}}