{"componentChunkName":"component---src-templates-post-jsx","path":"/next-tutorial-03/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"81067629-51a8-508c-a80f-6006f4f32da6","excerpt":"✨ Next-Auth란? Next.js에서 소셜 로그인 기능을 쉽게 추가하고 관리할 수 있는 Node.js 라이브러리 (Authentication)📝 Next-Auth Docs 바로가기 Installation 🔎 Next Auth 설정하기 1. Google OAuth 인증 정보 발급 Next Auth를 설정하기에 앞서 사용하고자 하는 API의 Client…","html":"<h2>✨ Next-Auth란?</h2>\n<blockquote>\n<p>Next.js에서 소셜 로그인 기능을 쉽게 추가하고 관리할 수 있는 Node.js 라이브러리 (Authentication)<br/>📝 <a href=\"https://next-auth.js.org/getting-started/example\">Next-Auth Docs 바로가기</a></p>\n</blockquote>\n<h3>Installation</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> next-auth</code></pre></div>\n<h2>🔎 Next Auth 설정하기</h2>\n<h3>1. Google OAuth 인증 정보 발급</h3>\n<p>Next Auth를 설정하기에 앞서 사용하고자 하는 API의 Client ID와 Key를 발급받는다. 👉<a href=\"https://devjoylee.github.io/google-auth-clientid/\">Google OAuth Client ID 발급 방법</a></p>\n<h3>2. 환경 변수 설정</h3>\n<p>발급받은 Google OAuth 클라이언트 정보를 <code class=\"language-text\">.env.local</code> 파일에 아래와 같이 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">GOOGLE_CLIENT_ID=7800994348....\nGOOGLE_CLIENT_SECRET=GOCSPX....</code></pre></div>\n<h3>3. Next Auth API 만들기</h3>\n<p>page 폴더 내에 <code class=\"language-text\">api/auth/[...nextauth].js</code> 파일을 만들고 아래 코드를 추가한다. <br/>이 파일은 <code class=\"language-text\">/api/auth/*</code> 의 경로로 요청되는 모든 request를 처리한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> NextAuth <span class=\"token keyword\">from</span> <span class=\"token string\">'next-auth'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> GoogleProvider <span class=\"token keyword\">from</span> <span class=\"token string\">'next-auth/providers/google'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">NextAuth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Configure one or more authentication providers</span>\n  <span class=\"token literal-property property\">providers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">GoogleProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">clientId</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">GOOGLE_CLIENT_ID</span><span class=\"token operator\">!</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">clientSecret</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">GOOGLE_CLIENT_SECRET</span><span class=\"token operator\">!</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// add more providers here</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>4. Next.js에 nextauth 연결하기</h3>\n<p>아래와 같이 next-auth가 제공하는 Provider로 컴포넌트를 감싸주면 next.js 내 모든 컴포넌트에서 useSession hooks를 활용하여 session 정보에 접근할 수 있게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//_app.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> SessionProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"next-auth/react\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyApp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">pageProps</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> session<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>pageProps <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>SessionProvider session<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>session<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Component <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>pageProps<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>SessionProvider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>5. 컴포넌트에 nextAuth 추가하기</h3>\n<ul>\n<li>useSession Hook</li>\n</ul>\n<p>로그인 여부를 알려주는 hook으로 로그인 여부에 따라 배열의 <strong>첫번째 인자는 유저 정보, 두번쨰 인자로는 loading 상태</strong>를 return 한다. 아래 코드는 session 변수로 로그인 상태를 확인하고 로그인/로그아웃 버튼을 출력한다.</p>\n<ul>\n<li>signIn, signOut 함수</li>\n</ul>\n<p>signIn, signOut 함수는 next auth에서 제공해주는 함수로 해당 함수를 실행하면 next-auth가 만들어 놓은 로그인 페이지 혹은 로그아웃 페이지로 이동한다. 👉 <a href=\"https://next-auth.js.org/configuration/pages\">signIn &#x26; signOut 링크설정하기</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> signIn<span class=\"token punctuation\">,</span> signOut<span class=\"token punctuation\">,</span> useSession <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next-auth/client'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> session<span class=\"token punctuation\">,</span> loading <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>session <span class=\"token operator\">&amp;&amp;</span>\n      Not signed <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>br<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">signIn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Sign <span class=\"token keyword\">in</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span>\n      session <span class=\"token operator\">&amp;&amp;</span>\n      Signed <span class=\"token keyword\">in</span> <span class=\"token keyword\">as</span> <span class=\"token punctuation\">{</span>session<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span> <span class=\"token operator\">&lt;</span>br<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">signOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Sign out<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<br />\n<br />\n<blockquote>\n<p>REFERENCE<br /> NextAuth 공식문서 <a href=\"https://next-auth.js.org/\">https://next-auth.js.org/</a></p>\n</blockquote>","frontmatter":{"title":"Next-Auth로 Google 로그인 기능 구현","date":"November 19, 2022","update":"November 19, 2022","tags":["NextJS","react"],"series":"NextJS"},"fields":{"slug":"/next-tutorial-03/","readingTime":{"minutes":2.745}}},"seriesList":{"edges":[{"node":{"id":"4f12cffb-fcfd-5035-af57-53d4b7f438bd","fields":{"slug":"/next-tutorial-01/"},"frontmatter":{"title":"NextJS 작동 원리와 파일 구조"}}},{"node":{"id":"d6aa89ae-0d27-5829-9b78-f3fb7b803414","fields":{"slug":"/next-tutorial-02/"},"frontmatter":{"title":"NextJS ver.13 특징 살펴보기"}}},{"node":{"id":"81067629-51a8-508c-a80f-6006f4f32da6","fields":{"slug":"/next-tutorial-03/"},"frontmatter":{"title":"Next-Auth로 Google 로그인 기능 구현"}}},{"node":{"id":"90921c61-72d1-55bc-9932-3d0a3ae55f92","fields":{"slug":"/next-tutorial-04/"},"frontmatter":{"title":"Next-Auth + MongoDB 로그인 유저값 저장하기"}}},{"node":{"id":"715017e0-660b-5773-ac5c-b5b525c5b968","fields":{"slug":"/next-tutorial-05/"},"frontmatter":{"title":"NextJS ver.14: 서버 컴포넌트와 서버 액션"}}}]},"previous":{"fields":{"slug":"/next-tutorial-02/"},"frontmatter":{"title":"NextJS ver.13 특징 살펴보기"}},"next":{"fields":{"slug":"/node-tutorial-04/"},"frontmatter":{"title":"[Node] Server Authentication (Session vs JWT)"}}},"pageContext":{"id":"81067629-51a8-508c-a80f-6006f4f32da6","series":"NextJS","previousPostId":"d6aa89ae-0d27-5829-9b78-f3fb7b803414","nextPostId":"00edc97c-e36c-55a1-9d91-6fc009e4cbff"}},"staticQueryHashes":[],"slicesMap":{}}