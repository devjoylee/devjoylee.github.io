{"componentChunkName":"component---src-templates-post-jsx","path":"/sockjs/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"cc55c771-e832-537b-9152-215ea79b598f","excerpt":"✨ StompJS 란? stomp : 단순 <또는 스트리밍) 텍스트 지향 메시징 프로토콜. spring에 종속적. StompJS Docs stomp 설치 최근 브라우저는 모두 socket을 지원하지만 IE 9 이하에서는 사용이 불가능합니다. 브라우저 대응이 필요한 경우, 를 추가로 설치하여 사용합니다.  (@types 패키지는 typescript를 사용하…","html":"<h2>✨ StompJS 란?</h2>\n<blockquote>\n<p>stomp : 단순 &#x3C;또는 스트리밍) 텍스트 지향 메시징 프로토콜. spring에 종속적.<br/> <a href=\"https://stomp-js.github.io/guide/stompjs/upgrading-stompjs.html\">StompJS Docs</a></p>\n</blockquote>\n<h3>stomp 설치</h3>\n<p>최근 브라우저는 모두 socket을 지원하지만 IE 9 이하에서는 사용이 불가능합니다. 브라우저 대응이 필요한 경우, <code class=\"language-text\">socketjs-client</code>를 추가로 설치하여 사용합니다.</p>\n<ul>\n<li><code class=\"language-text\">stompjs</code> (@types 패키지는 typescript를 사용하는 경우에만 설치)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i @stomp/stompjs, @types/stompjs</code></pre></div>\n<ul>\n<li><code class=\"language-text\">socketjs-client</code> : 브라우저 대응이 필요한 경우 추가 설치</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i socketjs-client, @types/socketjs-client</code></pre></div>\n<h3>stomp flow</h3>\n<ol>\n<li>서버와 연결할 클라이언트 객체 생성</li>\n<li>서버와 연결할 클라이언트 Connection</li>\n<li>메세지 전송 전 Subscriber와 Publisher를 지정</li>\n<li>Subscribe를 하면 해당 URL로 나에게 메세지를 보낼 수 있는 경로가 생긴다</li>\n<li>Publisher를 하면 Publish한 URL로 메세지가 이동한다</li>\n</ol>\n<h2>🔎 StompJS 사용하기</h2>\n<h3>새 클라이언트 생성</h3>\n<p>설치한 패키지를 import한 후 client 객체를 생성합니다. <a href=\"https://stomp-js.github.io/api-docs/latest/classes/Client.html#connectHeaders\">properties 더보기</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> SockJS <span class=\"token keyword\">from</span> <span class=\"token string\">\"sockjs-client\"</span>\n<span class=\"token keyword\">import</span> StompJs <span class=\"token keyword\">from</span> <span class=\"token string\">\"@stomp/stompjs\"</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StompJs<span class=\"token punctuation\">.</span>Client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">brokerURL</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ws://localhost:8888/ws\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// server 주소 (or endpoint)</span>\n  <span class=\"token literal-property property\">connectHeaders</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">login</span><span class=\"token operator\">:</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">passcode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// optional</span>\n  <span class=\"token function-variable function\">debug</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token comment\">// optional</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">reconnectDelay</span><span class=\"token operator\">:</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// optional</span>\n  <span class=\"token literal-property property\">heartbeatIncoming</span><span class=\"token operator\">:</span> <span class=\"token number\">4000</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// optional</span>\n  <span class=\"token literal-property property\">heartbeatOutgoing</span><span class=\"token operator\">:</span> <span class=\"token number\">4000</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// optional</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">brokerURL</code> : 서버 API 주소. http주소는 ws로, https주소는 wss로 변경합니다.</li>\n<li><code class=\"language-text\">connectHeaders</code> : stomp 연결 시, 서버에서 식별자로 사용됨 (HTTP 연결 헤더 ❌)</li>\n<li><code class=\"language-text\">debug</code> : 각 동작에 대한 정보를 console로 확인 가능</li>\n<li><code class=\"language-text\">reconnectDelay</code> : stomp 서버 자동 연결 간격</li>\n<li><code class=\"language-text\">heartbeatIncoming</code> &#x26; <code class=\"language-text\">heartbeatOutgoing</code> : socket 연결 상태 확인 주기</li>\n</ul>\n<h3>소켓 connection</h3>\n<p>연결됐을때 실행할 함수와 에러처리를 담당하는 함수를 생성하고 클라이언트를 활성화 시켜줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">client<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onConnect</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">frame</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Do something, all subscribes must be done is this callback</span>\n  <span class=\"token comment\">// This is needed because this will be executed after a (re)connect</span>\n<span class=\"token punctuation\">}</span>\n\nclient<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onStompError</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">frame</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Will be invoked in case of error encountered at Broker</span>\n  <span class=\"token comment\">// Bad login/passcode typically will cause an error</span>\n  <span class=\"token comment\">// Complaint brokers will set `message` header with a brief message. Body may contain details.</span>\n  <span class=\"token comment\">// Compliant brokers will terminate the connection after any error</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Broker reported error: \"</span> <span class=\"token operator\">+</span> frame<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Additional details: \"</span> <span class=\"token operator\">+</span> frame<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">activate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>소켓 미지원 브라우저 대응</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> WebSocket <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  client<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">webSocketFactory</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SockJS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8080/stomp\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>소켓 disconnection</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">disConnect</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>client <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">.</span>connected<span class=\"token punctuation\">)</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">deactivate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">disConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>메세지 보내기</h3>\n<p>클라이언트와 서버가 연결 되면 publish 메서드를 사용하여 메세지를 보낼 수 있습니다. destination는 목적지라는 뜻입니다 어디로 메세지를 보낼지를 결정합니다.</p>\n<p>body는 보낼 내용입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sendMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>client <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>client<span class=\"token punctuation\">.</span>connected<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n    <span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">userId</span><span class=\"token operator\">:</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> text <span class=\"token punctuation\">}</span>\n    client<span class=\"token punctuation\">.</span><span class=\"token function\">publish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">destination</span><span class=\"token operator\">:</span> <span class=\"token constant\">SEND_MESSAGE_API</span><span class=\"token punctuation\">(</span>room<span class=\"token operator\">?.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>v5부턴 바이너리 메세지 전송도 지원된다고 하네요! (header에 'content-type': 'application/octet-stream')로 contentType을 써줍니다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> binaryData <span class=\"token operator\">=</span> <span class=\"token function\">generateBinaryData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">publish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">destination</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/topic/special\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">binaryBody</span><span class=\"token operator\">:</span> binaryData<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">\"content-type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/octet-stream\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>메세지 받기</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>client <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> client<span class=\"token punctuation\">.</span>connected<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      client<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token constant\">GET_MESSAGE_API</span><span class=\"token punctuation\">(</span>room<span class=\"token operator\">?.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">newMessage</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>message <span class=\"token keyword\">as</span> string<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">addContent</span><span class=\"token punctuation\">(</span>newMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><br /><br /></p>\n<blockquote>\n<p>REFERENCE<br /> WebSoket (stompJS+React) 채팅 <a href=\"https://velog.io/@cksal5911/WebSoket-stompJSReact-%EC%B1%84%ED%8C%85-1\">https://velog.io/@cksal5911/WebSoket-stompJSReact-%EC%B1%84%ED%8C%85-1</a> <br/> react stomp.js으로 소켓 통신과정 <a href=\"https://okky.kr/article/1152048\">https://okky.kr/article/1152048</a></p>\n</blockquote>","frontmatter":{"title":"Stomp.JS 로 채팅방 구현하기","date":"May 10, 2022","update":"May 10, 2022","tags":["sockjs"],"series":"Web Socket"},"fields":{"slug":"/sockjs/","readingTime":{"minutes":4.17}}},"seriesList":{"edges":[{"node":{"id":"9e4188eb-fba8-55f9-b7d4-bd659fb80e96","fields":{"slug":"/about-socket/"},"frontmatter":{"title":"Socket 통신의 특징 및 프로토콜의 종류"}}},{"node":{"id":"c8f09e12-f79e-5651-b0a2-0d80f7ae37da","fields":{"slug":"/socketio/"},"frontmatter":{"title":"Socket.io 기능 알아보기"}}},{"node":{"id":"cc55c771-e832-537b-9152-215ea79b598f","fields":{"slug":"/sockjs/"},"frontmatter":{"title":"Stomp.JS 로 채팅방 구현하기"}}}]},"previous":{"fields":{"slug":"/socketio/"},"frontmatter":{"title":"Socket.io 기능 알아보기"}},"next":null},"pageContext":{"id":"cc55c771-e832-537b-9152-215ea79b598f","series":"Web Socket","previousPostId":"c8f09e12-f79e-5651-b0a2-0d80f7ae37da","nextPostId":null}},"staticQueryHashes":[]}