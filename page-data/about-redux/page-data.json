{"componentChunkName":"component---src-templates-post-jsx","path":"/about-redux/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"a2981dcc-3268-5afa-a5d1-bbafdfe9183d","excerpt":"💡 Redux란? Redux란 '상태 관리 라이브러리'로써 기존에 흩어져 있는 state들을 한 곳에 모아 관리하여 예측 불가능한 버그를 최소화하고 효율적으로 state를 사용할 수 있도록 합니다. 또한 Redux는 React 외에도 Angular, Vue, jQuery 등 다양한 환경에서 사용할 수 있습니다. why-using-redux 에서의 상태관리…","html":"<h2>💡 Redux란?</h2>\n<p>Redux란 '상태 관리 라이브러리'로써 기존에 흩어져 있는 state들을 한 곳에 모아 관리하여 예측 불가능한 버그를 최소화하고 효율적으로 state를 사용할 수 있도록 합니다. 또한 Redux는 React 외에도 Angular, Vue, jQuery 등 다양한 환경에서 사용할 수 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/68415905/157664466-dffebac5-4ead-438f-895b-dd53e3b01b70.jpg\" alt=\"why-using-redux\"></p>\n<ul>\n<li>\n<p><code class=\"language-text\">React</code>에서의 상태관리</p>\n<p>React에서의 상태는 <code class=\"language-text\">props</code>를 통해 각 컴포넌트로 전달됩니다. 특정 컴포넌트에서 state가 변화하면 <code class=\"language-text\">props</code>로 연결된 모든 컴포넌트가 함께 업데이트 됩니다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">Redux</code>에서의 상태관리</p>\n<p>Redux에서의 상태는 컴포넌트끼리 공유하지 않고 <code class=\"language-text\">store</code>라는 파일을 거쳐 필요한 컴포넌트로 즉시 전달됩니다. (<code class=\"language-text\">store</code> : 앱에서 사용되는 모든 state를 저장하고 관리하는 장소)</p>\n</li>\n</ul>\n<h2>📝 Redux의 3원칙</h2>\n<ol>\n<li>\n<p><strong>Single source of truth</strong></p>\n<p>필요한 상태 데이터는 모두 <code class=\"language-text\">store</code>라는 데이터 공간에 저장하고 관리됩니다.</p>\n</li>\n<li>\n<p><strong>State is read-only</strong></p>\n<p>리액트에서 useState로 상태 변경을 하듯이 리덕스에서는 <code class=\"language-text\">action</code>이라는 객체를 통해서만 상태를 변경할 수 있습니다. (예측 가능)</p>\n</li>\n<li>\n<p><strong>Changes are made with pure functions</strong></p>\n<p>상태 변경은 순수함수(<code class=\"language-text\">reducer</code>)로만 가능합니다.</p>\n</li>\n</ol>\n<p><img src=\"https://user-images.githubusercontent.com/68415905/158020881-ecacf242-8f93-4518-9372-afa3b10d4609.png\" alt=\"redux\"></p>\n<h2>🎉 Redux 시작하기</h2>\n<h3>0. Redux 설치 및 폴더 구조</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> redux react-redux</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">redux/\n├── actions/\n│   ├── index.js <span class=\"token comment\"># 액션 엔트리</span>\n│   ├── actionTypes.js <span class=\"token comment\"># 액션 타입 상수 파일</span>\n│   ├── auth.js <span class=\"token comment\"># action 1</span>\n│   └── counter.js  <span class=\"token comment\"># action 2</span>\n├── reducers/\n│   ├── index.js <span class=\"token comment\"># 리듀서 엔트리 (rootReducer)</span>\n│   ├── auth.js <span class=\"token comment\"># reducer 1</span>\n│   └── counter.js <span class=\"token comment\"># reducer 2</span>\n└── store.js <span class=\"token comment\"># 스토어 엔트리 (스토어 생성)</span></code></pre></div>\n<h3>1. action 생성</h3>\n<blockquote>\n<p><code class=\"language-text\">action</code> : 객체 형식으로 컴포넌트에서 상태 변경을 요청할 때 사용</p>\n</blockquote>\n<ul>\n<li><code class=\"language-text\">type</code> : 액션명 (필수)</li>\n<li><code class=\"language-text\">payload</code> : 변경할 상태 값 (옵션)</li>\n</ul>\n<p>action 생성 시 필요한 값으로는 <code class=\"language-text\">type</code>과 <code class=\"language-text\">payload</code> 가 있는데 이때, <code class=\"language-text\">type</code>은 파일을 별도로 만들어 상수(constant)로 관리하는 것이 유지 보수 하기 좋습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// actions/actionTypes.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">LOG_IN</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"LOG_IN\"</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">LOG_OUT</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"LOG_OUT\"</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">INCREASE_COUNT</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"INCREASE_COUNT\"</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">DECREASE_COUNT</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"DECREASE_COUNT\"</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">//actions/auth.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">LOG_IN</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">LOG_OUT</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./actionTypes\"</span>\n<span class=\"token comment\">// 로그인 요청 action</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">login</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">LOG_IN</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 전달받은 상태값을 payload에 저장</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 로그아웃 요청 action</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">logout</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">LOG_OUT</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>2. reducer 생성</h3>\n<blockquote>\n<p><code class=\"language-text\">reducer</code> : action 에 맞게 state를 업데이트 하는 함수</p>\n</blockquote>\n<p>reducer는 상태(state)와 액션(action)을 전달 받아 '현재 상태'를 '새로운 상태'로 교체 한 후 반환하는 함수이며 주로 <code class=\"language-text\">switch</code> ~ <code class=\"language-text\">case</code> 문으로 작성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> reducer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">LOG_IN</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 현재 상태를 가져와</span>\n        <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token comment\">// 전달받은 payload값으로 교체</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">LOG_OUT</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>reducer 파일이 여러개라면 index.js 파일을 만들고 <code class=\"language-text\">combineReducers</code>를 사용해 reducer를 하나로 합쳐주는 <code class=\"language-text\">rootReducer</code>를 생성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// reducers/index.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> combineReducers <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> authReducer<span class=\"token punctuation\">,</span> counterReducer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"reducers\"</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> rootReducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">auth</span><span class=\"token operator\">:</span> authReducer<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">counter</span><span class=\"token operator\">:</span> counterReducer<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>3. store 생성</h3>\n<blockquote>\n<p><code class=\"language-text\">store</code> : 모든 상태가 저장되는 공간</p>\n</blockquote>\n<p>만들어둔 <code class=\"language-text\">reducer</code>(or <code class=\"language-text\">rootReducer</code>) 함수를 <code class=\"language-text\">createStore</code>에 전달하여 <code class=\"language-text\">store</code>를 생성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux\"</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>rootReducer<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> store</code></pre></div>\n<h2>🔎 Redux 사용하기</h2>\n<h3>- Provider</h3>\n<blockquote>\n<p>Provider : store에 저장된 상태값을 컴포넌트로 전달</p>\n</blockquote>\n<p>모든 컴포넌트에서 store에 접근할 수 있도록 최상단 컴포넌트(<code class=\"language-text\">App</code>)를 <code class=\"language-text\">Provider</code>로 감싸주고 store를 전달합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> App <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./App\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Provider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-redux\"</span>\n<span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux/store\"</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Provider</span></span> <span class=\"token attr-name\">store</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Provider</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>- useSelector</h3>\n<blockquote>\n<p>useSelector : store에 저장된 상태값 가져와서 사용</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useSelector <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-redux\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mainPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span><span class=\"token plain-text\">님 환영합니다</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>- useDispatch</h3>\n<blockquote>\n<p>useDispatch : action을 실행시켜 store의 상태값 업데이트</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useDispatch <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-redux\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>login<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"actions/auth.js\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">loginPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token function\">useDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// login 액션을 실행시켜 input value값을 store로 전달!</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleLogIn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleLogIn<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Log In</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br />\n<br />\n<blockquote>\n<p>REFERENCE<br />Youtube 생활코딩 <a href=\"https://youtu.be/yjuwpf7VH74\">https://youtu.be/yjuwpf7VH74</a><br/>야무의 React 러닝 가이드 <a href=\"https://yamoo9.github.io/react-master/lecture/rd-redux.html\">https://yamoo9.github.io/react-master/lecture/rd-redux.html</a></p>\n</blockquote>","frontmatter":{"title":"Redux - 상태 관리 라이브러리","date":"February 20, 2022","update":"February 20, 2022","tags":["react","redux"],"series":"Redux"},"fields":{"slug":"/about-redux/","readingTime":{"minutes":5.68}}},"seriesList":{"edges":[{"node":{"id":"a2981dcc-3268-5afa-a5d1-bbafdfe9183d","fields":{"slug":"/about-redux/"},"frontmatter":{"title":"Redux - 상태 관리 라이브러리"}}},{"node":{"id":"e112dcf7-27af-54b7-bae1-13a446befc12","fields":{"slug":"/redux-thunk/"},"frontmatter":{"title":"Redux-thunk로 비동기 작업하기"}}}]},"previous":{"fields":{"slug":"/estimate-board/"},"frontmatter":{"title":"견적서 게시판 (필터링 기능)"}},"next":{"fields":{"slug":"/redux-thunk/"},"frontmatter":{"title":"Redux-thunk로 비동기 작업하기"}}},"pageContext":{"id":"a2981dcc-3268-5afa-a5d1-bbafdfe9183d","series":"Redux","previousPostId":"3bfc8dc4-e7d8-5943-9879-639e36e98ff2","nextPostId":"e112dcf7-27af-54b7-bae1-13a446befc12"}},"staticQueryHashes":[]}