{"componentChunkName":"component---src-templates-post-jsx","path":"/redux-about/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"5f1c22dc-fabf-56b6-834c-a8e8ffa1958a","excerpt":"💡 Redux란? Redux란 '상태 관리 라이브러리'로써 기존에 흩어져 있는 state들을 한 곳에 모아 관리하여 예측 불가능한 버그를 최소화하고 효율적으로 state를 사용할 수 있도록 합니다. 또한 Redux는 React 외에도 Angular, Vue, jQuery 등 다양한 환경에서 사용할 수 있습니다. why-using-redux 에서의 상태관리…","html":"<h2>💡 Redux란?</h2>\n<p>Redux란 '상태 관리 라이브러리'로써 기존에 흩어져 있는 state들을 한 곳에 모아 관리하여 예측 불가능한 버그를 최소화하고 효율적으로 state를 사용할 수 있도록 합니다. 또한 Redux는 React 외에도 Angular, Vue, jQuery 등 다양한 환경에서 사용할 수 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/68415905/157664466-dffebac5-4ead-438f-895b-dd53e3b01b70.jpg\" alt=\"why-using-redux\"></p>\n<ul>\n<li><code class=\"language-text\">React</code>에서의 상태관리</li>\n</ul>\n<p>React에서의 상태는 <code class=\"language-text\">props</code>를 통해 각 컴포넌트로 전달됩니다. 특정 컴포넌트에서 state가 변화하면 <code class=\"language-text\">props</code>로 연결된 모든 컴포넌트가 함께 업데이트 됩니다.</p>\n<ul>\n<li><code class=\"language-text\">Redux</code>에서의 상태관리</li>\n</ul>\n<p>Redux에서의 상태는 컴포넌트끼리 공유하지 않고 <code class=\"language-text\">store</code>라는 파일을 거쳐 필요한 컴포넌트로 즉시 전달됩니다. <code class=\"language-text\">store</code>는 앱에서 사용되는 모든 state를 저장하고 관리하는 장소입니다.</p>\n<h2>📝 Redux의 3원칙</h2>\n<ul>\n<li>애플리케이션 상태는 모두 한 곳에서 집중 관리됩니다. (동기화 필요 ✘)</li>\n<li>상태는 불변(읽기 전용) 데이터 이며, 오직 액션 만이 상태 교체를 요청 할 수 있습니다. (예측 가능)</li>\n<li>리듀서(함수)를 통해 상태의 최종 값만 설정합니다. (단순화)</li>\n</ul>\n<h2>🔀 Redux 설치</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> redux react-redux</code></pre></div>\n<h2>🧐 Redux의 상태 생성하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">redux/\n├── actions/\n│   ├── index.js <span class=\"token comment\"># 액션 내보내기(export) 파일</span>\n│   ├── actionTypes.js <span class=\"token comment\"># 액션 타입 (액션 타입: 상수)</span>\n│   ├── auth.js\n│   └── counter.js\n├── reducers/\n│   ├── index.js <span class=\"token comment\"># 리듀서 엔트리 ([루트 리듀서:병합] 내보내기)</span>\n│   ├── auth.js\n│   └── counter.js\n└── store.js <span class=\"token comment\"># 스토어 엔트리 (스토어 생성 ← 루트 리듀서)</span></code></pre></div>\n<h3>1. action type 지정</h3>\n<h3>2. reducer 함수 추가</h3>\n<p>리듀서는 상태(state)와 액션(action)을 전달 받아 '현재 상태'를 '새로운 상태'로 교체 한 후 반환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> reducer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">INCREASE_COUNT</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">DECREASE_COUNT</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>3. store 만들기</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux\"</span>\n\n<span class=\"token comment\">// Redux 스토어 생성</span>\n<span class=\"token comment\">// - 리듀서 함수를 전달 받음</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>🧐 Redux의 상태 전달하기</h2>\n<h3>Provider</h3>\n<h3>useSelector</h3>\n<h3>useDispatch</h3>","frontmatter":{"title":"Redux - 상태 관리 라이브러리","date":"February 20, 2022","update":"February 20, 2022","tags":["react","redux"],"series":"Redux"},"fields":{"slug":"/redux-about/","readingTime":{"minutes":2.845}}},"seriesList":{"edges":[{"node":{"id":"5f1c22dc-fabf-56b6-834c-a8e8ffa1958a","fields":{"slug":"/redux-about/"},"frontmatter":{"title":"Redux - 상태 관리 라이브러리"}}}]},"previous":{"fields":{"slug":"/estimate-board/"},"frontmatter":{"title":"견적서 게시판 (필터링 기능)"}},"next":null},"pageContext":{"id":"5f1c22dc-fabf-56b6-834c-a8e8ffa1958a","series":"Redux","previousPostId":"dfcd6a38-8114-52e2-b98f-2e9d7a3d938a","nextPostId":null}},"staticQueryHashes":[]}