{"componentChunkName":"component---src-templates-post-jsx","path":"/estimate-board/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"bac24a78-7091-5c8b-8fce-54b7e747c094","excerpt":"☝ 프로젝트 시작하기 전 이번 프로젝트부터는 javascript가 아닌 typescript를 사용하기로 했다. 타입스크립트가 적용된 CRA를 내려받고 절대경로(ex ) 설정도 해두었다.  타입스크립트 절대경로 설정 (tsconfig.json) 📌 프로젝트 링크 Github\n배포링크 📑 견적서 게시판 제작 1. json-server로 REST-API 요청 …","html":"<h2>☝ 프로젝트 시작하기 전</h2>\n<p>이번 프로젝트부터는 javascript가 아닌 typescript를 사용하기로 했다. 타입스크립트가 적용된 CRA를 내려받고 절대경로(ex <code class=\"language-text\">components/Filter</code>) 설정도 해두었다.</p>\n<p><code class=\"language-text\">npx create-react-app [project-name] --template typescript</code></p>\n<ul>\n<li>타입스크립트 절대경로 설정 (<strong>tsconfig.json</strong>)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// etc..</span>\n    <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"src\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>📌 프로젝트 링크</h2>\n<p><a href=\"https://github.com/devjoylee/estimate-board\">Github</a>\n<a href=\"https://estimate-board-page.herokuapp.com/\">배포링크</a></p>\n<h2>📑 견적서 게시판 제작</h2>\n<h3>1. json-server로 REST-API 요청</h3>\n<p>json-server로 가상의 서버를 만들어 REST-API 요청을 보내고 서버에 저장된 데이터베이스로 부터 필요한 데이터를 가져올 수 있도록 만들었다.</p>\n<blockquote>\n<p>REST-API란? <br/>\nurl과 method를 사용해 HTTP 기반으로 클라이언트가 서버로 CRUD를 요청하는 것<br/>\n▪ Create : POST => 새로운 데이터 생성<br/>\n▪ Read : GET => 데이터 불러오기<br/>\n▪ Update : PUT => 데이터 수정<br/>\n▪ Delete : DELETE => 데이터 삭제<br/></p>\n</blockquote>\n<p>먼저 json-server를 설치하고 프로젝트 최상단에 <code class=\"language-text\">server</code> 폴더를 생성했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> json-server</code></pre></div>\n<p>그리고 server를 생성하는 명령어 파일(index.js)을 추가한 후 데이터가 저장된 db.json 파일을 만들었다. 저장한 데이터를 가져오기 위해서는 서버 url로 GET 요청을 보내야 한다. <br/>(요청 url - localhost:3001/requests)</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// db.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"requests\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"자동차 시제품 제작\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"client\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"A 고객사\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"due\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2020.12.14\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"count\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"amount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"method\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"밀링\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"선반\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"material\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"알루미늄\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"대기중\"</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">const</span> jsonServer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"json-server\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> jsonServer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> jsonServer<span class=\"token punctuation\">.</span><span class=\"token function\">router</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">\"/db.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> middlewares <span class=\"token operator\">=</span> jsonServer<span class=\"token punctuation\">.</span><span class=\"token function\">defaults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">\"/../build/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3001</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>middlewares<span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>jsonServer<span class=\"token punctuation\">.</span>bodyParser<span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">)</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JSON Server is running\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>server로 보내는 GET 요청은 fetch 함수를 사용한다. useEffect를 사용해서 렌더링 시 데이터를 요청하고 불러온 데이터는 state에 저장하도록 설계했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>apiData<span class=\"token punctuation\">,</span> setApiData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span>Estimate<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/requests\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setApiData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>GET 요청 성공 여부를 알고 싶다면 브라우저 네트워크 탭을 확인하면 된다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/68415905/156305269-37019cd0-fc20-4442-b98b-25cf1883295d.JPG\" alt=\"get\"></p>\n<h3>2. 필터링 기능 구현</h3>\n<p>이번 프로젝트에서 필요한 필터링 기능은 총 2가지 이다. 각 기능은 서로 다른 방식으로 구현을 해보기로 했다.</p>\n<ol>\n<li>select 박스 형태의 카테고리 선택에 따라 해당 카테고리 내역만 출력<br/>\n👉 <code class=\"language-text\">filter</code>와 <code class=\"language-text\">include()</code> method를 사용해서 구현</li>\n<li>토글 버튼 클릭 시, '상담 중' 라벨이 붙어있는 내역만 출력<br/>\n👉 className를 각각 부여하고 토글버튼 클릭 시 <code class=\"language-text\">display:block</code> or <code class=\"language-text\">none</code> 처리</li>\n</ol>\n<p><img src=\"https://user-images.githubusercontent.com/68415905/156330421-4364ff3e-a37e-41e3-b28f-bb22abd1466d.jpg\" alt=\"image\"></p>\n<h3>- 카테고리 필터링</h3>\n<p>먼저 카테고리 필터링은 util 함수를 따로 작성하였다. <code class=\"language-text\">filterData</code>라는 이 함수는 서버에서 받아온 API 데이터와 category에서 선택된 옵션을 비교하여 선택된 옵션과 모두 일치하는 item만 데이터에서 필터링시켜 출력하도록 구현했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// filterData.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Estimate<span class=\"token punctuation\">,</span> Category <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"types\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">filterData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">apiData</span><span class=\"token operator\">:</span> Estimate<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">categories</span><span class=\"token operator\">:</span> Category</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> filtered <span class=\"token operator\">=</span> apiData<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">item</span><span class=\"token operator\">:</span> Estimate</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// '재료' 카테고리에서 선택된 옵션과 모두 일치하면 true</span>\n    <span class=\"token keyword\">const</span> materials <span class=\"token operator\">=</span> categories<span class=\"token punctuation\">.</span>material<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">option</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      item<span class=\"token punctuation\">.</span>material<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// '가공방식' 카테고리에서 선택된 옵션과 모두 일치하면 true</span>\n    <span class=\"token keyword\">const</span> methods <span class=\"token operator\">=</span> categories<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">option</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      item<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 두 조건에 모두 부합하는 item만 필터링하여 출력</span>\n    <span class=\"token keyword\">return</span> materials <span class=\"token operator\">&amp;&amp;</span> methods\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> filtered\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이때, 선택된 카테고리는 <code class=\"language-text\">categories</code>라는 state를 만들어 관리했다. 받아온 api데이터와 categories 목록을 <code class=\"language-text\">filterData</code> 함수의 인자로 넘겨주면 필터링된 새로운 데이터를 반환한다.\n필터링 데이터는 컴포넌트로 넘겨주어 <code class=\"language-text\">map</code>으로 각 아이템을 출력하게 했다.</p>\n<p>useMemo를 사용하기 전 데이터를 state에 저장할지 useMemo로 메모리에 저장해둘지 고민을 많이 했는데 어떤 방식이 더 좋은지는 아직 잘 모르겠다. state에 저장을 하면 렌더링마다 같은 필터링이 반복되고, useMemo에 저장을 하면 추가적으로 메모리를 소비하는데 어떤게 더 좋은 선택일지는 차차 고민해보도록 해야겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// mainPage.ts</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>categories<span class=\"token punctuation\">,</span> setCategories<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">material</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> filteredList <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">filterData</span><span class=\"token punctuation\">(</span>apiData<span class=\"token punctuation\">,</span> categories<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>apiData<span class=\"token punctuation\">,</span> categories<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// 카테고리 컴포넌트 (옵션 선택 시 state 업데이트)</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FilterList</span></span> <span class=\"token attr-name\">categories</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>categories<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">setCategories</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>setCategories<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token comment\">// map으로 list를 순회하며 각 아이템을 출력하는 컴포넌트</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">EstimateList</span></span> <span class=\"token attr-name\">list</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>filteredList<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">isChecked</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isChecked<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>- 토글 필터링</h3>\n<p>토글 필터링은 조금 간단한 방식을 사용했다. 먼저 <code class=\"language-text\">isChecked</code>라는 state를 만들어 토글이 on/off 되었을 때를 관리하도록 했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isChecked<span class=\"token punctuation\">,</span> setIsChecked<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setIsChecked</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isChecked<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// ..</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Toggle</span></span> <span class=\"token attr-name\">isChecked</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isChecked<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">handleClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>그리고 데이터 정보에 따라 status가 상담중이면 <code class=\"language-text\">active</code>, 대기중이면 <code class=\"language-text\">pending</code> 이라는 클래스명을 부여하고 토글이 켜진 경우(<code class=\"language-text\">isChecked</code>가 참인 경우) 상담중(<code class=\"language-text\">active</code>) 아이템만 display:block 시키고 나머지는 모두 display:none 하도록 설계했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// EstimateItem.tsx</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">StyleProps</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">isChecked</span><span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">EstimateItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> isChecked <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> EstimateItemProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">EstimateItemContainer</span></span>\n      <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>status <span class=\"token operator\">===</span> <span class=\"token string\">'상담중'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'active'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">isChecked</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isChecked<span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    // ...\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">EstimateItemContainer</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> EstimateItemContainer <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>li<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StyleProps</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">`\n  &amp;.pending {\n    display: ${({ isChecked }) => (isChecked ? 'none' : 'block')};\n  }\n`;</span></code></pre></div>\n<br/>\n<ul>\n<li>🔎 필터링 구현 영상</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/68415905/156321675-9bc7f32d-0c7e-4cde-b0da-bb9daa8a132a.gif\" alt=\"gif\"></p>\n<h2>♻ 프로젝트 리팩토링</h2>\n<h3>필터 기능 수정</h3>\n<p>사실 이번 프로젝트에서 내가 맡은 부분은 필터 기능 구현이 아닌 UI 컴포넌트 설계과 토글 기능 구현 담당이었다. 그래서 필터링 부분에 대해서는 프로젝트가 끝난 후 다른 팀원이 작성한 필터링 코드를 보며 개선할 부분을 생각해보고 추가적으로 학습하였다.</p>\n<ul>\n<li>리팩토링 전</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Estimate <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"types/card\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Category <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"types/category\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getFilter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">apiData</span><span class=\"token operator\">:</span> Estimate<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">categories</span><span class=\"token operator\">:</span> Category</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newData <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> apiData<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> methodFiltered <span class=\"token operator\">=</span> apiData<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      categories<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> materialFiltered <span class=\"token operator\">=</span> apiData<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>material<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      categories<span class=\"token punctuation\">.</span>material<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      methodFiltered<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> categories<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span>\n      materialFiltered<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> categories<span class=\"token punctuation\">.</span>material<span class=\"token punctuation\">.</span>length\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      newData<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>apiData<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> newData\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드에서 리팩토링한 항목은 아래와 같다.</p>\n<ol>\n<li>\n<p>type이 불필요하게 2군데로 나누어져 있음\n👉 type 파일 1개로 합치기</p>\n</li>\n<li>\n<p>filter method도 배열을 반환하는데 별도로 배열 변수를 추가해서 push함</p>\n<p>👉 추가로 할당된 배열을 없애고 filter된 배열 자체를 return하도록 수정</p>\n</li>\n<li>\n<p>for loop내부에서 filter를 써서 시간복잡도 발생</p>\n<p>👉 2번에서 배열을 삭제함으로써 for loop 필요 없어짐</p>\n</li>\n<li>\n<p>함수명을 getFilter에서 filterData 변경 (좀 더 명시적으로)</p>\n</li>\n</ol>\n<br/>\n<ul>\n<li>리팩토링 후</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Estimate<span class=\"token punctuation\">,</span> Category <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"types\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">filterData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">apiData</span><span class=\"token operator\">:</span> Estimate<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">categories</span><span class=\"token operator\">:</span> Category</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> filtered <span class=\"token operator\">=</span> apiData<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">item</span><span class=\"token operator\">:</span> Estimate</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// '재료' 카테고리에서 선택된 옵션과 모두 일치하면 true</span>\n    <span class=\"token keyword\">const</span> materials <span class=\"token operator\">=</span> categories<span class=\"token punctuation\">.</span>material<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">option</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      item<span class=\"token punctuation\">.</span>material<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// '가공방식' 카테고리에서 선택된 옵션과 모두 일치하면 true</span>\n    <span class=\"token keyword\">const</span> methods <span class=\"token operator\">=</span> categories<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">option</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      item<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 두 조건에 모두 부합하는 item만 필터링하여 출력</span>\n    <span class=\"token keyword\">return</span> materials <span class=\"token operator\">&amp;&amp;</span> methods\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> filtered\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>옵션명 유틸 함수 추가</h3>\n<p>아이템별로 <code class=\"language-text\">[밀링], [밀링,선반], [선반]...</code> 과 같이 옵션이 다 달랐는데 데이터가 가진 옵션을 분석하여 동적으로 카테고리 옵션을 만들어주었다.</p>\n<ol>\n<li>\n<p><code class=\"language-text\">.flat()</code> method로 데이터가 가진 옵션명 모두 합치기</p>\n<p>ex) <code class=\"language-text\">[밀링], [밀링,선반], [선반]</code> ➡ <code class=\"language-text\">[밀링, 밀링, 선반, 선반]</code></p>\n</li>\n<li>\n<p><code class=\"language-text\">Set</code>을 사용하여 중복 제거</p>\n<p>ex) <code class=\"language-text\">[밀링, 밀링, 선반, 선반]</code> ➡ <code class=\"language-text\">[밀링, 선반]</code></p>\n</li>\n</ol>\n<p>하지만 기존에는 두가지 옵션(material,method)을 각각 따로 <code class=\"language-text\">flat</code>처리하고 다른 state로 관리해서 코드의 가독성이 떨어졌다. 그래서 <code class=\"language-text\">getOptionList</code>라는 유틸함수를 만들어 코드의 가독성을 높이고 state도 1개로 통일시켜 재사용성을 높였다.</p>\n<br/>\n<ul>\n<li>리팩토링 전</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> methodArr <span class=\"token operator\">=</span> apiData<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> data<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> materialArr <span class=\"token operator\">=</span> apiData<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> data<span class=\"token punctuation\">.</span>material<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> methodSet <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>methodArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> materialSet <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>materialArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>selectMethod<span class=\"token punctuation\">,</span> setSelectMethod<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>selectMaterial<span class=\"token punctuation\">,</span> setSelectMaterial<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isMethodOpen<span class=\"token punctuation\">,</span> setIsMethodOpen<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isMaterialOpen<span class=\"token punctuation\">,</span> setIsMaterialOpen<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>리팩토링 후</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> optionName <span class=\"token operator\">=</span> name <span class=\"token operator\">===</span> <span class=\"token string\">'가공방식'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'method'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'material'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> optionList <span class=\"token operator\">=</span> <span class=\"token function\">getOptionList</span><span class=\"token punctuation\">(</span>apiData<span class=\"token punctuation\">,</span> optionName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>select<span class=\"token punctuation\">,</span> setSelect<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOpen<span class=\"token punctuation\">,</span> setIsOpen<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// getOptionList.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Estimate <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"types\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> getOptionList <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token literal-property property\">apiData</span><span class=\"token operator\">:</span> Estimate<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">option</span><span class=\"token operator\">:</span> <span class=\"token string\">\"method\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"material\"</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> apiData<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> data<span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"견적서 게시판 (필터링 기능)","date":"February 10, 2022","update":"February 10, 2022","tags":["wanted","typescript","react","heroku"],"series":"Project Memoirs"},"fields":{"slug":"/estimate-board/","readingTime":{"minutes":11.18}}},"seriesList":{"edges":[{"node":{"id":"e3c75b5c-25f3-5746-996b-47ff2c881adc","fields":{"slug":"/currency-converter/"},"frontmatter":{"title":"환율 계산기(Currency Converter) 만들기"}}},{"node":{"id":"8a06f560-b7a9-56ed-88c3-45819c7ea1bc","fields":{"slug":"/admin-registry/"},"frontmatter":{"title":"어드민 페이지 (이미지 첨부 기능 / useForm)"}}},{"node":{"id":"bac24a78-7091-5c8b-8fce-54b7e747c094","fields":{"slug":"/estimate-board/"},"frontmatter":{"title":"견적서 게시판 (필터링 기능)"}}},{"node":{"id":"3912a174-9712-5ab9-a0c0-af782a79bf52","fields":{"slug":"/cyworld-clone/"},"frontmatter":{"title":"싸이월드 클론 built in NextJS"}}}]},"previous":{"fields":{"slug":"/admin-registry/"},"frontmatter":{"title":"어드민 페이지 (이미지 첨부 기능 / useForm)"}},"next":{"fields":{"slug":"/about-redux/"},"frontmatter":{"title":"Redux - 상태 관리 라이브러리"}}},"pageContext":{"id":"bac24a78-7091-5c8b-8fce-54b7e747c094","series":"Project Memoirs","previousPostId":"8a06f560-b7a9-56ed-88c3-45819c7ea1bc","nextPostId":"2f7befc6-38f2-5385-8798-25093b830c98"}},"staticQueryHashes":[],"slicesMap":{}}