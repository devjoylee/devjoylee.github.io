{"componentChunkName":"component---src-templates-post-jsx","path":"/hook-useEffect/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"8e39a8b0-7f45-5753-b6fd-012e5c243111","excerpt":"✨ useEffect 정의 첫 렌더링 할 때(mount), 다시 렌더링될 때(update), 화면에서 사라질 때(unmount), 특정한 작업을 수행하고 싶은 경우 사용하는 Hook입니다.  를 사용 할 때에는 첫번째 인자에는 함수, 두번째 인자로는 의존값이 들어있는 배열 Dependency Array(deps)를 넣습니다. 렌더링될 때마다 실행 - De…","html":"<h2>✨ useEffect 정의</h2>\n<p>첫 렌더링 할 때(<strong>mount</strong>), 다시 렌더링될 때(<strong>update</strong>), 화면에서 사라질 때(<strong>unmount</strong>), 특정한 작업을 수행하고 싶은 경우 사용하는 Hook입니다. <code class=\"language-text\">useEffect</code> 를 사용 할 때에는 첫번째 인자에는 함수, 두번째 인자로는 의존값이 들어있는 배열 Dependency Array(deps)를 넣습니다.</p>\n<ul>\n<li>렌더링될 때마다 실행 - Dependency array ❌</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// code...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>첫 렌더링될 때(mount)만 실행 - Dependency array 빈 배열</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// code ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>첫 렌더링 될때 + 특정 <code class=\"language-text\">state</code><strong>가 바뀔 때</strong> 실행 - Dependency array에 <code class=\"language-text\">state</code> 전달</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// code ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>컴포넌트 unmount 시 실행 - <code class=\"language-text\">return</code> 추가</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// code ...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// clean up!!</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>🤔 useEffect 언제 사용할까?</h2>\n<h3>마운트할 때 필요한 작업</h3>\n<ul>\n<li>props 로 받은 값을 컴포넌트의 로컬 상태로 설정</li>\n<li>외부 API 요청 (REST API 등)</li>\n<li>라이브러리 사용 (D3, Video.js 등...)</li>\n<li>setInterval 을 통한 반복작업 혹은 setTimeout 을 통한 작업 예약</li>\n</ul>\n<h3>언마운트할 때 필요한 작업</h3>\n<ul>\n<li>setInterval, setTimeout 을 사용하여 등록한 작업들 clear 하기<br/>\n(clearInterval, clearTimeout)</li>\n<li>라이브러리 인스턴스 제거</li>\n</ul>\n<h2>🔎 useEffect 제대로 사용하기</h2>\n<h3>Dependency Array</h3>\n<p>해당 컴포넌트에 state가 여러개 있는 경우, state가 호출될 때 다른 state값도 다같이 렌더링 됩니다. 이때 useEffect를 사용해 dependency array에 호출하고자 하는 state값을 전달해주면 다른 불필요한 state 렌더링을 막을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// count만 렌더링!  name은 사용 x</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count 렌더링\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// name만 렌더링! count은 사용 x</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name 렌더링\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>return</h3>\n<p><code class=\"language-text\">useEffect</code> 에서는 함수를 return 할 수 있는데 이때 반환되는 함수를 <strong>cleanup 함수</strong>라고 부릅니다. cleanup 함수는 useEffect 에 대한 뒷정리를 해준다고 이해하시면 되는데요, deps 가 비어있는 경우에는 컴포넌트가 사라질 때 cleanup 함수가 호출됩니다.</p>\n<p><strong><em>timer.js</em></strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>useEffect<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Timer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 컴포넌트가 mount 될 때 실행</span>\n\t\t<span class=\"token keyword\">const</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'타이머 실행 중....'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// 컴포넌트가 unmount 될 때 실행</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'타이머 종료!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">타이머를 시작합니다.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Timer<span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong><em>App.js</em></strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> Timer <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Timer\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showTimer<span class=\"token punctuation\">,</span> setShowTimer<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>showTimer <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Timer</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setShowTimer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>showTimer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Toggle</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<br />\n<blockquote>\n<p>REFERENCE<br />Velopert React <a href=\"https://react.vlpt.us/basic/16-useEffect.html\">https://react.vlpt.us/basic/16-useEffect.html</a><br/>Youtube 별코딩 <a href=\"https://youtu.be/kyodvzc5GHU\">https://youtu.be/kyodvzc5GHU</a></p>\n</blockquote>","frontmatter":{"title":"[React] React Hook - useEffect","date":"December 26, 2021","update":"December 26, 2021","tags":["frontend","react"],"series":"React.js"},"fields":{"slug":"/hook-useEffect/","readingTime":{"minutes":3.355}}},"seriesList":{"edges":[{"node":{"id":"1e50df90-b3b9-504b-8613-ccdf5181962f","fields":{"slug":"/about-react/"},"frontmatter":{"title":"[React] 리액트의 개념과 특징"}}},{"node":{"id":"35600afe-d499-5a86-8eab-9329b8e53ab3","fields":{"slug":"/react-scratch/"},"frontmatter":{"title":"[React] 리액트 시작하기 (without CRA)"}}},{"node":{"id":"9b76066d-39fd-5a28-9ff2-8e51ea90eb7e","fields":{"slug":"/about-react-hook/"},"frontmatter":{"title":"[React] React Hook이란?"}}},{"node":{"id":"2353d28f-8c44-539c-a512-367dd4cdb422","fields":{"slug":"/hook-useState/"},"frontmatter":{"title":"[React] React Hook - useState"}}},{"node":{"id":"8e39a8b0-7f45-5753-b6fd-012e5c243111","fields":{"slug":"/hook-useEffect/"},"frontmatter":{"title":"[React] React Hook - useEffect"}}},{"node":{"id":"b4e36309-1b87-57c2-ac37-f1a54a201fc3","fields":{"slug":"/hook-useRef/"},"frontmatter":{"title":"[React] React Hook - useRef"}}},{"node":{"id":"8a57df85-c11b-5120-b9b6-2d2178e34b1d","fields":{"slug":"/hook-useContext/"},"frontmatter":{"title":"[React] React Hook - useContext"}}},{"node":{"id":"8a3e0bb7-5eab-5f75-8eea-0268ea30b246","fields":{"slug":"/hook-useMemo/"},"frontmatter":{"title":"[React] React Hook - useMemo"}}},{"node":{"id":"26c13515-8b84-5da2-a03d-9936e93fe808","fields":{"slug":"/hook-useCallback/"},"frontmatter":{"title":"[React] React Hook - useCallback"}}},{"node":{"id":"7e63a168-09a6-5966-afbc-66703ed7bbe7","fields":{"slug":"/hook-useReducer/"},"frontmatter":{"title":"[React] React Hook - useReducer"}}}]},"previous":{"fields":{"slug":"/hook-useState/"},"frontmatter":{"title":"[React] React Hook - useState"}},"next":{"fields":{"slug":"/hook-useRef/"},"frontmatter":{"title":"[React] React Hook - useRef"}}},"pageContext":{"id":"8e39a8b0-7f45-5753-b6fd-012e5c243111","series":"React.js","previousPostId":"2353d28f-8c44-539c-a512-367dd4cdb422","nextPostId":"b4e36309-1b87-57c2-ac37-f1a54a201fc3"}},"staticQueryHashes":[]}