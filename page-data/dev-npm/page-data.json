{"componentChunkName":"component---src-templates-post-jsx","path":"/dev-npm/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"91a86175-fa37-572f-9736-26eaa725ea6f","excerpt":"✔ npm npm : Node Package Manager(Modules) npm은 NodeJS를 설치하면 함께 설치되는 패키지 관리도구입니다. 이 패키지는 모듈이라고도 불리며 npm을 통해 서비스 개발에 필요한 webpack, CRA, react 등의 다양한 모듈 라이브러리를 설치할 수 있습니다. ex)   명령어를 사용해 초기  파일을 만들고 프로젝트…","html":"<h2>✔ npm</h2>\n<blockquote>\n<p>npm : Node Package Manager(Modules)</p>\n</blockquote>\n<p>npm은 NodeJS를 설치하면 함께 설치되는 패키지 관리도구입니다. 이 패키지는 모듈이라고도 불리며 npm을 통해 서비스 개발에 필요한 webpack, CRA, react 등의 다양한 모듈 라이브러리를 설치할 수 있습니다.</p>\n<p>ex) <code class=\"language-text\">npm install webpack</code></p>\n<p><code class=\"language-text\">npm init</code> 명령어를 사용해 초기 <code class=\"language-text\">package.json</code> 파일을 만들고 프로젝트를 초기화합니다. npm을 통해 다운된 패키지는 <code class=\"language-text\">package.json</code>에 기록됩니다.\n<br /></p>\n<h3>npm의 단점</h3>\n<ul>\n<li>로컬 컴퓨터에 직접 설치되어 용량 차지가 크다</li>\n<li>다운받은 패키지의 새 버전이 나온 경우, 업데이트를 직접 해주어야한다.</li>\n</ul>\n<hr>\n<h2>✔ npx</h2>\n<blockquote>\n<p>npx : Node Package Runner</p>\n</blockquote>\n<p>npx는 npm 5.2.0 버전부터 새로 도입된 패키지 관리 도구입니다. npm 5.2.0 버전 이상을 다운받았다면 자동으로 설치되며 이는 npm을 좀더 편리하게 사용할 수 있도록 도와줍니다.</p>\n<p>ex) <code class=\"language-text\">npx install webpack</code>\n<br /></p>\n<h3>npx의 장점</h3>\n<ul>\n<li>패키지를 컴퓨터에 직접 저장하지 않고 일회성으로 패키지를 사용해 용량차지를 하지 않는다.</li>\n<li>매번 최신 업데이트된 패키지를 사용할 수 있다.\n<br /></li>\n</ul>\n<h3>npx 동작방법</h3>\n<ol>\n<li>기본적으로, 실행할 패키지가 실행 가능한 경로에 있는지 확인한다. (예를 들면, 프로젝트내에서 다운된 패키지가 있는지 확인)</li>\n<li>만약에 있다면, 그것을 실행한다.</li>\n<li>아니라면 패키지가 설치가 되지 않았다는 것으로 판단하여, npx가 가장 최신 버전의 패키지를 설치하고 실행한다.</li>\n</ol>\n<hr>\n<h2>✔ yarn</h2>\n<p>yarn은 npm과 같은 패키지 매니저입니다. 차이점이 있다면 Node.js 설치시에 함께 설치되지 않고 별도의 명령어를 사용해 설치합니다. yarn을 사용하면 <code class=\"language-text\">yarn.lock</code> 이라는 파일에 다운한 패키지가 기록되며 이 파일은 모든 디바이스에 같은 패키지를 설치하는 것을 보장합니다.</p>\n<p>yarn 설치 : <code class=\"language-text\">npm install -g yarn</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># npm 사용법</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token operator\">&lt;</span>package<span class=\"token operator\">></span>\n<span class=\"token function\">npm</span> uninstall <span class=\"token operator\">&lt;</span>package<span class=\"token operator\">></span>\n\n<span class=\"token comment\"># yarn 사용법</span>\n<span class=\"token function\">yarn</span> <span class=\"token function\">add</span> <span class=\"token operator\">&lt;</span>package<span class=\"token operator\">></span>\n<span class=\"token function\">yarn</span> remove <span class=\"token operator\">&lt;</span>package<span class=\"token operator\">></span></code></pre></div>\n<h3>yarn의 장점</h3>\n<ul>\n<li>속도나 안전성은 npm과 비슷하나 npm보다 보안이 뛰어나고 의존성 관리를 강조한다.</li>\n<li>버전을 어디에서나 같게 만들어 버전 충돌에 의한 버그가 적다.</li>\n</ul>\n<h3>yarn의 단점</h3>\n<ul>\n<li>npm에 비해 레퍼런스가 적고 덜 보편적이다.</li>\n</ul>","frontmatter":{"title":"프론트엔드 개발환경 #1 - npm / npx / yarn","date":"November 17, 2021","update":"November 17, 2021","tags":["frontend","development"],"series":"프론트엔드 개발환경의 이해"},"fields":{"slug":"/dev-npm/","readingTime":{"minutes":3.35}}},"seriesList":{"edges":[{"node":{"id":"91a86175-fa37-572f-9736-26eaa725ea6f","fields":{"slug":"/dev-npm/"},"frontmatter":{"title":"프론트엔드 개발환경 #1 - npm / npx / yarn"}}},{"node":{"id":"f16e018c-7893-552a-b115-6702c663a1ea","fields":{"slug":"/dev-module/"},"frontmatter":{"title":"프론트엔드 개발환경 #2 - 모듈 (Module)"}}},{"node":{"id":"837a658d-8c3a-50ce-b1e6-9ebf818f91c2","fields":{"slug":"/dev-webpack-1/"},"frontmatter":{"title":"프론트엔드 개발환경 #3 - webpack이란?"}}}]},"previous":null,"next":{"fields":{"slug":"/dev-module/"},"frontmatter":{"title":"프론트엔드 개발환경 #2 - 모듈 (Module)"}}},"pageContext":{"id":"91a86175-fa37-572f-9736-26eaa725ea6f","series":"프론트엔드 개발환경의 이해","previousPostId":null,"nextPostId":"f16e018c-7893-552a-b115-6702c663a1ea"}},"staticQueryHashes":[]}