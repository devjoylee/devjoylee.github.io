{"componentChunkName":"component---src-templates-post-jsx","path":"/redux-thunk/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"af2f06de-cdf5-52d1-9b25-1776aadf9668","excerpt":"💡 redux-thunk란? redux-thunk는 redux 에서 비동기 작업이 필요할 때 사용하는 미들웨어(middleware)입니다. 이 미들웨어를 사용하면 액션 객체가 아닌 함수를 디스패치 할 수 있습니다. 여기서 thunk란 특정 작업을 나중에 하도록 미루기 위해 함수로 감싼 것을 말합니다. 📝 redux-thunk 예시 기본 Redux : '액…","html":"<h2>💡 redux-thunk란?</h2>\n<p>redux-thunk는 redux 에서 <strong>비동기 작업</strong>이 필요할 때 사용하는 미들웨어(middleware)입니다. 이 미들웨어를 사용하면 액션 객체가 아닌 함수를 디스패치 할 수 있습니다. 여기서 thunk란 특정 작업을 나중에 하도록 미루기 위해 <strong>함수</strong>로 감싼 것을 말합니다.</p>\n<h2>📝 redux-thunk 예시</h2>\n<h3>기본 Redux : '액션 객체' 생성</h3>\n<p>일반 액션 생성자는 아래와 같이 파라미터를 가지고 액션 객체를 리턴하는 작업만 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getUser</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">id</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">GET_USER</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Redux-thunk : '액션 함수' 생성</h3>\n<p>Redux-thunk는 <code class=\"language-text\">dispatch</code>, <code class=\"language-text\">getState</code> 를 파라미터로 가지는 thunk 함수를 리턴합니다. 이 때 함수 안에서 액션을 dispatch 할 수도 있고 getState를 사용하여 현재 상태도 조회 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getComments</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatch<span class=\"token punctuation\">,</span> getState</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">.</span>userId <span class=\"token comment\">// 현재 상태 조회</span>\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"GET_COMMENTS_REQUEST\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 요청이 시작했음을 알리는 액션</span>\n\n  api\n    <span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 요청을 하고</span>\n    <span class=\"token comment\">// 성공시</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">comments</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"GET_COMMENTS_SUCCESS\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> comments <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 실패시</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"GET_COMMENTS_ERROR\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> e <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드를 try~catch 문과 async/await를 사용해 아래처럼 바꿀 수도 있습니다. 이런식으로 thunk 함수를 사용하면 비동기로 api 데이터 사용이 가능해집니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getComments</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatch<span class=\"token punctuation\">,</span> getState</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">.</span>activeId\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"GET_COMMENTS\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> comments <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">getComments</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"GET_COMMENTS_SUCCESS\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> comments <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"GET_COMMENTS_ERROR\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> e <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>➕ redux-thunk 적용하기</h2>\n<h3>applyMiddleware()</h3>\n<p>먼저 npm으로 redux-thunk 를 설치하고 <code class=\"language-text\">store.js</code> 파일에서 설치한 패키지를 불러옵니다. 불러온 <code class=\"language-text\">thunk</code>는 store에 2번째 파라미터에 <code class=\"language-text\">applyMiddleware()</code>로 감싸준 후 전달합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i redux-thunk</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// store.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore<span class=\"token punctuation\">,</span> applyMiddleware<span class=\"token punctuation\">,</span> combineReducers <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux\"</span>\n<span class=\"token keyword\">import</span> thunk <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux-thunk\"</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>\n  rootReducer<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>thunk<span class=\"token punctuation\">)</span> <span class=\"token comment\">// redux-thunk 추가</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>composeWithDevTools()</h3>\n<p>크롬 관리자 도구에서 state는 물론 thunk를 사용한 비동기 처리를 한눈에 확인 할 수 있도록 하는 라이브러리입니다.</p>\n<ol>\n<li>크롬 확장프로그램에서 Redux DevTools를 설치합니다.</li>\n</ol>\n<p><img src=\"https://user-images.githubusercontent.com/68415905/164023530-d5a9a68d-785e-4e82-a7e6-fd819be755b5.JPG\" alt=\"tool\"></p>\n<ol start=\"2\">\n<li>npm을 통해 <code class=\"language-text\">redux-devtools-extension</code>을 설치합니다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i redux-devtools-extension -D</code></pre></div>\n<ol start=\"3\">\n<li>설치한 패키지에서 <code class=\"language-text\">composeWithDevTools</code>를 가져와 <code class=\"language-text\">thunk</code>를 한번 더 감싸줍니다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// store.js</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> composeWithDevTools <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux-devtools-extension\"</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>\n  rootReducer<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">composeWithDevTools</span><span class=\"token punctuation\">(</span><span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>thunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// redux-thunk 추가</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<ol start=\"4\">\n<li>크롬 관리자 > Redux 탭으로 이동하여 비동기 작업 목록과(왼쪽), state를(오른쪽) 확인할 수 있습니다.</li>\n</ol>\n<p><img src=\"https://user-images.githubusercontent.com/68415905/164022332-1bc68f8e-7696-464b-a399-d55baa79907b.JPG\" alt=\"devtool\"></p>\n<br />\n<br />\n<blockquote>\n<p>REFERENCE<br />Redux - redux-thunk란? <a href=\"https://jw910911.tistory.com/48\">https://jw910911.tistory.com/48</a><br/>벨로퍼트 Redux-thunk <a href=\"https://react.vlpt.us/redux-middleware\">https://react.vlpt.us/redux-middleware</a></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```\n\n```</code></pre></div>","frontmatter":{"title":"Redux-thunk로 비동기 작업하기","date":"February 28, 2022","update":"February 28, 2022","tags":["react","redux"],"series":"Redux"},"fields":{"slug":"/redux-thunk/","readingTime":{"minutes":3.37}}},"seriesList":{"edges":[{"node":{"id":"7f3b57a2-c4d2-5d38-a4ae-ec37a05d87ec","fields":{"slug":"/about-redux/"},"frontmatter":{"title":"Redux - 상태 관리 라이브러리"}}},{"node":{"id":"af2f06de-cdf5-52d1-9b25-1776aadf9668","fields":{"slug":"/redux-thunk/"},"frontmatter":{"title":"Redux-thunk로 비동기 작업하기"}}}]},"previous":{"fields":{"slug":"/about-redux/"},"frontmatter":{"title":"Redux - 상태 관리 라이브러리"}},"next":{"fields":{"slug":"/about-auth/"},"frontmatter":{"title":"OAuth 2.0 의 개념 및 플로우"}}},"pageContext":{"id":"af2f06de-cdf5-52d1-9b25-1776aadf9668","series":"Redux","previousPostId":"7f3b57a2-c4d2-5d38-a4ae-ec37a05d87ec","nextPostId":"1663b8b8-d0e3-563d-96e0-afb3b94be625"}},"staticQueryHashes":[]}