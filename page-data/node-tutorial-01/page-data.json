{"componentChunkName":"component---src-templates-post-jsx","path":"/node-tutorial-01/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"662699d0-e42b-5967-b493-8acab2cadb42","excerpt":"🔎 Node란? Nodejs : Chrome V8 Javascript 엔진으로 빌드된 Javascript 런타임 공식문서에서의 노드는 Javascript 런타임이라고 표현되어 있습니다. 하지만 대부분은 Node를 서버 실행을 위해 사용합니다. 여기서 '서버'와 '런타임'은 무엇이고 어떤 차이가 있을까요? 서버로서의 노드 네트워크는 요청과 응답을 주고받으며…","html":"<h2>🔎 Node란?</h2>\n<blockquote>\n<p>Nodejs : Chrome V8 Javascript 엔진으로 빌드된 Javascript 런타임</p>\n</blockquote>\n<p><a href=\"https://nodejs.org/ko/\">공식문서에서의 노드</a>는 Javascript 런타임이라고 표현되어 있습니다. 하지만 대부분은 Node를 서버 실행을 위해 사용합니다. 여기서 '서버'와 '런타임'은 무엇이고 어떤 차이가 있을까요?</p>\n<h3>서버로서의 노드</h3>\n<p>네트워크는 요청과 응답을 주고받으며 끊임없이 통신합니다. 이때, 요청을 보내는 주체를 클라이언트, 요청에 응답하는 주체를 서버라고 합니다. 다시말해 서버란 네트워크 상에서 클라이언트에게 요청에 대한 정보 및 서비스를 제공하는 프로그램을 뜻합니다.<br>\n예) Client : 주소창에 홈페이지 URL을 입력 (요청) ➡ Server : 해당 URL에 대한 정보를 브라우저에 출력 (응답)</p>\n<img src='https://user-images.githubusercontent.com/68415905/183243977-9994702a-5372-4a94-bbf0-5498bab69847.JPG' width='500'>\n<p>그리고 Node의 가장 큰 특징 중 하나가 Node에서 서버를 만들 수 있는 모듈(ex http)을 제공한 다는 것입니다. Node 자체는 서버가 아니지만 Node가 제공하는 서버 구성 모듈을 사용해서 Javascript로 작성된 서버를 만들고 실행할 수 있습니다.</p>\n<img src='https://user-images.githubusercontent.com/68415905/183244730-41d34478-3464-45b7-92e5-aedc28233c88.JPG' width='750'>\n<h3>런타임으로서의 노드</h3>\n<ul>\n<li>대표적인 Javascript 런타임 : <strong>웹 브라우저(크롬, 사파리 등)</strong></li>\n</ul>\n<p>런타임은 프로그래밍 언어가 실행되는 환경을 뜻합니다. 그렇다면 Javascript 런타임이란 Javascript를 실행하는 환경을 뜻합니다.\nNode.js 가 나오기 전에는 Javascript를 인터넷 브라우저에서만 실행할 수 있었습니다. 하지만 node.js라는 새로운 Javascript 런타임의 등장으로 브라우저 외부에서도 Javascript를 실행할 수 있게 되었습니다. (ex 웹 프레임 워크 : Angular, React, Vue 등..)</p>\n<br />\n<blockquote>\n<p>REFERENCE <br /> Node.js 교과서 개정 2판 <a href=\"https://thebook.io/080229/ch01/01/\">https://thebook.io/080229/ch01/01/</a></p>\n</blockquote>","frontmatter":{"title":"[Node] 서버와 런타임 개념 이해하기","date":"July 27, 2022","update":"July 27, 2022","tags":["nodejs"],"series":"NodeJS"},"fields":{"slug":"/node-tutorial-01/","readingTime":{"minutes":2.52}}},"seriesList":{"edges":[{"node":{"id":"662699d0-e42b-5967-b493-8acab2cadb42","fields":{"slug":"/node-tutorial-01/"},"frontmatter":{"title":"[Node] 서버와 런타임 개념 이해하기"}}},{"node":{"id":"d22fb669-d509-5c00-8cac-11d979961eee","fields":{"slug":"/node-tutorial-02/"},"frontmatter":{"title":"[Node] 호출스택과 이벤트 루프"}}},{"node":{"id":"ccd69aeb-3108-59a3-8e20-44963e6076ef","fields":{"slug":"/node-tutorial-03/"},"frontmatter":{"title":"[Node] 노드의 주요 특성 Non Blocking / Single Thread"}}},{"node":{"id":"00edc97c-e36c-55a1-9d91-6fc009e4cbff","fields":{"slug":"/node-tutorial-04/"},"frontmatter":{"title":"[Node] Server Authentication (Session vs JWT)"}}}]},"previous":{"fields":{"slug":"/sockjs/"},"frontmatter":{"title":"Stomp.JS 로 채팅방 구현하기"}},"next":{"fields":{"slug":"/node-tutorial-02/"},"frontmatter":{"title":"[Node] 호출스택과 이벤트 루프"}}},"pageContext":{"id":"662699d0-e42b-5967-b493-8acab2cadb42","series":"NodeJS","previousPostId":"f75cbc53-5926-5102-a0aa-c58b4f4a4f22","nextPostId":"d22fb669-d509-5c00-8cac-11d979961eee"}},"staticQueryHashes":[],"slicesMap":{}}