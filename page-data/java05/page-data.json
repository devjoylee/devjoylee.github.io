{"componentChunkName":"component---src-templates-post-jsx","path":"/java05/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"c11cfae8-d567-5f7c-9aaa-f7db3054d355","excerpt":"1. 프로세스와 스레드 개념 프로세스란? 컴퓨터에서 실행 중인 프로그램을 말하며 실행 중인 프로그램에 대해 독립적으로 메모리와 자원을 할당한다. 각 프로세스는 독립된 메모리 영역(코드, 데이터, 스택 등)을 가진다 다른 프로세스와는 독립적으로 작동하며 서로 간섭하지 않는다 운영체제는 여러 프로세스를 동시에 실행하여 멀티태스킹 환경을 제공한다 프로세스를 알…","html":"<h2>1. 프로세스와 스레드 개념</h2>\n<h3><strong>프로세스란?</strong></h3>\n<p>컴퓨터에서 실행 중인 프로그램을 말하며 실행 중인 프로그램에 대해 독립적으로 메모리와 자원을 할당한다.</p>\n<ul>\n<li>각 프로세스는 독립된 메모리 영역(코드, 데이터, 스택 등)을 가진다</li>\n<li>다른 프로세스와는 독립적으로 작동하며 서로 간섭하지 않는다</li>\n<li>운영체제는 여러 프로세스를 동시에 실행하여 멀티태스킹 환경을 제공한다</li>\n</ul>\n<img src='https://github.com/user-attachments/assets/fcfdf664-d7dc-4dd4-9ffd-fc1a2d7ba272' alt='' width='600'>\n<h3><strong>프로세스를 알아야 하는 이유</strong></h3>\n<ul>\n<li>컴퓨터 자원의 효율적인 관리와 운영체제의 동작 원리를 이해하기 위해.</li>\n<li>멀티태스킹 환경에서 프로세스 간의 상호작용과 자원 분배를 최적화하기 위해.</li>\n</ul>\n<h3><strong>스레드란?</strong></h3>\n<p>프로세스 내에서 실행되는 작업의 흐름 단위를 말하며 하나의 프로세스는 여러 스레드를 생성할 수 있다.</p>\n<ul>\n<li>같은 프로세스 내의 스레드들은 <strong>공유 메모리</strong>를 사용하여 작업을 수행한다</li>\n<li>가벼운 실행 단위로 생성 및 전환 비용이 비교적 적다</li>\n<li>여러 스레드가 동시에 실행될 때 멀티태스킹 효과를 제공한다</li>\n</ul>\n<h3><strong>스레드를 알아야 하는 이유</strong></h3>\n<ul>\n<li><strong>동시성</strong>과 <strong>병렬성</strong>을 통해 프로그램의 실행 효율을 극대화하기 위해.</li>\n<li>자원을 최적화하고 반응성을 높이며 작업 처리 속도를 향상시키기 위해.</li>\n</ul>\n<hr>\n<h2>2. 동시성과 병렬성</h2>\n<h3><strong>동시성(Concurrency)</strong></h3>\n<p>하나의 프로세서(CPU)가 여러 작업을 번갈아가며 실행하는 방식이다.</p>\n<ul>\n<li>컨텍스트 스위칭(<strong>Context Switching</strong>)을 통해 작업을 빠르게 전환할 수 있다.</li>\n<li>실제로는 한 번에 하나의 작업만 실행되지만 매우 빠르게 진행되어 동시에 실행되는 것처럼 보인다.</li>\n</ul>\n<h3><strong>병렬성(Parallelism)</strong></h3>\n<p>멀티코어 프로세서를 활용하여 여러 작업을 각각의 코어에서 동시에 실행하는 방식이다.</p>\n<ul>\n<li>물리적으로 여러 코어에서 작업을 나누어 수행한다.</li>\n<li>실제로 여러 작업이 동시에 실행된다.</li>\n</ul>\n<h3>차이점</h3>\n<table>\n<thead>\n<tr>\n<th><strong>구분</strong></th>\n<th><strong>동시성</strong></th>\n<th><strong>병렬성</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>설명</strong></td>\n<td>하나의 프로세서가 여러 작업을 번갈아가며 실행</td>\n<td>여러 프로세서(코어)가 각각 작업을 동시에 실행</td>\n</tr>\n<tr>\n<td><strong>예시</strong></td>\n<td>한 사람이 전화와 메모를 번갈아가며 수행</td>\n<td>여러 사람이 각자 전화와 메모를 동시에 수행</td>\n</tr>\n<tr>\n<td><strong>장점</strong></td>\n<td>단일 프로세서에서도 다중 작업 처리가 가능</td>\n<td>작업 처리 속도가 빠르고, 대규모 작업에 적합</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2>3. 프로세스와 스레드의 차이점</h2>\n<table>\n<thead>\n<tr>\n<th><strong>구분</strong></th>\n<th><strong>프로세스(Process)</strong></th>\n<th><strong>스레드(Thread)</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>정의</strong></td>\n<td>독립적으로 실행되는 프로그램 단위</td>\n<td>프로세스 내에서 실행되는 작업의 흐름 단위</td>\n</tr>\n<tr>\n<td><strong>메모리 구조</strong></td>\n<td>각 프로세스는 독립적인 메모리 공간 <br/> (Code, Data, Heap, Stack)을 가짐</td>\n<td>프로세스 내의 메모리를 공유 <br/>(Code, Data, Heap 공유, Stack은 독립적)</td>\n</tr>\n<tr>\n<td><strong>생성 비용</strong></td>\n<td>생성 및 종료에 높은 비용 (운영체제의 도움 필요)</td>\n<td>생성 및 전환 비용이 낮음</td>\n</tr>\n<tr>\n<td><strong>안정성</strong></td>\n<td>프로세스 간의 충돌이 없음</td>\n<td>하나의 스레드가 잘못되면 프로세스 전체에 영향을 줄 수 있음</td>\n</tr>\n<tr>\n<td><strong>예시</strong></td>\n<td>크롬 브라우저, 메모장 등 독립적인 프로그램</td>\n<td>크롬 브라우저 내에서 실행되는 탭, 다운로드 등</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2>4. 프로세스의 메모리 구조</h2>\n<ol>\n<li><strong>Code</strong> : 프로그램 실행에 필요한 <strong>명령어</strong>가 저장되는 메모리 영역. 읽기 전용으로 보호된다.</li>\n<li><strong>Data</strong> : <strong>전역 변수와 static 변수</strong>가 저장되는 메모리 영역. 프로그램 시작 시 할당되고 종료 시 해제된다.</li>\n<li><strong>Heap</strong> : 객체와 배열 같은 <strong>동적 메모리</strong>가 저장되는 메모리 영역. 가비지 컬렉션에 의해 관리된다.</li>\n<li><strong>Stack</strong> : <strong>지역 변수, 매개변수, 반환값</strong> 등이 저장되는 메모리 영역. 함수 호출 시마다 새로운 스택 프레임이 생성되고 함수가 종료되면 해제된다.</li>\n</ol>\n<hr>\n<h2>5. 자바에서 <strong>스레드의 필요성</strong></h2>\n<p>현대 프로그램은 한 번에 단 하나의 작업만 처리하는 방식으로는 사용자 요구를 충족할 수 없다. 특히 사용자 경험(UX)을 높이기 위해 여러 작업이 동시에 수행되는 <strong>멀티태스킹</strong>이 필수적이다.</p>\n<h3><strong>예시) Youtube</strong></h3>\n<p>유튜브와 같은 애플리케이션에서는 다음과 같은 작업들이 동시에 이루어진다</p>\n<ul>\n<li>영상 재생 / 자막 표시 / Seek Bar 조정 / 진행 시간 업데이트 등..</li>\n</ul>\n<p>이 모든 작업이 하나의 스레드에서 처리된다면 각 작업의 실행 시간이 길어져 프로그램이 느려지고 사용자 반응성이 떨어질 것이다. 이를 해결하기 위해 각 작업을 별도의 스레드에서 실행하여 프로그램의 반응성과 효율성을 높일 수 있다.</p>\n<h3>사용 예시 코드</h3>\n<p><code class=\"language-text\">YouTubeApp</code> 이라는 하나의 프로세스 안에서 <code class=\"language-text\">VideoPlayer</code> , <code class=\"language-text\">Subtitle</code> 스레드가 동시에 진행된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">YouTubeApp</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 영상 재생 작업</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VideoPlayer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token annotation punctuation\">@Override</span>\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"영상 재생 중... 프레임 \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                  <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0.5초마다 실행</span>\n              <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                  e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 자막 표시 작업</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Subtitle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token annotation punctuation\">@Override</span>\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> subtitles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"안녕하세요\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"오늘은 스레드에 대해 알아보겠습니다\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> subtitle <span class=\"token operator\">:</span> subtitles<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"자막: \"</span> <span class=\"token operator\">+</span> subtitle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                  <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1초마다 실행</span>\n              <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                  e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 스레드 생성</span>\n      <span class=\"token class-name\">Thread</span> videoThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VideoPlayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">Thread</span> subtitleThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Subtitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// 스레드 시작</span>\n      videoThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      subtitleThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"[Java] 스레드와 프로세스 이해하기","date":"February 05, 2025","update":"February 05, 2025","tags":["java","fullstack"],"series":"Java"},"fields":{"slug":"/java05/","readingTime":{"minutes":7.89}}},"seriesList":{"edges":[{"node":{"id":"2f6e0a4c-40b5-5c6c-92d5-e22ddbf95047","fields":{"slug":"/java01/"},"frontmatter":{"title":"[Java] 기초 개념 : 변수/자료형/접근제어자/static"}}},{"node":{"id":"a948370d-78e5-5c83-9d5b-bac385844fb9","fields":{"slug":"/java02/"},"frontmatter":{"title":"[Java] 클래스의 기본 특징 : 속성/생성자/메서드/this/super"}}},{"node":{"id":"4882d76a-1a89-5ed8-97ae-801036dd9b66","fields":{"slug":"/java03/"},"frontmatter":{"title":"[Java] 메서드 오버로딩, 오버라이딩과 상속(extends)"}}},{"node":{"id":"3d33ab1c-9124-53a8-a942-0ad731f4580c","fields":{"slug":"/java04/"},"frontmatter":{"title":"[Java] Java 개발 환경과 JVM의 동작 원리"}}},{"node":{"id":"c11cfae8-d567-5f7c-9aaa-f7db3054d355","fields":{"slug":"/java05/"},"frontmatter":{"title":"[Java] 스레드와 프로세스 이해하기"}}},{"node":{"id":"de4bb462-81cc-5cad-9aa2-72302beb6ac4","fields":{"slug":"/java06/"},"frontmatter":{"title":"[Java] Java에서 Thread Safety를 지키는 방법"}}}]},"previous":{"fields":{"slug":"/java04/"},"frontmatter":{"title":"[Java] Java 개발 환경과 JVM의 동작 원리"}},"next":{"fields":{"slug":"/java06/"},"frontmatter":{"title":"[Java] Java에서 Thread Safety를 지키는 방법"}}},"pageContext":{"id":"c11cfae8-d567-5f7c-9aaa-f7db3054d355","series":"Java","previousPostId":"3d33ab1c-9124-53a8-a942-0ad731f4580c","nextPostId":"de4bb462-81cc-5cad-9aa2-72302beb6ac4"}},"staticQueryHashes":[],"slicesMap":{}}