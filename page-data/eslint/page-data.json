{"componentChunkName":"component---src-templates-post-jsx","path":"/eslint/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"6a885fc6-db67-5e8e-87eb-b695ef8c1df6","excerpt":"ESLint ESLint는 JavaScript/Typescript 코드에서 문법 오류를 검사하고 코드 최적화를 도와주는 도구이다.  ESLint를 사용하면 코드 품질을 높이고 일관된 코드를 작성할 수 있어 협업 환경에서 주로 사용된다. Lint란? 소스코드를 분석하여 문법적인 오류나 스타일적인 오류, 적절하지 않은 구조 등에 표시를 달아주는 행위. ESL…","html":"<h2>ESLint</h2>\n<p>ESLint는 JavaScript/Typescript 코드에서 문법 오류를 검사하고 코드 최적화를 도와주는 도구이다. <br/> ESLint를 사용하면 코드 품질을 높이고 일관된 코드를 작성할 수 있어 협업 환경에서 주로 사용된다.</p>\n<blockquote>\n<p>Lint란? 소스코드를 분석하여 문법적인 오류나 스타일적인 오류, 적절하지 않은 구조 등에 표시를 달아주는 행위.</p>\n</blockquote>\n<h3>ESLint 사용 예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 예시 1: 일관된 코드 스타일 유지 (따옴표, 들여쓰기, 세미콜론 등)</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">firstname</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Joy\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// single 따옴표가 아니면 에러</span>\n  <span class=\"token literal-property property\">lastname</span><span class=\"token operator\">:</span> <span class=\"token string\">'Lee'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 예시 2: 문법 오류 감지</span>\n<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nx <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token comment\">// const 변수는 재할당 불가능 (Error)</span>\n\n<span class=\"token comment\">// 예시 3: 사용하지 않는 변수 경고</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b <span class=\"token comment\">// result 변수가 사용되지 않음 (warning)</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 예시 4: 코드 최적화</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isAvailable <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// ❌</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isAvailable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// ⭕️</span>\n\n<span class=\"token comment\">// 예시 5: React prop-types 검사</span>\n<span class=\"token comment\">// prop의 name 타입 명시하지 않음 (warning)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">MyComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>ESLint 설치 및 실행</h3>\n<ul>\n<li>설치하기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> init @eslint/config</code></pre></div>\n<ul>\n<li>실행하기 : package.json 파일의 scripts란에 아래 명령어를 추가한 후, 터미널에서 <code class=\"language-text\">npm run lint</code> 로 실행시킨다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">  <span class=\"token string\">\"scripts\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    // <span class=\"token punctuation\">..</span>.\n    <span class=\"token string\">\"lint\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"eslint .\"</span>,\n    <span class=\"token string\">\"lint:fix\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"eslint --fix .\"</span>\n  <span class=\"token punctuation\">}</span>,</code></pre></div>\n<h3>ESLint config 파일</h3>\n<p>ESLint 관련 규칙은 config 파일을 사용하여 자유롭게 설정할 수 있다. <br/> ESLint ver7 까지는 config 파일로 <code class=\"language-text\">.eslintrc</code> 를 사용했으나 ver.8부터는 <code class=\"language-text\">eslint.config.js</code> 파일에서 config를 작성한다.<br/> (참고 : <a href=\"https://github.com/jsx-eslint/eslint-plugin-react#configuration\">https://github.com/jsx-eslint/eslint-plugin-react#configuration</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// eslint.config.mjs</span>\n<span class=\"token keyword\">import</span> globals <span class=\"token keyword\">from</span> <span class=\"token string\">\"globals\"</span>\n<span class=\"token keyword\">import</span> pluginJs <span class=\"token keyword\">from</span> <span class=\"token string\">\"@eslint/js\"</span>\n<span class=\"token keyword\">import</span> tseslint <span class=\"token keyword\">from</span> <span class=\"token string\">\"typescript-eslint\"</span>\n<span class=\"token keyword\">import</span> pluginReactConfig <span class=\"token keyword\">from</span> <span class=\"token string\">\"eslint-plugin-react/configs/recommended.js\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> fixupConfigRules <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@eslint/compat\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token comment\">// 모든 JavaScript, TypeScript 및 JSX/TSX 파일에 대해 설정 적용</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">files</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"**/*.{js,mjs,cjs,ts,jsx,tsx}\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">languageOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">parserOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// JSX 구문 분석을 위한 파서 옵션 설정</span>\n        <span class=\"token literal-property property\">ecmaFeatures</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">jsx</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">ecmaVersion</span><span class=\"token operator\">:</span> <span class=\"token number\">2021</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">sourceType</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">globals</span><span class=\"token operator\">:</span> globals<span class=\"token punctuation\">.</span>browser<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 브라우저 전역 변수 추가</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  pluginJs<span class=\"token punctuation\">.</span>configs<span class=\"token punctuation\">.</span>recommended<span class=\"token punctuation\">,</span> <span class=\"token comment\">// ESLint 기본 규칙 적용</span>\n  <span class=\"token operator\">...</span>tseslint<span class=\"token punctuation\">.</span>configs<span class=\"token punctuation\">.</span>recommended<span class=\"token punctuation\">,</span> <span class=\"token comment\">// TypeScript 관련 규칙 적용</span>\n  <span class=\"token operator\">...</span><span class=\"token function\">fixupConfigRules</span><span class=\"token punctuation\">(</span>pluginReactConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// React 관련 규칙 적용</span>\n\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">settings</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">react</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">version</span><span class=\"token operator\">:</span> <span class=\"token string\">\"detect\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// React 버전을 자동으로 감지</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 추가 규칙 설정 (custom 가능)</span>\n    <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string-property property\">\"no-console\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"warn\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// console.log 사용 경고</span>\n      <span class=\"token literal-property property\">semi</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 세미콜론 필수</span>\n      <span class=\"token literal-property property\">quotes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"single\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 작은따옴표 사용</span>\n      <span class=\"token literal-property property\">indent</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 들여쓰기 2칸</span>\n      <span class=\"token string-property property\">\"no-unused-vars\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"warn\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 사용하지 않는 변수 경고</span>\n      <span class=\"token string-property property\">\"react/prop-types\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// React prop-types 사용 안함</span>\n      <span class=\"token string-property property\">\"@typescript-eslint/no-unused-vars\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"warn\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// TypeScript 사용하지 않는 변수 경고</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>","frontmatter":{"title":"협업을 위한 프로젝트 설정 - ESLint","date":"June 10, 2024","update":"June 10, 2024","tags":["frontend","development"],"series":"Dev Environment"},"fields":{"slug":"/eslint/","readingTime":{"minutes":3.225}}},"seriesList":{"edges":[{"node":{"id":"6a885fc6-db67-5e8e-87eb-b695ef8c1df6","fields":{"slug":"/eslint/"},"frontmatter":{"title":"협업을 위한 프로젝트 설정 - ESLint"}}},{"node":{"id":"76430891-9c35-5424-8f64-5ce947d3c32e","fields":{"slug":"/prettier/"},"frontmatter":{"title":"협업을 위한 프로젝트 설정 - Prettier"}}},{"node":{"id":"8f667285-8ab0-5043-b4ae-f4fc69bad25e","fields":{"slug":"/husky/"},"frontmatter":{"title":"협업을 위한 프로젝트 설정 - husky + lint-staged"}}},{"node":{"id":"ab4be412-009d-574c-9879-825b66400dc6","fields":{"slug":"/debug01/"},"frontmatter":{"title":"디버깅 환경 : Chrome DevTools로 에러 발생 원인 파악하기"}}},{"node":{"id":"014caa5e-050c-58cb-9c41-612cd5d0ede2","fields":{"slug":"/debug02/"},"frontmatter":{"title":"디버깅 환경 : 디버거의 Breakpoint를 활용한 문제 해결"}}}]},"previous":{"fields":{"slug":"/data-structure04/"},"frontmatter":{"title":"[Data Structure] List - Array & Dynamic Array "}},"next":{"fields":{"slug":"/prettier/"},"frontmatter":{"title":"협업을 위한 프로젝트 설정 - Prettier"}}},"pageContext":{"id":"6a885fc6-db67-5e8e-87eb-b695ef8c1df6","series":"Dev Environment","previousPostId":"9bf26e22-2318-5e18-8a2e-2077b0e0d362","nextPostId":"76430891-9c35-5424-8f64-5ce947d3c32e"}},"staticQueryHashes":[],"slicesMap":{}}