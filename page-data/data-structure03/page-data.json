{"componentChunkName":"component---src-templates-post-jsx","path":"/data-structure03/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"60c54983-3540-5f7f-8da9-fea322f68e90","excerpt":"메모리 구조란? 메모리는 데이터를 저장하는 공간으로, 프로그램의 성능을 최적화하기 위해 메모리 구조를 잘 이해하고 적절한 자료구조를 사용하는 것이 중요하다. 메모리: 데이터를 저장하는 곳으로, 전기신호를 0과 1로 저장하는 트랜지스터로 이루어져 있다. RAM 메모리: 휘발성 메모리로, 0과 1로 이루어진 이진수(bit)를 저장한다. 메모리 단위와 자료형 …","html":"<h2>메모리 구조란?</h2>\n<p>메모리는 데이터를 저장하는 공간으로, 프로그램의 성능을 최적화하기 위해 메모리 구조를 잘 이해하고 적절한 자료구조를 사용하는 것이 중요하다.</p>\n<ul>\n<li><strong>메모리</strong>: 데이터를 저장하는 곳으로, 전기신호를 0과 1로 저장하는 트랜지스터로 이루어져 있다.</li>\n<li><strong>RAM 메모리</strong>: 휘발성 메모리로, 0과 1로 이루어진 이진수(bit)를 저장한다.</li>\n</ul>\n<h3>메모리 단위와 자료형 크기</h3>\n<ul>\n<li><strong>비트(bit)</strong>: 메모리의 가장 작은 단위로, 0 또는 1을 나타낸다.</li>\n<li><strong>바이트(byte)</strong>: 8비트로 이루어진 단위이다.\n<ul>\n<li><strong>int</strong>: 4 bytes</li>\n<li><strong>char</strong>: 1 byte</li>\n</ul>\n</li>\n</ul>\n<h3>메모리 단위 변환</h3>\n<ul>\n<li>1 byte = 8 bits</li>\n<li>1 KB = 1024 bytes</li>\n<li>1 MB = 1024 KB</li>\n<li>1 GB = 1024 MB</li>\n</ul>\n<h3>2진수와 16진수</h3>\n<p>이진수는 16진수로 변환할 수 있으며, 2진수 4자리는 16진수 1자리로 표현된다.</p>\n<p>예) 2진수 <code class=\"language-text\">1010</code> = 16진수 <code class=\"language-text\">A</code></p>\n<h2>Node란?</h2>\n<img width='600' alt='' src='https://github.com/devjoylee/devjoylee.github.io/assets/68415905/5ef66f19-e3d0-40b9-8e0a-7d6b5416a49a'>\n<p>Node는 데이터를 저장하는 데 사용되는 기본적인 구조체이다. 다음 데이터의 주소값을 함께 저장하여 연결 리스트 등 다양한 자료구조를 구현하는 데 사용된다.</p>\n<h3>Node의 구조</h3>\n<p>Node는 보통 다음과 같은 구조를 가진다. <code class=\"language-text\">value</code>는 해당 노드의 데이터를, <code class=\"language-text\">next</code>는 다음 노드의 주소를 가리킨다. 이때, 주소값은 16진수로 저장한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value  <span class=\"token comment\"># 데이터 값</span>\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>    <span class=\"token comment\"># 다음 노드를 가리키는 포인터</span></code></pre></div>\n<h3>Node의 활용 예시</h3>\n<ul>\n<li>연결 리스트(Linked List): 각 노드가 데이터와 다음 노드를 가리키는 포인터로 구성되어 있다.</li>\n<li>트리(Tree): 각 노드는 자식 노드들과의 연결을 나타내기 위해 사용된다.</li>\n<li>그래프(Graph): 각 노드는 그래프의 정점을 나타내며, 인접한 노드들과의 관계를 링크 필드를 통해 저장한다.</li>\n</ul>","frontmatter":{"title":"[Data Structure] 메모리 구조와 Node의 주소값","date":"January 21, 2024","update":"January 21, 2024","tags":["datastructure"],"series":"Data Structure"},"fields":{"slug":"/data-structure03/","readingTime":{"minutes":2.695}}},"seriesList":{"edges":[{"node":{"id":"92f3d338-07cc-5841-8ae3-47582ebd98d3","fields":{"slug":"/data-structure01/"},"frontmatter":{"title":"[Data Structure] 자료구조와 알고리즘"}}},{"node":{"id":"aef7201e-310f-5244-aa46-76df1320631b","fields":{"slug":"/data-structure02/"},"frontmatter":{"title":"[Data Structure] 시간 복잡도와 Big-O 표기법"}}},{"node":{"id":"60c54983-3540-5f7f-8da9-fea322f68e90","fields":{"slug":"/data-structure03/"},"frontmatter":{"title":"[Data Structure] 메모리 구조와 Node의 주소값"}}},{"node":{"id":"9bf26e22-2318-5e18-8a2e-2077b0e0d362","fields":{"slug":"/data-structure04/"},"frontmatter":{"title":"[Data Structure] List - Array & Dynamic Array "}}}]},"previous":{"fields":{"slug":"/data-structure02/"},"frontmatter":{"title":"[Data Structure] 시간 복잡도와 Big-O 표기법"}},"next":{"fields":{"slug":"/data-structure04/"},"frontmatter":{"title":"[Data Structure] List - Array & Dynamic Array "}}},"pageContext":{"id":"60c54983-3540-5f7f-8da9-fea322f68e90","series":"Data Structure","previousPostId":"aef7201e-310f-5244-aa46-76df1320631b","nextPostId":"9bf26e22-2318-5e18-8a2e-2077b0e0d362"}},"staticQueryHashes":[],"slicesMap":{}}