{"componentChunkName":"component---src-templates-post-jsx","path":"/java06/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"de4bb462-81cc-5cad-9aa2-72302beb6ac4","excerpt":"Thread Safety 란? Java 애플리케이션에서 여러 스레드가 동시에 실행될 때 공유 메모리에 접근하거나 데이터를 수정할 때 일관성을 유지하려면 스레드 안전(Thread Safety)을 보장해야 한다. 여기서 스레드 안전이란, 여러 스레드가 동시에 하나의 데이터를 사용할 때 데이터가 꼬이거나 잘못된 값이 나오지 않도록 안전하게 처리하는 것을 말한다…","html":"<h2>Thread Safety 란?</h2>\n<p>Java 애플리케이션에서 여러 스레드가 동시에 실행될 때 공유 메모리에 접근하거나 데이터를 수정할 때 일관성을 유지하려면 <strong>스레드 안전</strong>(<strong>Thread Safety</strong>)을 보장해야 한다. 여기서 스레드 안전이란, 여러 스레드가 동시에 하나의 데이터를 사용할 때 데이터가 꼬이거나 잘못된 값이 나오지 않도록 안전하게 처리하는 것을 말한다.</p>\n<p>스레드 안전은 프로그램의 안정성과 신뢰성을 보장하기 위해 필수적이다. 하지만 과도하게 사용하면 스레드가 차례를 기다리느라 프로그램이 느려질 수 있다. 따라서 꼭 필요한 부분에만 스레드 안전을 적용해야 한다.</p>\n<h3>스레드 안전이 중요한 이유</h3>\n<ol>\n<li>데이터의 일관성 보장</li>\n<li>예측 불가능한 동작 방지</li>\n<li>데드락 및 레이스 컨디션 방지</li>\n<li>멀티스레드 환경에서 안정성 확보</li>\n</ol>\n<h2>Thread Safety 적용 방법</h2>\n<h3>1. 동기화(Synchronization) 사용</h3>\n<p><code class=\"language-text\">synchronized</code> 키워드를 사용해서 여러 스레드가 동시에 공유 데이터를 수정하지 못하도록 잠금을 걸어준다. <br/>\n이렇게 하면 한 번에 하나의 스레드만 특정 코드 블록이나 메서드에 접근할 수 있도록 할 수 있다. 가장 기본적이고 직관적인 방식이지만 과도한 사용은 성능 저하을 일으켜 효율성이 떨어진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 한 번에 하나의 스레드만 실행 가능</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>2. Concurrent API (패키지) 사용</h3>\n<p>Java에서 제공되는 유틸리티를 사용하면 safety가 보장된 자료구조를 쓸 수 있다. <br/> 이런 자료구조들은 내부적으로 알아서 동기화를 처리해 주기 때문에 직접 잠금을 걸 필요가 없다. Concurrent API는 실무에서 가장 많이 사용되며 성능과 안정성을 동시에 확보할 수 있다.</p>\n<ul>\n<li>예시) <code class=\"language-text\">CopyOnWriteArrayList</code> : 일반 리스트(ArrayList)는 여러 스레드가 동시에 접근하면 문제가 생길 수 있지만,  <code class=\"language-text\">CopyOnWriteArrayList</code>는 안전하게 동작한다.</li>\n<li>그 외에도, <code class=\"language-text\">ConcurrentHashMap</code>, <code class=\"language-text\">CopyOnWriteArrayList</code>, <code class=\"language-text\">ConcurrentLinkedQueue</code> 등이 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CopyOnWriteArrayList</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">CopyOnWriteArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CopyOnWriteArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 스레드 안전하게 추가</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 스레드 안전하게 가져오기</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>3. 불변 객체 사용</h3>\n<p>불변 객체(Immutable Object)는 상태를 변경할 수 없다. 데이터를 아예 변경할 수 없게 만들면 여러 스레드가 접근해도 안전하다. <br/>Java에서는 <code class=\"language-text\">final</code> 키워드를 사용하면 객체를 불변으로 만들 수 있다. 불변 객체는 설계가 간단하고 스레드 안전 문제를 원천적으로 제거하기 때문에 유지보수성이 높다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ImmutableData</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ImmutableData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>4. <code class=\"language-text\">Atomic</code> 클래스 사용</h3>\n<p>Java는 <code class=\"language-text\">AtomicInteger</code>, <code class=\"language-text\">AtomicLong</code> 와 같은 안전한 연산을 지원하는 클래스를 제공한다. 이 클래스들은 내부적으로 알아서 동기화를 처리해서 복잡하게 <code class=\"language-text\">synchronized</code>를 쓸 필요가 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>atomic<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AtomicInteger</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">AtomicInteger</span> count <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      count<span class=\"token punctuation\">.</span><span class=\"token function\">incrementAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 안전하게 +1</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 안전하게 값 가져오기</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>5. <code class=\"language-text\">volatile</code> 키워드 사용</h3>\n<p><code class=\"language-text\">volatile</code> 키워드를 사용하면 변수의 값을 항상 최신 상태로 유지할 수 있다. 하지만 단순한 읽기/쓰기 작업에서만 안전하며 복잡한 연산에는 적합하지 않다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">boolean</span> running <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      running <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 다른 스레드에서도 최신 값으로 반영됨</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isRunning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> running<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>6. ThreadLocal 사용</h3>\n<p>스레드마다 독립적인 데이터를 가지게 하면 공유 자원을 사용할 필요가 없다. 이때, <code class=\"language-text\">ThreadLocal</code>을 사용하면 각 스레드가 자기만의 데이터를 따로 저장하고 사용하므로 공유 자원에 접근하지 않게되서 스레드 안전을 보장한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> threadLocal <span class=\"token operator\">=</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token punctuation\">.</span><span class=\"token function\">withInitial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 현재 스레드만의 값 저장</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 현재 스레드만의 값 가져오기</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>7. 락(Lock)으로 세밀한 제어</h3>\n<p><code class=\"language-text\">synchronized</code> 대신 <code class=\"language-text\">ReentrantLock</code> 같은 락(Lock)을 사용하면 더 세밀하게 제어할 수 있다. 락은 동기화보다 유연하지만 직접 잠금을 걸고 풀어야 하므로 조금 더 복잡하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ReentrantLock</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ReentrantLock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 잠금</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n          count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n          lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 잠금 해제</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br /><br /></p>\n<blockquote>\n<p>REFERENCE <br /> 스레드 안전(Thread Safe)을 지키기 위한 방법\n<a href=\"https://sorjfkrh5078.tistory.com/267\">https://sorjfkrh5078.tistory.com/267</a> <br /> [Java] Thread Safety하게 개발하는 방법\n<a href=\"https://jindory.tistory.com/146\">https://jindory.tistory.com/146</a> <br/> [Java] Java에서 Thread Unsafe한 상황 이해하기 <a href=\"https://jindory.tistory.com/entry/Java-Java%EC%97%90%EC%84%9C-Thread-Unsafe%ED%95%9C-%EC%83%81%ED%99%A9-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0?category=1256005\">https://jindory.tistory.com/entry/Java-Java에서-Thread-Unsafe한-상황-이해하기?category=1256005</a></p>\n</blockquote>","frontmatter":{"title":"[Java] Java에서 Thread Safety를 지키는 방법","date":"February 07, 2025","update":"February 07, 2025","tags":["java","fullstack"],"series":"Java"},"fields":{"slug":"/java06/","readingTime":{"minutes":6.72}}},"seriesList":{"edges":[{"node":{"id":"2f6e0a4c-40b5-5c6c-92d5-e22ddbf95047","fields":{"slug":"/java01/"},"frontmatter":{"title":"[Java] 기초 개념 : 변수/자료형/접근제어자/static"}}},{"node":{"id":"a948370d-78e5-5c83-9d5b-bac385844fb9","fields":{"slug":"/java02/"},"frontmatter":{"title":"[Java] 클래스의 기본 특징 : 속성/생성자/메서드/this/super"}}},{"node":{"id":"4882d76a-1a89-5ed8-97ae-801036dd9b66","fields":{"slug":"/java03/"},"frontmatter":{"title":"[Java] 메서드 오버로딩, 오버라이딩과 상속(extends)"}}},{"node":{"id":"3d33ab1c-9124-53a8-a942-0ad731f4580c","fields":{"slug":"/java04/"},"frontmatter":{"title":"[Java] Java 개발 환경과 JVM의 동작 원리"}}},{"node":{"id":"c11cfae8-d567-5f7c-9aaa-f7db3054d355","fields":{"slug":"/java05/"},"frontmatter":{"title":"[Java] 스레드와 프로세스 이해하기"}}},{"node":{"id":"de4bb462-81cc-5cad-9aa2-72302beb6ac4","fields":{"slug":"/java06/"},"frontmatter":{"title":"[Java] Java에서 Thread Safety를 지키는 방법"}}}]},"previous":{"fields":{"slug":"/java05/"},"frontmatter":{"title":"[Java] 스레드와 프로세스 이해하기"}},"next":{"fields":{"slug":"/web01/"},"frontmatter":{"title":"Client와 Server의 역할과 통신 과정"}}},"pageContext":{"id":"de4bb462-81cc-5cad-9aa2-72302beb6ac4","series":"Java","previousPostId":"c11cfae8-d567-5f7c-9aaa-f7db3054d355","nextPostId":"7fe0b353-ac25-5cef-8c23-16e460140ebe"}},"staticQueryHashes":[],"slicesMap":{}}