{"componentChunkName":"component---src-templates-post-jsx","path":"/about-socket/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"4fecebf5-dc29-56e6-a7a1-45ec48733804","excerpt":"✨ Socket 이란? 네트워트 상에서 Socket은 프로토콜, IP 주소, 포트 넘버 등으로 해석됩니다. 떨어져 있는 두 호스트를 연결해주는 도구로 사용되며 Socket을 통해 데이터를 내보내거나 받아올 수 있는 데이터 통로가 만들어 집니다. 소켓의 역할에 따라 클라이언트 소켓, 서버소켓으로 구분됩니다. Websocket 사용자의 브라우저와 서버 사이의…","html":"<h2>✨ Socket 이란?</h2>\n<p>네트워트 상에서 Socket은 프로토콜, IP 주소, 포트 넘버 등으로 해석됩니다. 떨어져 있는 두 호스트를 연결해주는 도구로 사용되며 Socket을 통해 데이터를 내보내거나 받아올 수 있는 데이터 통로가 만들어 집니다. 소켓의 역할에 따라 클라이언트 소켓, 서버소켓으로 구분됩니다.</p>\n<h3>Websocket</h3>\n<blockquote>\n<p>사용자의 브라우저와 서버 사이의 양방향 연결 채널을 구성하는 HTML5 프로토콜</p>\n</blockquote>\n<p>WebSocket은 HTML5 웹 표준 기술로써 HTTP 통신의 단점을 보완하여 양방향 통신을 지원하고 또 서버와의 연결이 유지가 된 상태에서 데이터가 이동하기 때문에 실시간 데이터 전송이 가능합니다.</p>\n<p>데이터를 주고 받는것 이외의 다른 기능은 없으나 동작 속도가 매우 빠르며 통신할 때 아주 적은 데이터를 이용합니다. 그래서 주로 가상화폐 거래소나 규모가 큰 데이터 이동이 많은 프로젝트에서 사용합니다. Websocket은 오래된 브라우저와 호환이 되지 않는 단점이 있습니다.</p>\n<h2>🤔 HTTP 통신과 Socket 통신 비교</h2>\n<h3>HTTP 통신</h3>\n<blockquote>\n<p>Client의 요청(Request)이 있을 때만 Server가 응답(Response)하여 정보를 전송한 후 연결을 종료하는 통신</p>\n</blockquote>\n<p>HTTP통신은 실시간 연결보다는 필요할 때 Server로 요청을 보내는 상황에 유리합니다.</p>\n<ul>\n<li>단방향 통신 : Client가 요청을 보내는 경우에만 Server가 응답합니다.</li>\n<li>일회성 통신 : Server로부터 응답을 받은 후에는 연결이 바로 종료됩니다.</li>\n</ul>\n<h3>Socket 통신</h3>\n<blockquote>\n<p>Server와 Client가 특정 Socket(Port)를 통해 실시간으로 양방향 통신을 하는 방식</p>\n</blockquote>\n<p>Socket 통신은 동영상 스트리밍이나 채팅창 등 실시간으로 데이터를 주고받을 때 사용됩니다.</p>\n<ul>\n<li>양방향 통신 : Client에서 Server로, Server에서 Client로 데이터 전달이 가능합니다.</li>\n<li>지속성 통신 : 연결이 끊이지 않고 실시간으로 계속 유지됩니다.</li>\n</ul>\n<h2>🔎 Socket.io 사용 하기</h2>\n<blockquote>\n<p><strong>Socket.io</strong> 👉 Websocket 기반으로 웹 클라이언트와 서버 간의 실시간 양방향 통신을 가능하게 해주는 Cross-platform WebSocket API</p>\n</blockquote>\n<p>Socket.io는 WebSocket을 편리하게 쓸 수 있도록 하는 라이브러리입니다. 브라우저간의 호환성을 높이고 <code class=\"language-text\">room</code>이라는 기능을 이용해 일부 Client에만 데이터를 전송하는 브로드캐스팅이 가능합니다. 아래 구현 예시를 통해 더 자세히 알아보겠습니다.</p>\n<h3>서버 Socket 구현</h3>\n<ol>\n<li>Socket 패키지를 설치합니다</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i socket.io</code></pre></div>\n<ol start=\"2\">\n<li>app서버 생성 후 소켓IO에 생성한 서버를 전달하고 동작시킨다</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> SocketIO <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"socket.io\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8005</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> io <span class=\"token operator\">=</span> <span class=\"token function\">SocketIO</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/socket.io\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 서버 연결, path는 프론트와 일치시켜준다.</span>\n<span class=\"token comment\">// path: 이 경로를 통해 통신을 수행하며, 생략시 디폴트 값은 /socket.io 로 지정된다.</span></code></pre></div>\n<ol start=\"3\">\n<li>\n<p>소켓 연결에 성공하면 각 이벤트에 대한 코드를 작성합니다.</p>\n<p>(<code class=\"language-text\">addEventListener</code> 방식을 사용)</p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 웹소켓 연결 시</span>\nio<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connection'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">socket</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 연결 종료 Event</span>\n  socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'disconnect'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'클라이언트 접속 해제'</span><span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 에러 발생 Event</span>\n  socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Client -> Server (데이터 수신)</span>\n  <span class=\"token comment\">// Client가 reply라는 이벤트로 전송한 데이터</span>\n  socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'reply'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Server -> Client (데이터 전송)</span>\n  socket<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>클라이언트 Socket 구현</h3>\n<ol>\n<li>Socket 패키지를 설치합니다 (client버전)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i socket.io-client</code></pre></div>\n<ol start=\"2\">\n<li>Socket을 불러와서 Server로 데이터를 전송하는 코드를 작성합니다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> io <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"socket.io-client\"</span>\n<span class=\"token keyword\">const</span> socket <span class=\"token operator\">=</span> <span class=\"token function\">io</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:3000\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// server url 전달</span>\n\n<span class=\"token comment\">// Server -> Client (데이터 수신)</span>\nsocket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Client -> Serer (데이터 전송)</span>\nsocket<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world!\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><br /><br /></p>\n<blockquote>\n<p>REFERENCE<br /> Learn Socket.io In 30 Minutes <a href=\"https://youtu.be/ZKEqqIO7n-k\">https://youtu.be/ZKEqqIO7n-k</a> <br/> 소켓(Socket) 통신이란? <a href=\"https://helloworld-88.tistory.com/215\">https://helloworld-88.tistory.com/215</a></p>\n</blockquote>","frontmatter":{"title":"Socket 통신 개념 및 Socket.io 사용 예시","date":"April 20, 2022","update":"April 20, 2022","tags":["socket.io"],"series":"Socket.io"},"fields":{"slug":"/about-socket/","readingTime":{"minutes":5.305}}},"seriesList":{"edges":[{"node":{"id":"4fecebf5-dc29-56e6-a7a1-45ec48733804","fields":{"slug":"/about-socket/"},"frontmatter":{"title":"Socket 통신 개념 및 Socket.io 사용 예시"}}},{"node":{"id":"649d075c-0f21-5edf-a637-34e7649bdd5b","fields":{"slug":"/use-of-socket/"},"frontmatter":{"title":"Socket.io 기능 알아보기"}}}]},"previous":{"fields":{"slug":"/google-auth-firebase/"},"frontmatter":{"title":"구글 로그인 기능 with Firebase"}},"next":{"fields":{"slug":"/use-of-socket/"},"frontmatter":{"title":"Socket.io 기능 알아보기"}}},"pageContext":{"id":"4fecebf5-dc29-56e6-a7a1-45ec48733804","series":"Socket.io","previousPostId":"4a968e5e-da06-5dff-8f31-d3f829f0d4a1","nextPostId":"649d075c-0f21-5edf-a637-34e7649bdd5b"}},"staticQueryHashes":[]}