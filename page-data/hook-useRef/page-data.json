{"componentChunkName":"component---src-templates-post-jsx","path":"/hook-useRef/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"b4e36309-1b87-57c2-ac37-f1a54a201fc3","excerpt":"✨ useRef 정의 Ref는 'reference'의 약자로 '참조'라는 뜻입니다. useRef는 인자로 전달된 값을 에 할당하여 객체로 반환해 주는데, 이때 current에 할당된 값은 렌더링되어도 그대로 유지됩니다.\n그래서 렌더링에 상관없이 동일한 참조값이 필요한 경우 useRef를 사용합니다. 또한 current 값이 바뀌어도 컴포넌트가 리렌더링되지…","html":"<h2>✨ useRef 정의</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token comment\">// { current: value }</span></code></pre></div>\n<p>Ref는 'reference'의 약자로 '참조'라는 뜻입니다. useRef는 인자로 전달된 값을 <code class=\"language-text\">current</code>에 할당하여 객체로 반환해 주는데, 이때 current에 할당된 값은 렌더링되어도 그대로 유지됩니다.\n그래서 렌더링에 상관없이 동일한 참조값이 필요한 경우 useRef를 사용합니다.</p>\n<p>또한 current 값이 바뀌어도 컴포넌트가 리렌더링되지 않기때문에 자주 업데이트 되는 값은 <br/>state가 아닌 ref로 관리하면 불필요한 렌더링을 줄일 수 있습니다.</p>\n<h2>🤔 useRef 언제 사용할까?</h2>\n<h3>1. 컴포넌트 내부 변수 관리</h3>\n<p>변화는 감지해야 하지만, 렌더링이 불필요한 변수값을 다룰 때 useRef를 사용하면 컴포넌트 성능을 높일 수 있습니다. useRef를 활용한 변수는 아래와 같은 곳에 쓰입니다.</p>\n<ul>\n<li>setTimeout, setInterval을 통해 만들어진 id</li>\n<li>scroll 위치</li>\n<li>배열에 새 항목을 추가할 때 필요한 고유값 key</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// App.js</span>\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">\"joy\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> nextId <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 새로운 유저 id값 3으로 지정</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onCreate</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">username</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  users<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> nextId<span class=\"token punctuation\">,</span> <span class=\"token comment\">// ref에 저장된 id 값 할당</span>\n    <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> username<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  nextId<span class=\"token punctuation\">.</span>current <span class=\"token operator\">+=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// id값 1 증가</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>2. DOM 요소에 접근</h3>\n<p><code class=\"language-text\">Document.querySelector()</code> 와 비슷한 기능으로 DOM에 직접적인 접근이 필요할 때 useRef를 사용할 수 있습니다. 사용하고자 하는 DOM 요소의 인라인 속성으로 useRef 값이 할당된 변수를 전달해주면 해당 Ref의 current 값에 DOM 요소가 저장됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> inputRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>inputRef<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {current: input}</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>inputRef<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>DOM 요소에 접근이 필요한 경우는 아래와 같습니다.</p>\n<ul>\n<li>포커스, 텍스트 선택영역, 혹은 미디어의 재생을 관리할 때.</li>\n<li>애니메이션을 직접적으로 실행시킬 때.</li>\n<li>서드 파티 DOM 라이브러리를 React와 같이 사용할 때.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// input.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> inputRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    inputRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// input 요소에 focus</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>inputRef<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>login<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">로그인</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>🔎 useRef 특징</h2>\n<ol>\n<li>렌더링이 발생해도 current에 저장된 값은 그대로 유지됩니다.</li>\n<li>current 값이 바뀌어도 컴포넌트가 리렌더링되지 않습니다.</li>\n</ol>\n<h3>Ref와 변수의 차이점</h3>\n<ul>\n<li>공통점 : 렌더링 발생 ❌</li>\n<li>차이점 : ref 와 변수에 각각 값을 저장하다가 <strong>렌더링이 발생하면</strong> 변수에 저장된 값은 초기화되지만 ref에 저장된 값은 그대로 유지됩니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useRef <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>render<span class=\"token punctuation\">,</span> setRender<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"렌더링 발생!!\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> countRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> countVar <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Ref: </span><span class=\"token punctuation\">{</span>countRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Var: </span><span class=\"token punctuation\">{</span>countVar<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> countRef<span class=\"token punctuation\">.</span>current<span class=\"token operator\">++</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Ref올려</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> countVar<span class=\"token operator\">++</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Var올려</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setRender</span><span class=\"token punctuation\">(</span>render <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">렌더링 발생!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token literal-property property\">Ref</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">Var</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n<span class=\"token literal-property property\">Ref</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">Var</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n<span class=\"token literal-property property\">Ref</span> <span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">Var</span> <span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n<span class=\"token literal-property property\">Ref</span> <span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">Var</span> <span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n렌더링 발생<span class=\"token operator\">!</span><span class=\"token operator\">!</span>\n<span class=\"token literal-property property\">Ref</span> <span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">Var</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n<span class=\"token literal-property property\">Ref</span> <span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">Var</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n<span class=\"token literal-property property\">Ref</span> <span class=\"token operator\">:</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">Var</span> <span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n렌더링 발생<span class=\"token operator\">!</span><span class=\"token operator\">!</span>\n<span class=\"token literal-property property\">Ref</span> <span class=\"token operator\">:</span> <span class=\"token number\">7</span> <span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">Var</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n<span class=\"token literal-property property\">Ref</span> <span class=\"token operator\">:</span> <span class=\"token number\">8</span> <span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">Var</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span></code></pre></div>\n<h3>Ref와 state의 차이점</h3>\n<ul>\n<li><code class=\"language-text\">state</code> 변화 → 렌더링 ⭕ → 컴포넌트 내부 변수들 초기화</li>\n<li><code class=\"language-text\">ref</code> 변화 → 렌더링 ❌ → 변수 값이 유지됨 <br/>\n(state에 의해 다시 렌더링 되었을 때도 그대로 유지)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useRef <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> countRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"렌더링!\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">State: </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Ref: </span><span class=\"token punctuation\">{</span>countRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">State올려</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> countRef<span class=\"token punctuation\">.</span>current<span class=\"token operator\">++</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Ref올려</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<ul>\n<li>\n<p><code class=\"language-text\">state올려</code> 버튼 클릭 : 클릭할 때마다 화면에 증가한 state값이 나타납니다.</p>\n<p>→ state가 매번 업데이트되면서 App 컴포넌트가 다시 렌더링 되기 때문</p>\n</li>\n<li>\n<p><code class=\"language-text\">ref올려</code> 버튼 클릭 : 화면에는 변화가 없지만 내부적으로 ref값이 증가합니다.</p>\n<p>→ ref는 렌더링을 발생시키지 않으므로 화면이 업데이트되지 않기 때문</p>\n<p>→ 이후에 state가 변하고 렌더링이 발생하면, 이때 변화된 ref값이 화면에 나타난다!</p>\n</li>\n</ul>\n<h3>useRef로 무한렌더링 방지</h3>\n<p>렌더링 될 때마다 렌더링 횟수를 카운트하는 state를 만들고자 합니다. 아래 코드처럼 useEffect 내부에 상태 업데이트 함수를 사용하면 이렇게 무한루프가 발생하게 됩니다.</p>\n<p>렌더링 → <code class=\"language-text\">useEffect</code> 실행→ <code class=\"language-text\">setRenderCount</code> → state 업데이트 → 렌더링 → <code class=\"language-text\">useEffect</code> 실행 → <code class=\"language-text\">setRenderCount</code> → state 업데이트 → 렌더링 ...</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>renderCount<span class=\"token punctuation\">,</span> setRenderCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"렌더링\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setRenderCount</span><span class=\"token punctuation\">(</span>renderCount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 렌더링 발생</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그러므로 이 경우에는, 렌더링 횟수를 저장하는 renderCount를 <code class=\"language-text\">useRef</code>로 관리하면 <code class=\"language-text\">useEffect</code> 내부에서 렌더링이 발생하지 않으므로 무한 렌더링을 막을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> renderCount <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"렌더링\"</span><span class=\"token punctuation\">)</span>\n  renderCount<span class=\"token punctuation\">.</span>current<span class=\"token operator\">++</span> <span class=\"token comment\">// 렌더링 발생 ❌</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br />\n<br />\n<blockquote>\n<p>REFERENCE<br /> Youtube 별코딩 <a href=\"https://youtu.be/VxqZrL4FLz8\">https://youtu.be/VxqZrL4FLz8</a><br />[React] useRef() 는 언제 사용하는가? <a href=\"https://yoonjong-park.tistory.com/entry/React-useRef-%EB%8A%94-%EC%96%B8%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94%EA%B0%80\">https://yoonjong-park.tistory.com/entry/React-useRef-는-언제-사용하는가</a></p>\n</blockquote>","frontmatter":{"title":"[React] React Hook - useRef","date":"January 08, 2022","update":"January 08, 2022","tags":["frontend","react"],"series":"React.js"},"fields":{"slug":"/hook-useRef/","readingTime":{"minutes":6.79}}},"seriesList":{"edges":[{"node":{"id":"1e50df90-b3b9-504b-8613-ccdf5181962f","fields":{"slug":"/about-react/"},"frontmatter":{"title":"[React] 리액트의 개념과 특징"}}},{"node":{"id":"35600afe-d499-5a86-8eab-9329b8e53ab3","fields":{"slug":"/react-scratch/"},"frontmatter":{"title":"[React] 리액트 시작하기 (without CRA)"}}},{"node":{"id":"9b76066d-39fd-5a28-9ff2-8e51ea90eb7e","fields":{"slug":"/about-react-hook/"},"frontmatter":{"title":"[React] React Hook이란?"}}},{"node":{"id":"2353d28f-8c44-539c-a512-367dd4cdb422","fields":{"slug":"/hook-useState/"},"frontmatter":{"title":"[React] React Hook - useState"}}},{"node":{"id":"8e39a8b0-7f45-5753-b6fd-012e5c243111","fields":{"slug":"/hook-useEffect/"},"frontmatter":{"title":"[React] React Hook - useEffect"}}},{"node":{"id":"b4e36309-1b87-57c2-ac37-f1a54a201fc3","fields":{"slug":"/hook-useRef/"},"frontmatter":{"title":"[React] React Hook - useRef"}}},{"node":{"id":"8a57df85-c11b-5120-b9b6-2d2178e34b1d","fields":{"slug":"/hook-useContext/"},"frontmatter":{"title":"[React] React Hook - useContext"}}},{"node":{"id":"8a3e0bb7-5eab-5f75-8eea-0268ea30b246","fields":{"slug":"/hook-useMemo/"},"frontmatter":{"title":"[React] React Hook - useMemo"}}},{"node":{"id":"26c13515-8b84-5da2-a03d-9936e93fe808","fields":{"slug":"/hook-useCallback/"},"frontmatter":{"title":"[React] React Hook - useCallback"}}},{"node":{"id":"7e63a168-09a6-5966-afbc-66703ed7bbe7","fields":{"slug":"/hook-useReducer/"},"frontmatter":{"title":"[React] React Hook - useReducer"}}}]},"previous":{"fields":{"slug":"/hook-useEffect/"},"frontmatter":{"title":"[React] React Hook - useEffect"}},"next":{"fields":{"slug":"/hook-useContext/"},"frontmatter":{"title":"[React] React Hook - useContext"}}},"pageContext":{"id":"b4e36309-1b87-57c2-ac37-f1a54a201fc3","series":"React.js","previousPostId":"8e39a8b0-7f45-5753-b6fd-012e5c243111","nextPostId":"8a57df85-c11b-5120-b9b6-2d2178e34b1d"}},"staticQueryHashes":[]}