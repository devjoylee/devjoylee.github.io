{"componentChunkName":"component---src-templates-post-jsx","path":"/currency-converter/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"e3c75b5c-25f3-5746-996b-47ff2c881adc","excerpt":"☝ 프로젝트 시작하기 전 프리온보딩 첫번째 과제가 발표되었다! 첫번째 과제는 4명의 팀원 중 2명씩 짝을 이루어 기능이 다른 환율계산기를 1개씩 구현하는 것이었다. 배정된 짝과 논의 해서 탭기능이 추가된 환율계산기를 만들기로 결정했다. 본격적으로 프로젝트를 시작하기 전에 협업에 필요한 규칙을 몇가지 정하기로 했다. 프로젝트 폴더 구조는 어떻게 만들까? 커…","html":"<h2>☝ 프로젝트 시작하기 전</h2>\n<p>프리온보딩 첫번째 과제가 발표되었다! 첫번째 과제는 4명의 팀원 중 2명씩 짝을 이루어 기능이 다른 환율계산기를 1개씩 구현하는 것이었다. 배정된 짝과 논의 해서 탭기능이 추가된 환율계산기를 만들기로 결정했다.</p>\n<p>본격적으로 프로젝트를 시작하기 전에 협업에 필요한 규칙을 몇가지 정하기로 했다.</p>\n<ul>\n<li>프로젝트 폴더 구조는 어떻게 만들까?</li>\n<li>커밋은 어떤 방식을 사용할 것인가?</li>\n<li>네임 컨벤션은 어떻게 따를 것인가? (컴포넌트이름, branch이름, 상수처리 등 )</li>\n<li>CSS는 어떤 툴을 사용할 것인가? (Styled Component, SASS, CSS Modules 등)</li>\n</ul>\n<p>크게 4가지 주제로 팀원들과 협업규칙을 정했고 Docs로 정리해두었다. <a href=\"https://www.notion.so/50aee26d48df4e0baf7ac3f8203c7f08\">👉 Docs 보러가기</a></p>\n<h2>📌 프로젝트 링크</h2>\n<p><a href=\"https://github.com/devjoylee/currency-converter\">Github</a>\n<a href=\"https://currency-converter-w.netlify.app/\">배포링크</a></p>\n<h2>📲 환율 계산기 만들기</h2>\n<p>환율 정보는 제공된 API(<a href=\"https://currencylayer.com/)%EC%97%90%EC%84%9C\">https://currencylayer.com/)에서</a> 실시간 환율 데이터를 <code class=\"language-text\">fetch</code>해서 사용했다. 계산기에 값을 입력하고 화폐단위를 선택하면 해당 환율을 출력하도록 로직을 설계했다.</p>\n<h3>입력값 상태 저장</h3>\n<p><img src=\"https://user-images.githubusercontent.com/68415905/154837797-6f5b9bb5-eebb-4a9f-9b4f-8fc47bc9c815.png\" alt=\"Untitled\"></p>\n<p>먼저 입력값은 2가지로 나뉜다.</p>\n<ol>\n<li>\n<p><strong>input으로 입력한 금액</strong></p>\n</li>\n<li>\n<p><strong>select 박스로 선택한 화폐단위</strong></p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>inputValue<span class=\"token punctuation\">,</span> setInputValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>currency<span class=\"token punctuation\">,</span> setCurrency<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>각각 다른 state를 만들어 입력 값을 관리하도록 하였고 input의 입력값에는 10자리 이하 숫자만 입력되도록 하기위해 입력값 length가 10을 넘는 경우 return 시켰다. 그리고 <code class=\"language-text\">toLocaleString</code> 을 사용해 숫자 3자리마다 콤마(,)가 자동으로 보이도록 만들었다. ex) 1,000,000</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// input에 값이 입력될 때</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleType</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> pureString <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>pureString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pureString<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>pureString<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setInputValue</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>pureString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setInputValue</span><span class=\"token punctuation\">(</span>pureString<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// select box 값이 선택될 때</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleChange</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setCurrency</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setInputValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>탭 기능 구현</h3>\n<p><img src=\"https://user-images.githubusercontent.com/68415905/154838315-42884797-688c-43c6-aab6-bc06f9b33f2a.JPG\" alt=\"Untitled\"></p>\n<p>위 select 박스에서 선택된 단위는 아래 탭박스에 나타나지 않도록 하기위해 전체 화폐단위 값을 가져와서 <code class=\"language-text\">filter</code>로 select 박스에 선택된 값을 제외하고 탭을 다시 정렬하도록 구현했다. 활성화된 탭은 border-bottom값을 none으로 해주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>tabs<span class=\"token punctuation\">,</span> setTabs<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TAB_CURRENCY</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>currentTab<span class=\"token punctuation\">,</span> setCurrentTab<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setCurrentTab</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// 탭 클릭 시 현재 탭 상태 업데이트</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleTab</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> changedTabs <span class=\"token operator\">=</span> <span class=\"token constant\">TAB_CURRENCY</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tab</span> <span class=\"token operator\">=></span> tab <span class=\"token operator\">!==</span> currency<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setTabs</span><span class=\"token punctuation\">(</span>changedTabs<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setCurrentTab</span><span class=\"token punctuation\">(</span>changedTabs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">handleTab</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>currency<span class=\"token punctuation\">,</span> setCurrentTab<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>실시간 날짜 &#x26; 환율 계산</h3>\n<p><img src=\"https://user-images.githubusercontent.com/68415905/154838566-6341a0f4-bad8-4f66-b706-f6accb9e7488.jpg\" alt=\"Untitled\"></p>\n<p>데이터를 성공적으로 받아오면, <code class=\"language-text\">DateConverter</code>와 <code class=\"language-text\">CurrencyCalculator</code>로 실시간 환율을 계산한다. 환율 계산할 때는, 콤마(,)때문에 string으로 변한 value값을 다시 number로 바꾸어 준다. ex) “1,000” → 1000</p>\n<ul>\n<li>날짜 계산 (dateConverter.js)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">DateConverter</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">timestamp</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> time <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>timestamp <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> year <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> month <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"en\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">month</span><span class=\"token operator\">:</span> <span class=\"token string\">\"short\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> date <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>year<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>month<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>date<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>환율 계산 (currencyCalculator.js)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">CurrencyCalculator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> base<span class=\"token punctuation\">,</span> money</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> targetRate <span class=\"token operator\">=</span> apiData<span class=\"token punctuation\">.</span>quotes<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">USD</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>target<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> baseRate <span class=\"token operator\">=</span> apiData<span class=\"token punctuation\">.</span>quotes<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">USD</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>base<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> exchangeRate <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>targetRate <span class=\"token operator\">/</span> baseRate<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> money<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> exchangeRate<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"en\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">maximumFractionDigits</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>♻ 프로젝트 리팩토링</h2>\n<h3>API 상수화</h3>\n<p>처음에는 API key, 화폐정보 등이 모두 포함된 API를 통째로 string으로 써서 data를 불러왔는데 화폐정보가 바뀔때 API를 수정해야한다는 불편함이 생겨 좀더 편리한 구조로 API 주소를 바꾸었다.</p>\n<ul>\n<li><strong>리팩토링 전</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// constants.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">API_ENDPOINT</span> <span class=\"token operator\">=</span>\n  <span class=\"token string\">\"http://api.currencylayer.com/live?access_key=7cceb7113b3a6f9436614acd65e70c26&amp;format=1\"</span>\n\n<span class=\"token comment\">// converter.jsx</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token constant\">API_ENDPOINT</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><strong>리팩토링 후</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// constants.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">KEY</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"7cceb7113b3a6f9436614acd65e70c26\"</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">SELECT_CURRENCY</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"KRW\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"JPY\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PHP\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">TAB_CURRENCY</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"KRW\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"JPY\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CAD\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"HKD\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CNY\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">API_ENDPOINT</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">currencies</span> <span class=\"token operator\">=></span>\n  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://api.currencylayer.com/live?access_key=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">KEY</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;currencies=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>currencies<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;format=1</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token comment\">// converter.jsx</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token constant\">API_ENDPOINT</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TAB_CURRENCY</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>API fetch 실패 시 로딩화면 추가</h3>\n<p>처음에는 사용자가 입력창에 값을 입력하기 전 까지는 fetch 성공여부를 알 수 없었다. (fetch 실패 시 계산 안됨). 그래서 fetch가 실패한 경우 로딩이 실패했다는 UI를 보여줌으로써 사용자가 입력창에 입력을 해서 확인해보는 불필요한 작업을 최소화시켰다.</p>\n<img src='https://user-images.githubusercontent.com/68415905/154838974-eb069e65-bbf1-4dbc-8794-2560ec8ac318.JPG' width='450'>\n<h3>Netlify 배포 오류</h3>\n<p><img src=\"https://user-images.githubusercontent.com/68415905/154839736-666c1574-4817-4461-9789-6d8edcf6bbda.jpg\" alt=\"error\">\n프로젝트가 끝난 후, Netlify로 배포를 하려는데 <code class=\"language-text\">Mixed Content</code>라는 HTTP 관련 이슈가 생겨 배포가 안되는 문제가 발생했다. 알아본 결과 최신 브라우저에서는 <code class=\"language-text\">https</code> 페이지에서 <code class=\"language-text\">http</code> 리소스를 요청할 수 없다는 것을 알게되었다. 로컬에서는 API 사용이 가능했던 이유는 리액트 개발 서버는 http도 사용하기 때문이라고 했다.</p>\n<p>그래서 차선책으로 HTTP 업로드가 가능한 AWS를 통해 배포를 하기로 결정했다.\n<a href=\"http://beefplz.s3-website.ap-northeast-2.amazonaws.com/\">AWS 링크</a></p>\n<p>하지만 AWS는 Netlify처럼 자동으로 업데이트되지 않고 배포한 사람이 매번 직접 빌드를 해야한다는 단점이 있었다. 그래서 Netlify에서 앞서 발생한 이슈를 해결할 수 있는 방법이 있을까 찾아보다가 public 위치에 <code class=\"language-text\">_redirects</code>라는 파일을 만들면 된다는 글을 보게되었다!</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">// _redirects\n/api/* http://api.currencylayer.com/:splat <span class=\"token number\">200</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://api.currencylayer.com/live?access_key=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">KEY</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n👇\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/api/live?access_key=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">KEY</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">_redirects</code>에 HTTP 주소를 추가한 후, fetch 경로를 위처럼 수정하니 HTTP 이슈 없이 Netlify 배포에 성공했다! 🎉</p>\n<br />\n<blockquote>\n<p>REFERENCE<br />Netlify 공식문서 <a href=\"https://www.netlify.com/blog/2021/12/13/setting-up-redirects-on-netlify/\">https://www.netlify.com/blog/2021/12/13/setting-up-redirects-on-netlify/</a></p>\n</blockquote>","frontmatter":{"title":"환율 계산기(Currency Converter) 만들기","date":"January 28, 2022","update":"January 28, 2022","tags":["wanted","javascript","react","netlify"],"series":"원티드 프리온보딩 회고"},"fields":{"slug":"/currency-converter/","readingTime":{"minutes":7.055}}},"seriesList":{"edges":[{"node":{"id":"e3c75b5c-25f3-5746-996b-47ff2c881adc","fields":{"slug":"/currency-converter/"},"frontmatter":{"title":"환율 계산기(Currency Converter) 만들기"}}},{"node":{"id":"8a06f560-b7a9-56ed-88c3-45819c7ea1bc","fields":{"slug":"/admin-registry/"},"frontmatter":{"title":"어드민 페이지 (이미지 첨부 기능 / useForm)"}}},{"node":{"id":"bac24a78-7091-5c8b-8fce-54b7e747c094","fields":{"slug":"/estimate-board/"},"frontmatter":{"title":"견적서 게시판 (필터링 기능)"}}},{"node":{"id":"211bcf56-1da1-507d-9095-f64039bec773","fields":{"slug":"/find-\bsupplements/"},"frontmatter":{"title":"영양제 검색 페이지 (검색 및 무한 스크롤)"}}},{"node":{"id":"3912a174-9712-5ab9-a0c0-af782a79bf52","fields":{"slug":"/cyworld-clone/"},"frontmatter":{"title":"싸이월드 클론 built in NextJS (with 넘블)"}}}]},"previous":{"fields":{"slug":"/hook-useReducer/"},"frontmatter":{"title":"[React] React Hook - useReducer"}},"next":{"fields":{"slug":"/admin-registry/"},"frontmatter":{"title":"어드민 페이지 (이미지 첨부 기능 / useForm)"}}},"pageContext":{"id":"e3c75b5c-25f3-5746-996b-47ff2c881adc","series":"원티드 프리온보딩 회고","previousPostId":"d7f27a35-173b-529a-bef4-f6d9f3505d63","nextPostId":"8a06f560-b7a9-56ed-88c3-45819c7ea1bc"}},"staticQueryHashes":[],"slicesMap":{}}