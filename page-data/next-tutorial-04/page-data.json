{"componentChunkName":"component---src-templates-post-jsx","path":"/next-tutorial-04/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"90921c61-72d1-55bc-9932-3d0a3ae55f92","excerpt":"1️⃣ MongoDB 프로젝트 생성 https://www.mongodb.com/ 홈페이지에서 회원가입 후, 프로젝트를 생성 한다. 생성한 프로젝트에 데이터 베이스를 추가한다. Free 버전 선택!\n Security > Database Access에서 사용자를 추가한다. 이때 패스워드는 나중에 쓰이므로 저장해둘 것!\n Security > Network Acce…","html":"<h2>1️⃣ MongoDB 프로젝트 생성</h2>\n<ol>\n<li><a href=\"https://www.mongodb.com/\">https://www.mongodb.com/</a> 홈페이지에서 회원가입 후, 프로젝트를 생성 한다.</li>\n</ol>\n<img src='https://user-images.githubusercontent.com/68415905/221728163-0a33eb92-aab6-4bc8-a38d-946a5fbec98a.JPG' alt='img' width='800'>\n<ol start=\"2\">\n<li>\n<p>생성한 프로젝트에 데이터 베이스를 추가한다. Free 버전 선택!\n<img src='https://user-images.githubusercontent.com/68415905/221728166-1675d8c6-c27a-431a-96c2-159272f32a22.JPG' alt='' width='700'></p>\n</li>\n<li>\n<p>Security > Database Access에서 사용자를 추가한다. 이때 패스워드는 나중에 쓰이므로 저장해둘 것!\n<img src='https://user-images.githubusercontent.com/68415905/221728172-cee90bf9-2d0f-4bac-bfee-3a449844f92d.JPG' alt=''></p>\n</li>\n<li>\n<p>Security > Network Access에서 IP주소를 추가한다\n<img src='https://user-images.githubusercontent.com/68415905/221731897-6db80b63-2c1a-4d10-b28d-432a1dbc6f17.JPG' alt='' width='550' style='margin:0'></p>\n</li>\n</ol>\n<h2>2️⃣ 로컬에 MongoDB 환경 설정하기</h2>\n<p><a href=\"https://next-auth.js.org/adapters/mongodb\">📝 Go to Next Auth + MongoDB Docs</a></p>\n<ol>\n<li>MongoDB Installation</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> next-auth @next-auth/mongodb-adapter mongodb</code></pre></div>\n<ol start=\"2\">\n<li><code class=\"language-text\">lib/mongodb.ts</code> 경로에 아래 코드를 추가한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// This approach is taken from https://github.com/vercel/next.js/tree/canary/examples/with-mongodb</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> MongoClient <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mongodb\"</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">MONGODB_URI</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Invalid/Missing environment variable: \"MONGODB_URI\"'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> uri <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">MONGODB_URI</span>\n<span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> client\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">clientPromise</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>MongoClient<span class=\"token operator\">></span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"development\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// In development mode, use a global variable so that the value</span>\n  <span class=\"token comment\">// is preserved across module reloads caused by HMR (Hot Module Replacement).</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>global<span class=\"token punctuation\">.</span>_mongoClientPromise<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MongoClient</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n    global<span class=\"token punctuation\">.</span>_mongoClientPromise <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  clientPromise <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>_mongoClientPromise\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// In production mode, it's best to not use a global variable.</span>\n  client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MongoClient</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n  clientPromise <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Export a module-scoped MongoClient promise. By doing this in a</span>\n<span class=\"token comment\">// separate module, the client can be shared across functions.</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> clientPromise</code></pre></div>\n<ol start=\"3\">\n<li>만들어둔 next auth API에 MongoDB 어댑터를 추가한다 (경로 : <code class=\"language-text\">pages/api/auth/[...nextauth].js</code>) <br/>\n<code class=\"language-text\">adapter</code>를 사용할 때는 session strategy를 jwt로 설정해준다. <a href=\"https://devjoylee.github.io/node-tutorial-04/\">👉 jwt 인증방식 더 알아보기</a></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> NextAuth <span class=\"token keyword\">from</span> <span class=\"token string\">\"next-auth\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> MongoDBAdapter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@next-auth/mongodb-adapter\"</span>\n<span class=\"token keyword\">import</span> clientPromise <span class=\"token keyword\">from</span> <span class=\"token string\">\"lib/mongodb\"</span>\n\n<span class=\"token comment\">// For more information on each option (and a full list of options) go to</span>\n<span class=\"token comment\">// https://next-auth.js.org/configuration/options</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">NextAuth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">adapter</span><span class=\"token operator\">:</span> <span class=\"token function\">MongoDBAdapter</span><span class=\"token punctuation\">(</span>clientPromise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">session</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">strategy</span><span class=\"token operator\">:</span> <span class=\"token string\">'jwt'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>3️⃣ JWT Secret 발급 받기</h2>\n<ol>\n<li>generate-secret.vercel.app 에서 JWT 코드를 발급 받는다. (코드 복사)</li>\n<li><code class=\"language-text\">.env.local</code> 파일에 복사한 코드를 저장한다</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">JWT_SECRET=0b7001621f33~~~</code></pre></div>\n<ol start=\"3\">\n<li>만들어둔 next auth API에 secret 코드를 추가한다 (경로 : <code class=\"language-text\">pages/api/auth/[...nextauth].js</code>)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">NextAuth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">adapter</span><span class=\"token operator\">:</span> <span class=\"token function\">MongoDBAdapter</span><span class=\"token punctuation\">(</span>clientPromise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">secret</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">JWT_SECRET</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>4️⃣ 데이터베이스 연결하기</h2>\n<ol>\n<li>MongoDB 데이터베이스가 만들어 지면 <code class=\"language-text\">Connect</code> 버튼을 눌러 아래와 같은 코드를 발급받는다.</li>\n</ol>\n<img src='https://user-images.githubusercontent.com/68415905/221734881-6eb6dcee-b437-44c7-9de1-97f3bfdf9391.JPG' alt='' width='700'>\n<ol start=\"2\">\n<li><code class=\"language-text\">.env.local</code> 에 발급받은 코드를 추가한다 (경로 : <code class=\"language-text\">pages/api/auth/[...nextauth].js</code>) <br/>\n여기서 <code class=\"language-text\">&lt;password></code>는 처음에 사용자 추가할 때 발급받은 비밀번호로 바꿔주고 <code class=\"language-text\">myFirstDatabase</code>는 앱이름으로 교체</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">MONGODB_URI=mongodb+srv://admin:&lt;password>@cluster0.upmnolv.mongodb.net/myFirstDatabase?retryWrites=true&amp;w=majority</code></pre></div>\n<h2>5️⃣ 미들웨어 추가하기</h2>\n<p>미들웨어(Middleware)는 요청이 완료되기 전에 코드를 호출할 수 있는 기능을 제공한다.<br/>\n덕분에 응답을 수정하고, 리다이렉트하고, 헤더를 추가하고, 심지어 HTML을 스트리밍할 수 있다. <br/>\n<a href=\"https://nextjs.org/docs/advanced-features/middleware\">👉 NextJS 미들웨어 Docs 보러가기</a></p>\n<img src='https://miro.medium.com/v2/resize:fit:720/format:webp/1*iO3GXX2ofuOF6CQUcG9u-g.png' alt=''>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getToken <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"next-auth/jwt\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NextRequest<span class=\"token punctuation\">,</span> NextResponse <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"next/server\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">middleware</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">req</span><span class=\"token operator\">:</span> NextRequest</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> pathname<span class=\"token punctuation\">,</span> origin <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>nextUrl\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>nextUrl<span class=\"token punctuation\">.</span>pathname <span class=\"token operator\">===</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> session <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      req<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">secret</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">JWT_SECRET</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">secureCookie</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"production\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// login 유저가 없으면 /home</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>session<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> NextResponse<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>origin<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/home</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// login 유저가 있으면 /feed</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> NextResponse<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>origin<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/feed</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>6️⃣ 로그인 버튼과 provider 연결</h2>\n<p><code class=\"language-text\">getServerSideProps</code> 를 사용해서 추가한 provider를 가져온 후, 로그인 요청 시 유저값을 전송한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getProviders <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"next-auth/react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span>\n  GetServerSideProps<span class=\"token punctuation\">,</span>\n  InferGetServerSidePropsType<span class=\"token punctuation\">,</span>\n  NextPage<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"next\"</span>\n\n<span class=\"token comment\">// access to the google provider by props</span>\n<span class=\"token keyword\">const</span> Home<span class=\"token operator\">:</span> <span class=\"token function-variable function\">NextPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> providers <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> ProviderType<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>providers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>provider<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>provider<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"pl-4\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">signIn</span><span class=\"token punctuation\">(</span>provider<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> callbackUrl<span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          Sign In\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// server side rendering</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> getServerSideProps<span class=\"token operator\">:</span> <span class=\"token function-variable function\">GetServerSideProps</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> context <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> providers <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getProviders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> providers <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br />\n<br />\n<blockquote>\n<p>REFERENCE<br /> NextAuth 공식문서 <a href=\"https://next-auth.js.org/\">https://next-auth.js.org/</a><br/> NextJS Middleware <a href=\"https://nextjs.org/docs/advanced-features/middleware\">https://nextjs.org/docs/advanced-features/middleware</a></p>\n</blockquote>","frontmatter":{"title":"Next-Auth + MongoDB 로그인 유저값 저장하기","date":"December 05, 2022","update":"December 05, 2022","tags":["NextJS","react"],"series":"NextJS"},"fields":{"slug":"/next-tutorial-04/","readingTime":{"minutes":4.425}}},"seriesList":{"edges":[{"node":{"id":"4f12cffb-fcfd-5035-af57-53d4b7f438bd","fields":{"slug":"/next-tutorial-01/"},"frontmatter":{"title":"NextJS 작동 원리와 파일 구조"}}},{"node":{"id":"d6aa89ae-0d27-5829-9b78-f3fb7b803414","fields":{"slug":"/next-tutorial-02/"},"frontmatter":{"title":"NextJS ver.13 특징 살펴보기"}}},{"node":{"id":"81067629-51a8-508c-a80f-6006f4f32da6","fields":{"slug":"/next-tutorial-03/"},"frontmatter":{"title":"Next-Auth로 Google 로그인 기능 구현"}}},{"node":{"id":"90921c61-72d1-55bc-9932-3d0a3ae55f92","fields":{"slug":"/next-tutorial-04/"},"frontmatter":{"title":"Next-Auth + MongoDB 로그인 유저값 저장하기"}}},{"node":{"id":"715017e0-660b-5773-ac5c-b5b525c5b968","fields":{"slug":"/next-tutorial-05/"},"frontmatter":{"title":"NextJS 14: 새로운 기능과 주요 업데이트"}}}]},"previous":{"fields":{"slug":"/node-tutorial-04/"},"frontmatter":{"title":"[Node] Server Authentication (Session vs JWT)"}},"next":{"fields":{"slug":"/reactnative-rules/"},"frontmatter":{"title":"React Native 꼭 알아야할 주요 특징"}}},"pageContext":{"id":"90921c61-72d1-55bc-9932-3d0a3ae55f92","series":"NextJS","previousPostId":"00edc97c-e36c-55a1-9d91-6fc009e4cbff","nextPostId":"c3dbb5c7-23dd-58cd-9ab8-8c87aee83a7e"}},"staticQueryHashes":[],"slicesMap":{}}