{"componentChunkName":"component---src-templates-series-jsx","path":"/series/Java/","result":{"data":{"posts":{"nodes":[{"excerpt":"1. 변수 변수는 데이터를 저장하기 위한 메모리 공간의 이름이다. 자바에서는 변수를 사용할 때 반드시 데이터 타입을 명시해야 하며 선언된 타입은 변경할 수 없다. 변수의 유형 변수의 유형이 나뉘는 이유는 효율적인 메모리 관리, 코드의 가독성과 유지보수성 향상, 그리고 성능 최적화를 위해서이다. 변수의 사용 범위를 명확히 구분함으로써 불필요한 메모리 낭비를…","fields":{"slug":"/java01/"},"frontmatter":{"date":"January 22, 2025","update":"Jan 22, 2025","title":"[Java] 기초 개념 : 변수/자료형/접근제어자/static","tags":["java","fullstack"]}},{"excerpt":"1. 클래스란? 클래스는 객체 지향 프로그래밍(OOP)의 기본 구성 요소로 관련된 데이터와 메서드를 하나의 단위로 묶어주는 템플릿이다. 클래스를 사용하는 이유 코드의 재사용성 향상 유지보수의 용이성 코드의 구조화와 직관성 향상 데이터의 캡슐화 가능 2. 클래스의 기본 구조 필드(Fields): 클래스의 “상태”를 나타내는 변수들 생성자(Constructo…","fields":{"slug":"/java02/"},"frontmatter":{"date":"January 23, 2025","update":"Jan 23, 2025","title":"[Java] 클래스의 기본 특징 : 속성/생성자/메서드/this/super","tags":["java","fullstack"]}},{"excerpt":"1. 메서드 오버로딩(Method Overloading) 메서드 오버로딩은 같은 이름의 메서드를 매개변수의 타입이나 개수를 다르게 하여 여러 개 정의하는 것이다. 이는 하나의 메서드 이름으로 다양한 작업을 처리할 수 있도록 한다. 사용 예시  2. 메서드 오버라이딩(Method Overriding) 메서드 오버라이딩은 자식 클래스에서 부모 클래스의 메서드…","fields":{"slug":"/java03/"},"frontmatter":{"date":"January 24, 2025","update":"Jan 24, 2025","title":"[Java] 메서드 오버로딩, 오버라이딩과 상속(extends)","tags":["java","fullstack"]}}]}},"pageContext":{"series":"Java"}},"staticQueryHashes":[],"slicesMap":{}}