{"componentChunkName":"component---src-templates-series-jsx","path":"/series/React.js","result":{"data":{"posts":{"nodes":[{"excerpt":"🧐 React란? React는 페이스북에서 개발한 Javascript 기반의 라이브러리로써 사용자와의 인터렉션을 UI로 쉽게 구현할 수 있도록 만들어 졌습니다. 다운로드 ✨ React의 필요성 사용자 요청에 의한 UI 변화가 거의 없는 정적인 페이지는 React 라이브러리를 사용하지 않고도 개발이 가능합니다. 하지만 웹 애플리케이션이라 불릴 만큼 규모가 …","fields":{"slug":"/about/"},"frontmatter":{"date":"December 20, 2021","update":"Dec 20, 2021","title":"[React] 리액트의 개념과 특징","tags":["frontend","react"]}},{"excerpt":"리액트 기반의 프로젝트를 시작할 때 npm으로 create-react-app 패키지를 설치하면 손쉽게 리액트 프로젝트 빌드가 가능합니다. () 하지만 리액트 폴더구조와 빌드 시스템에 대해 자세히 알아보고 싶다면 create-react-app을 사용하지 않고 아래 순서에 따라 직접 리액트를 빌드해보는 것을 추천합니다! 리액트 시작하기 (CRA ❌) 1. 프…","fields":{"slug":"/react-scratch/"},"frontmatter":{"date":"December 21, 2021","update":"Dec 21, 2021","title":"[React] 리액트 시작하기 (without CRA)","tags":["frontend","react"]}},{"excerpt":"🌟 Hook의 등장 배경 리액트 컴포넌트 종류 : Class Component / Functional Component Hook이 등장하기 전 리액트에는 여러 문제들이 있었습니다. Class Component는 Functional Component에 비해 문법이 어렵고 로직의 재사용이 힘든 단점이 있으나 Functional Component로는 할 수 없…","fields":{"slug":"/hook-about/"},"frontmatter":{"date":"December 22, 2021","update":"Dec 22, 2021","title":"[React] React Hook이란?","tags":["frontend","react"]}},{"excerpt":"✨ useState 정의 상태 관리에 사용되는 Hook이며 상태값을 생성하고 업데이트 시킬 수 있습니다. useState를 호출 하면 state값이 저장되는 '변수'와 state값을 변화시키는 '함수'가 배열로 리턴됩니다.  : 상태 값 저장 변수 (현재 상태 값)  : 상태 값 갱신 함수 (state를 업데이트하는 setter 함수) 💡 useState…","fields":{"slug":"/hook-useState/"},"frontmatter":{"date":"December 23, 2021","update":"Dec 23, 2021","title":"[React] React Hook - useState","tags":["frontend","react"]}},{"excerpt":"✨ useEffect 정의 첫 렌더링 할 때(mount), 다시 렌더링될 때(update), 화면에서 사라질 때(unmount), 특정한 작업을 수행하고 싶은 경우 사용하는 Hook입니다.  를 사용 할 때에는 첫번째 인자에는 함수, 두번째 인자로는 의존값이 들어있는 배열 Dependency Array(deps)를 넣습니다. 렌더링될 때마다 실행 - De…","fields":{"slug":"/hook-useEffect/"},"frontmatter":{"date":"December 26, 2021","update":"Dec 26, 2021","title":"[React] React Hook - useEffect","tags":["frontend","react"]}},{"excerpt":"✨ useRef 정의 Ref는 'reference'의 약자로 '참조'라는 뜻입니다. useRef는 인자로 전달된 값을 에 할당하여 객체로 반환해 주는데, 이때 current에 할당된 값은 렌더링되어도 그대로 유지됩니다.\n그래서 렌더링에 상관없이 동일한 참조값이 필요한 경우 useRef를 사용합니다. 또한 current 값이 바뀌어도 컴포넌트가 리렌더링되지…","fields":{"slug":"/hook-useRef/"},"frontmatter":{"date":"January 08, 2022","update":"Jan 08, 2022","title":"[React] React Hook - useRef","tags":["frontend","react"]}},{"excerpt":"✨ useContext 정의 Context API : 전역적으로 사용되는 state나 데이터를 필요한 컴포넌트에 전달하는 방법 Context를 사용하면 컴포넌트를 재사용하기 어려워 질 수 있다. Prop drilling을 피하기 위한 목적이라면 Component Composition (컴포넌트 합성)을 먼저 고려해볼 것! **Prop drilling : …","fields":{"slug":"/hook-useContext/"},"frontmatter":{"date":"January 11, 2022","update":"Jan 11, 2022","title":"[React] React Hook - useContext","tags":["frontend","react"]}}]}},"pageContext":{"series":"React.js"}},"staticQueryHashes":[]}