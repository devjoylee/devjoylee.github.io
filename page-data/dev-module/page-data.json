{"componentChunkName":"component---src-templates-post-jsx","path":"/dev-module/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"f16e018c-7893-552a-b115-6702c663a1ea","excerpt":"🧐 모듈(Module) 이란? Javascript를 공부하다보면 이라는 단어를 자주 접하게 됩니다.\nModule이란 코드를 내보낼 수 있는 파일 혹은 재사용 가능한 코드들의 묶음을 말하는데\n이런 모듈이 모여서 하나의 프로그램이 완성된다고 볼 수 있습니다.\n Module 사용 전 기존에는 html에  태그를 이용해서 모든 파일을 하나하나 불러오는 방식을 사…","html":"<h2>🧐 모듈(Module) 이란?</h2>\n<p>Javascript를 공부하다보면 <code class=\"language-text\">Module</code>이라는 단어를 자주 접하게 됩니다.\nModule이란 <strong>코드를 내보낼 수 있는 파일 혹은 재사용 가능한 코드들의 묶음</strong>을 말하는데\n이런 모듈이 모여서 하나의 프로그램이 완성된다고 볼 수 있습니다.\n<br /></p>\n<h3>Module 사용 전</h3>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./src/main.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./src/animation.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./src/banner.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>기존에는 html에 <code class=\"language-text\">&lt;script></code> 태그를 이용해서 모든 파일을 하나하나 불러오는 방식을 사용했습니다. 이 방식은 파일을 불러오는 순서가 코드에 영향을 주며, 생성한 파일의 object가 모두 전역 변수가되서 문제가 발생할 수 있다는 단점이 있습니다\n<br /></p>\n<h3>Module 사용 후</h3>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./src/main.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>하지만 모듈을 사용하면 하나의 <code class=\"language-text\">&lt;script></code> 태그만으로 모든 모듈화된 javascript 파일에 접근이 가능해져 효율적으로 코드를 관리할 수 있습니다.</p>\n<hr>\n<h2>⛓️ 파일 모듈화 하기</h2>\n<p>Javascript 파일을 모듈화 하는 방식은 크게 2가지로 나뉩니다. <strong>CommonJS</strong>로 모듈화 하는 것과 <strong>ES Module</strong>로 모듈화하는 것입니다.\n<br /></p>\n<h3>CommonJS로 파일 내보내기/불러오기</h3>\n<p>CommonJS는 NodeJS의 기본 모듈 시스템이며 모듈화가 되지 않고 표준 라이브러리가 없는 과거 javascript의 문제를 해결하기 위한 모듈화 방식입니다.</p>\n<p>주 키워드 : <code class=\"language-text\">module.exports</code>, <code class=\"language-text\">exports</code>, <code class=\"language-text\">require</code></p>\n<ul>\n<li>파일 불러오기 : <code class=\"language-text\">require</code></li>\n<li>여러 개의 객체를 내보낼 경우, <code class=\"language-text\">exports</code> 변수의 속성으로 할당</li>\n<li>딱 하나의 객체를 내보낼 경우, <code class=\"language-text\">module.exports</code> 변수 자체에 할당</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// main.js</span>\n<span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Joy\"</span>\n<span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token number\">28</span>\n<span class=\"token comment\">//exports.name = name</span>\n<span class=\"token comment\">//exports.age = age</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> age <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// result.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> age <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./main.js\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>ES Module로 파일 내보내기/불러오기</h3>\n<p>ES Module은 가장 대중적으로 사용되는 모듈 시스템입니다. 비동기 방식으로 작동하고 모듈에서 실제로 쓰이는 부분만 불러오기 때문에 성능과 메모리 부분에서 유리한 측면이 있습니다. 또한 직관적인 키워드를 사용해 가독성이 뛰어나고 <code class=\"language-text\">Named Parameter</code>와 같은 CommonJS에서는 지원하지 않는 기능들이 있습니다.</p>\n<p>주 키워드 : <code class=\"language-text\">import</code>, <code class=\"language-text\">export</code>, <code class=\"language-text\">from</code>, <code class=\"language-text\">default</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// main.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Joy\"</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token number\">28</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fullName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">lastName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> name <span class=\"token operator\">+</span> lastName\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// result.js</span>\n<span class=\"token keyword\">import</span> fullName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> age <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./main.js\"</span></code></pre></div>","frontmatter":{"title":"프론트엔드 개발환경 #2 - 모듈 (Module)","date":"November 21, 2021","update":"November 21, 2021","tags":["frontend","development"],"series":"프론트엔드 개발환경"},"fields":{"slug":"/dev-module/","readingTime":{"minutes":3.215}}},"seriesList":{"edges":[{"node":{"id":"91a86175-fa37-572f-9736-26eaa725ea6f","fields":{"slug":"/dev-npm/"},"frontmatter":{"title":"프론트엔드 개발환경 #1 - npm / npx / yarn"}}},{"node":{"id":"f16e018c-7893-552a-b115-6702c663a1ea","fields":{"slug":"/dev-module/"},"frontmatter":{"title":"프론트엔드 개발환경 #2 - 모듈 (Module)"}}},{"node":{"id":"837a658d-8c3a-50ce-b1e6-9ebf818f91c2","fields":{"slug":"/dev-webpack-1/"},"frontmatter":{"title":"프론트엔드 개발환경 #3 - webpack이란?"}}}]},"previous":{"fields":{"slug":"/dev-npm/"},"frontmatter":{"title":"프론트엔드 개발환경 #1 - npm / npx / yarn"}},"next":{"fields":{"slug":"/dev-webpack-1/"},"frontmatter":{"title":"프론트엔드 개발환경 #3 - webpack이란?"}}},"pageContext":{"id":"f16e018c-7893-552a-b115-6702c663a1ea","series":"프론트엔드 개발환경","previousPostId":"91a86175-fa37-572f-9736-26eaa725ea6f","nextPostId":"837a658d-8c3a-50ce-b1e6-9ebf818f91c2"}},"staticQueryHashes":[]}