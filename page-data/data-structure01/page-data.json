{"componentChunkName":"component---src-templates-post-jsx","path":"/data-structure01/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"92f3d338-07cc-5841-8ae3-47582ebd98d3","excerpt":"자료구조란? 자료구조 (Data Structure) : 데이터를 저장하고 관리하는 방식. 데이터를 체계적으로 저장하여 메모리를 효율적으로 사용하면서 빠르고 안정적으로 데이터를 처리할 수 있다. 자료구조의 종류 선형 자료구조: Array, Dynamic Array, Linked List, Queue, Stack, Hash Table 비선형 자료구조: Tre…","html":"<h2>자료구조란?</h2>\n<blockquote>\n<p>자료구조 (Data Structure) : 데이터를 저장하고 관리하는 방식. 데이터를 체계적으로 저장하여 메모리를 효율적으로 사용하면서 빠르고 안정적으로 데이터를 처리할 수 있다.</p>\n</blockquote>\n<h3>자료구조의 종류</h3>\n<ul>\n<li>선형 자료구조: Array, Dynamic Array, Linked List, Queue, Stack, Hash Table</li>\n<li>비선형 자료구조: Tree, Graph</li>\n</ul>\n<img width='1220' alt='' src='https://github.com/devjoylee/devjoylee.github.io/assets/68415905/66df3636-a7fe-4573-a59a-8e2a419e49e5'>\n<h2>알고리즘이란?</h2>\n<blockquote>\n<p>알고리즘 (Algorithm) : 문제 해결 방법; 어떠한 문제를 해결하기 위해 정해진 일련의 절차나 방법.</p>\n</blockquote>\n<ul>\n<li>자주 쓰이는 문제 해결 방법(알고리즘)은 패턴화되어 있다. (예: BFS, DFS, Binary Search, Dijkstra …)</li>\n<li>한 문제를 해결하기 위한 다양한 알고리즘이 존재하며, 어떤 알고리즘이 적합한지 평가할 수 있어야 한다.</li>\n</ul>\n<h3>알고리즘 평가 기준</h3>\n<ol>\n<li>시간 복잡도 (Time Complexity)</li>\n<li>공간 복잡도 (Space Complexity)</li>\n<li>구현 복잡도</li>\n</ol>\n<p>여기서 시간 복잡도와 공간 복잡도는 보통 상반된 관계이다. 실행 시간을 줄이기 위해서는 메모리를 더 사용해야 하고, 메모리 사용량을 줄이려면 실행 시간이 늘어난다. 코딩 테스트에서는 주로 시간 복잡도를 우선으로 하여 실행 시간을 줄이는 것을 중점적으로 보고 있다.</p>\n<h3>자료구조와 알고리즘의 관계</h3>\n<p>자료구조에 따라 사용할 수 있는 알고리즘과 시간 복잡도가 달라질 수 있다.</p>\n<p><strong>사용 예시</strong></p>\n<table>\n<thead>\n<tr>\n<th>자료구조</th>\n<th>사용 예시</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Array</td>\n<td>이진 탐색 (Binary Search)</td>\n</tr>\n<tr>\n<td>Linked List</td>\n<td>선형 탐색 (Linear Search)</td>\n</tr>\n<tr>\n<td>Queue</td>\n<td>BFS (너비 우선 탐색, Breadth-First Search)</td>\n</tr>\n<tr>\n<td>Stack</td>\n<td>DFS (깊이 우선 탐색, Depth-First Search)</td>\n</tr>\n<tr>\n<td>Hash Table</td>\n<td>해시 함수를 이용한 빠른 검색 및 삽입</td>\n</tr>\n</tbody>\n</table>","frontmatter":{"title":"[Data Structure] 자료구조와 알고리즘","date":"January 08, 2024","update":"January 08, 2024","tags":["datastructure"],"series":"Data Structure"},"fields":{"slug":"/data-structure01/","readingTime":{"minutes":2.41}}},"seriesList":{"edges":[{"node":{"id":"92f3d338-07cc-5841-8ae3-47582ebd98d3","fields":{"slug":"/data-structure01/"},"frontmatter":{"title":"[Data Structure] 자료구조와 알고리즘"}}},{"node":{"id":"aef7201e-310f-5244-aa46-76df1320631b","fields":{"slug":"/data-structure02/"},"frontmatter":{"title":"[Data Structure] 시간 복잡도와 Big-O 표기법"}}},{"node":{"id":"60c54983-3540-5f7f-8da9-fea322f68e90","fields":{"slug":"/data-structure03/"},"frontmatter":{"title":"[Data Structure] 메모리 구조와 Node의 주소값"}}},{"node":{"id":"9bf26e22-2318-5e18-8a2e-2077b0e0d362","fields":{"slug":"/data-structure04/"},"frontmatter":{"title":"[Data Structure] List - Array & Dynamic Array "}}},{"node":{"id":"841675ec-ed43-5b92-8783-298ee68c5770","fields":{"slug":"/data-structure05/"},"frontmatter":{"title":"[Data Structure] List - Linked List"}}},{"node":{"id":"02f0c249-255d-5fe6-9e78-f9a5b31379fc","fields":{"slug":"/data-structure06/"},"frontmatter":{"title":"[Data Structure] 자료구조에서 클래스란?"}}}]},"previous":{"fields":{"slug":"/next-tutorial-05/"},"frontmatter":{"title":"NextJS ver.14: 서버 컴포넌트와 서버 액션"}},"next":{"fields":{"slug":"/data-structure02/"},"frontmatter":{"title":"[Data Structure] 시간 복잡도와 Big-O 표기법"}}},"pageContext":{"id":"92f3d338-07cc-5841-8ae3-47582ebd98d3","series":"Data Structure","previousPostId":"715017e0-660b-5773-ac5c-b5b525c5b968","nextPostId":"aef7201e-310f-5244-aa46-76df1320631b"}},"staticQueryHashes":[],"slicesMap":{}}