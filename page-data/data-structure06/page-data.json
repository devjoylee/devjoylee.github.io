{"componentChunkName":"component---src-templates-post-jsx","path":"/data-structure06/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"02f0c249-255d-5fe6-9e78-f9a5b31379fc","excerpt":"큐 (Queue) Queue란 먼저 저장한 데이터를 먼저 출력하는 FIFO(First In First Out)형식의 선형 자료구조이다.\nqueue의 뒤(rear)에 데이터를 추가하는 것을 enqueue, 앞(front)에서 데이터를 꺼내는 것을 dequeue라고 한다. 사용 예시 너비우선탐색 (BFS) list 기반 구현 how to enqueue →  …","html":"<h2>큐 (Queue)</h2>\n<p><strong>Queue</strong>란 먼저 저장한 데이터를 먼저 출력하는 FIFO(First In First Out)형식의 선형 자료구조이다.<br>\nqueue의 뒤(rear)에 데이터를 추가하는 것을 enqueue, 앞(front)에서 데이터를 꺼내는 것을 dequeue라고 한다.</p>\n<img src='https://github.com/user-attachments/assets/f1acedb1-4714-4b65-abe8-baf9295e42b1' alt='' width='700' style='margin-left:0'>\n<h3>사용 예시</h3>\n<ul>\n<li>너비우선탐색 (BFS)</li>\n</ul>\n<h3>list 기반 구현</h3>\n<ul>\n<li>how to enqueue → <code class=\"language-text\">.append()</code> : 시간복잡도 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span></li>\n<li>how to dequeue → <code class=\"language-text\">.pop(0)</code> : 앞에서 꺼낸 후, 남아 있는 모든 요소의 인덱스를 한칸씩 앞으로 당겨야하므로 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">q <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># enqueue</span>\nq<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1]</span>\nq<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1, 2]</span>\nq<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1, 2, 3]</span>\n\n<span class=\"token comment\"># dequeue</span>\nq<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [2, 3]</span>\nq<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [3]</span></code></pre></div>\n<h3>Linked list 기반 구현</h3>\n<p>파이썬에서 <code class=\"language-text\">deque</code> 라이브러리를 쓰면 queue를 쉽게 만들 수 있다. <code class=\"language-text\">deque</code>는 앞, 뒤 양방향에서 데이터의 삽입과 제거가 가능한 자료구조이다. <code class=\"language-text\">deque</code>는 <strong>doubly linked list</strong>로 구현 되어 있어 모든 연산이 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span>의 시간 복잡도를 가지므로 list 기반 구현 queue보다 훨씬 효율적이다.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>맨 앞(왼쪽)</th>\n<th>맨 뒤(오른쪽)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>삽입</td>\n<td>appendleft()</td>\n<td>append()</td>\n</tr>\n<tr>\n<td>제거</td>\n<td>popleft()</td>\n<td>pop()</td>\n</tr>\n</tbody>\n</table>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\n\nq <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># enqueue</span>\nq<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1]</span>\nq<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1, 2]</span>\nq<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1, 2, 3]</span>\nq<span class=\"token punctuation\">.</span>appendleft<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [0, 1, 2, 3]</span>\n\n<span class=\"token comment\"># dequeue</span>\nq<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1, 2, 3]</span>\nq<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [2, 3]</span>\nq<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [2]</span></code></pre></div>\n<h2>스택 (Stack)</h2>\n<p><strong>Stack</strong>이란 마지막에 저장한 데이터를 먼저 출력하는 LIFO(Last In First Out)형식의 선형 자료구조이다.<br>\n값을 추가할 때는 <code class=\"language-text\">push</code>, 값을 꺼낼 때는 <code class=\"language-text\">pop</code>을 사용한다.</p>\n<img src='https://github.com/user-attachments/assets/cb17e027-3139-4cec-9152-b97bb2d53965' alt='' width='700' style='margin-left:0'>\n<h3>사용 예시</h3>\n<ul>\n<li>깊이우선탐색 (DFS)</li>\n</ul>\n<p>스택은 list 를 사용해도 가장 뒤에서 데이터를 삽입, 삭제 하므로 시간복잡도 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span> 로 동일하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># push</span>\ns<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1]</span>\ns<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1, 2]</span>\n\n<span class=\"token comment\"># pop</span>\ns<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1]</span></code></pre></div>","frontmatter":{"title":"[Data Structure] Queue & Stack","date":"April 20, 2024","update":"April 20, 2024","tags":["datastructure"],"series":"Data Structure"},"fields":{"slug":"/data-structure06/","readingTime":{"minutes":2.37}}},"seriesList":{"edges":[{"node":{"id":"92f3d338-07cc-5841-8ae3-47582ebd98d3","fields":{"slug":"/data-structure01/"},"frontmatter":{"title":"[Data Structure] 자료구조와 알고리즘"}}},{"node":{"id":"aef7201e-310f-5244-aa46-76df1320631b","fields":{"slug":"/data-structure02/"},"frontmatter":{"title":"[Data Structure] 시간 복잡도와 Big-O 표기법"}}},{"node":{"id":"60c54983-3540-5f7f-8da9-fea322f68e90","fields":{"slug":"/data-structure03/"},"frontmatter":{"title":"[Data Structure] 메모리 구조와 Node의 주소값"}}},{"node":{"id":"9bf26e22-2318-5e18-8a2e-2077b0e0d362","fields":{"slug":"/data-structure04/"},"frontmatter":{"title":"[Data Structure] List - Array & Dynamic Array "}}},{"node":{"id":"841675ec-ed43-5b92-8783-298ee68c5770","fields":{"slug":"/data-structure05/"},"frontmatter":{"title":"[Data Structure] List - Linked List"}}},{"node":{"id":"02f0c249-255d-5fe6-9e78-f9a5b31379fc","fields":{"slug":"/data-structure06/"},"frontmatter":{"title":"[Data Structure] Queue & Stack"}}},{"node":{"id":"bd72386d-8f3e-5287-97c4-2b9948d4be04","fields":{"slug":"/data-structure07/"},"frontmatter":{"title":"[Data Structure] 자료구조에서 클래스란?"}}}]},"previous":{"fields":{"slug":"/data-structure05/"},"frontmatter":{"title":"[Data Structure] List - Linked List"}},"next":{"fields":{"slug":"/eslint/"},"frontmatter":{"title":"협업을 위한 프로젝트 설정 - ESLint"}}},"pageContext":{"id":"02f0c249-255d-5fe6-9e78-f9a5b31379fc","series":"Data Structure","previousPostId":"841675ec-ed43-5b92-8783-298ee68c5770","nextPostId":"ba8d2740-b427-5d4f-9c7e-0385f81affc4"}},"staticQueryHashes":[],"slicesMap":{}}