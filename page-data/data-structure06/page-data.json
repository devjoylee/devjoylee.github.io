{"componentChunkName":"component---src-templates-post-jsx","path":"/data-structure06/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"02f0c249-255d-5fe6-9e78-f9a5b31379fc","excerpt":"클래스는 객체 지향 프로그래밍(OOP)에서 사용되는 중요한 개념이다. 클래스는 객체를 생성하기 위한 템플릿으로 객체의 속성과 메소드를 정의한다. JavaScript에서 클래스는 ES6부터 도입되었으며 객체의 생성과 관리를 보다 구조화된 방식으로 제공한다. 클래스로 Stack 자료구조를 만들며 차근차근 살펴보자! class 초기화  +  의 형식으로 클래스…","html":"<p>클래스는 객체 지향 프로그래밍(OOP)에서 사용되는 중요한 개념이다. 클래스는 객체를 생성하기 위한 템플릿으로 객체의 속성과 메소드를 정의한다. JavaScript에서 클래스는 ES6부터 도입되었으며 객체의 생성과 관리를 보다 구조화된 방식으로 제공한다.</p>\n<p>클래스로 Stack 자료구조를 만들며 차근차근 살펴보자!</p>\n<h3>class 초기화</h3>\n<ol>\n<li><code class=\"language-text\">class</code> + <code class=\"language-text\">클래스 명</code> 의 형식으로 클래스를 생성한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li>생성자 함수 <code class=\"language-text\">constructor()</code></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> myStack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Stack 클래스의 인스턴스 생성</span></code></pre></div>\n<p>클래스의 생성자 함수는 객체 인스턴스가 생성될 때 호출되어 초기화 작업을 수행합니다. 생성자 함수는 클래스 내부에서 constructor 키워드를 사용하여 정의되며, 인스턴스가 생성될 때 필요한 초기 상태를 설정합니다. 예를 들어, 다음은 생성자 함수를 이용해 스택 클래스를 초기화하는 방법입니다:</p>","frontmatter":{"title":"[Data Structure] 자료구조에서 클래스란?","date":"July 07, 2024","update":"July 07, 2024","tags":["datastructure"],"series":"Data Structure"},"fields":{"slug":"/data-structure06/","readingTime":{"minutes":1.515}}},"seriesList":{"edges":[{"node":{"id":"92f3d338-07cc-5841-8ae3-47582ebd98d3","fields":{"slug":"/data-structure01/"},"frontmatter":{"title":"[Data Structure] 자료구조와 알고리즘"}}},{"node":{"id":"aef7201e-310f-5244-aa46-76df1320631b","fields":{"slug":"/data-structure02/"},"frontmatter":{"title":"[Data Structure] 시간 복잡도와 Big-O 표기법"}}},{"node":{"id":"60c54983-3540-5f7f-8da9-fea322f68e90","fields":{"slug":"/data-structure03/"},"frontmatter":{"title":"[Data Structure] 메모리 구조와 Node의 주소값"}}},{"node":{"id":"9bf26e22-2318-5e18-8a2e-2077b0e0d362","fields":{"slug":"/data-structure04/"},"frontmatter":{"title":"[Data Structure] List - Array & Dynamic Array "}}},{"node":{"id":"841675ec-ed43-5b92-8783-298ee68c5770","fields":{"slug":"/data-structure05/"},"frontmatter":{"title":"[Data Structure] List - Linked List"}}},{"node":{"id":"02f0c249-255d-5fe6-9e78-f9a5b31379fc","fields":{"slug":"/data-structure06/"},"frontmatter":{"title":"[Data Structure] 자료구조에서 클래스란?"}}}]},"previous":{"fields":{"slug":"/debug02/"},"frontmatter":{"title":"디버깅 환경 : 디버거의 Breakpoint를 활용한 문제 해결"}},"next":null},"pageContext":{"id":"02f0c249-255d-5fe6-9e78-f9a5b31379fc","series":"Data Structure","previousPostId":"61fd9a99-a098-5154-8838-525de3a580c8","nextPostId":null}},"staticQueryHashes":[],"slicesMap":{}}