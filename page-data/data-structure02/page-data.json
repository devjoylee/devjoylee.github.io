{"componentChunkName":"component---src-templates-post-jsx","path":"/data-structure02/","result":{"data":{"site":{"siteMetadata":{"title":"joy.blog"}},"markdownRemark":{"id":"aef7201e-310f-5244-aa46-76df1320631b","excerpt":"시간 복잡도란? 시간 복잡도는 알고리즘이 처리하는 입력 크기 n에 따라 소요되는 시간을 \"Big-O 표기법\"으로 나타낸 것이다. 이를 통해 알고리즘의 성능을 분석하고 비교할 수 있으며, 특히 대용량 데이터를 다룰 때 어떤 알고리즘이 더 효율적인지 판단하는 데 중요한 기준이 된다. 시간 복잡도 cases Best Case: 가장 이상적인 입력의 시간 복잡도…","html":"<h2>시간 복잡도란?</h2>\n<p>시간 복잡도는 알고리즘이 처리하는 입력 크기 n에 따라 소요되는 시간을 \"Big-O 표기법\"으로 나타낸 것이다. 이를 통해 알고리즘의 성능을 분석하고 비교할 수 있으며, 특히 대용량 데이터를 다룰 때 어떤 알고리즘이 더 효율적인지 판단하는 데 중요한 기준이 된다.</p>\n<h3>시간 복잡도 cases</h3>\n<ul>\n<li><strong>Best Case</strong>: 가장 이상적인 입력의 시간 복잡도. 예) 정렬 알고리즘에서 이미 정렬된 배열을 입력으로 받는 경우</li>\n<li><strong>Average Case</strong>: 모든 입력 값에 대한 평균 수행 시간.</li>\n<li><strong>Worst Case</strong>: 가장 느리게 동작하는 입력의 시간 복잡도. 알고리즘 평가에 주로 사용된다.</li>\n</ul>\n<h3>Big-O 표기법 종류 및 순서</h3>\n<ul>\n<li>O(1): 상수 시간 복잡도. 입력 크기에 관계없이 실행 시간이 일정.</li>\n<li>O(log n): 로그 시간 복잡도. 입력 크기의 로그에 비례하는 시간이 소요된다.</li>\n<li>O(n): 선형 시간 복잡도. 입력 크기에 비례하는 실행 시간이 소요된다.</li>\n<li>O(n^2): 제곱 시간 복잡도. 입력 크기의 제곱에 비례하는 실행 시간이 소요된다.</li>\n<li>O(2^n): 지수 시간 복잡도. 입력 크기의 지수에 비례하는 실행 시간이 소요된다.</li>\n<li>O(n!): 팩토리얼 시간 복잡도. 입력 크기의 팩토리얼에 비례하는 실행 시간이 소요된다.</li>\n</ul>\n<br/>\n<blockquote>\n<p>시간복잡도 순서 : O(1) &#x3C; O(log n) &#x3C; O(n) &#x3C; O(n log n) &#x3C; O(n²) &#x3C; O(2^n) &#x3C; O(n!)</p>\n</blockquote>\n<img width='800' alt='' src='https://github.com/devjoylee/devjoylee.github.io/assets/68415905/b3b2f47f-6875-42d1-9e0c-d967cf770ab7'>\n<h3>코드 예시</h3>\n<ol>\n<li>\n<p><strong>O(1)</strong>: 입력 크기에 상관없이 항상 동일한 시간이 걸린다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">get_first_element</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n</code></pre></div>\n</li>\n<li>\n<p><strong>O(log n)</strong>: 이진 탐색 등이 해당된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    left<span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">while</span> left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">:</span>\n        mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n        <span class=\"token keyword\">if</span> arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> mid\n        <span class=\"token keyword\">elif</span> arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">:</span>\n            left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            right <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></code></pre></div>\n</li>\n<li>\n<p><strong>O(n)</strong>: 배열에서 최대값을 찾는 경우 등이 해당된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">find_max</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    max_val <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> num <span class=\"token operator\">></span> max_val<span class=\"token punctuation\">:</span>\n            max_val <span class=\"token operator\">=</span> num\n    <span class=\"token keyword\">return</span> max_val</code></pre></div>\n</li>\n<li>\n<p><strong>O(n log n)</strong>: Merge Sort, Heap Sort 등이 해당된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">merge_sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        mid <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n        left_half <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>mid<span class=\"token punctuation\">]</span>\n        right_half <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n        merge_sort<span class=\"token punctuation\">(</span>left_half<span class=\"token punctuation\">)</span>\n        merge_sort<span class=\"token punctuation\">(</span>right_half<span class=\"token punctuation\">)</span>\n        i <span class=\"token operator\">=</span> j <span class=\"token operator\">=</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>left_half<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> j <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>right_half<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> left_half<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> right_half<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                arr<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> left_half<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n                i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                arr<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> right_half<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n                j <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            k <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>left_half<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            arr<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> left_half<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n            i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            k <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">while</span> j <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>right_half<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            arr<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> right_half<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n            j <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            k <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></code></pre></div>\n</li>\n<li>\n<p><strong>O(n²)</strong>: 삽입 정렬, 선택 정렬 등이 해당된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">bubble_sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n<li>\n<p><strong>O(2^n)</strong>: 피보나치 수열 재귀 호출 등이 해당된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> n\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> fibonacci<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fibonacci<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p><strong>O(n!)</strong>: 순열 생성 등이 해당된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">permutations</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        rest <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> permutations<span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> p<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result</code></pre></div>\n</li>\n</ol>\n<h2>시간복잡도와 제약조건</h2>\n<p>코딩테스트에서 시간복잡도를 결정하기 위해서는 제약조건을 잘 확인해야한다. 제약조건의 최댓값을 시간복잡도 n에 대입했을 때, 10⁸ (100,000,000)이 넘으면 시간이 초과될 가능성이 높다.</p>\n<ul>\n<li>\n<p>예시1) 제약조건이 1≤ n ≤ 10⁵ 일 때 : 시간복잡도가 O(n²) 인 자료구조 사용 ❌  → 총 크기 10¹⁰ 으로 시간 초과.<br/>\nO(n)이나 O(log n) 으로 풀 수 있는 다른 방법을 생각해야한다.</p>\n</li>\n<li>\n<p>예시2) 제약조건이 1 ≤ n ≤ 10³ 일 때 : 시간복잡도가 O(n²) 인 자료구조 사용 ⭕️ → 총 크기 10⁶ 으로 통과 가능</p>\n</li>\n<li>\n<p>예시3) 제약조건이 1 ≤ n ≤ 7 일 때 : O(n!) 같은 복잡한 자료구조를 사용해도 데이터가 적기때문에 통과 가능</p>\n</li>\n</ul>","frontmatter":{"title":"[Data Structure] 시간 복잡도와 Big-O 표기법","date":"January 10, 2024","update":"January 10, 2024","tags":["datastructure"],"series":"Data Structure"},"fields":{"slug":"/data-structure02/","readingTime":{"minutes":4.94}}},"seriesList":{"edges":[{"node":{"id":"92f3d338-07cc-5841-8ae3-47582ebd98d3","fields":{"slug":"/data-structure01/"},"frontmatter":{"title":"[Data Structure] 자료구조와 알고리즘"}}},{"node":{"id":"aef7201e-310f-5244-aa46-76df1320631b","fields":{"slug":"/data-structure02/"},"frontmatter":{"title":"[Data Structure] 시간 복잡도와 Big-O 표기법"}}},{"node":{"id":"60c54983-3540-5f7f-8da9-fea322f68e90","fields":{"slug":"/data-structure03/"},"frontmatter":{"title":"[Data Structure] 메모리 구조와 Node의 주소값"}}},{"node":{"id":"9bf26e22-2318-5e18-8a2e-2077b0e0d362","fields":{"slug":"/data-structure04/"},"frontmatter":{"title":"[Data Structure] List - Array & Dynamic Array "}}},{"node":{"id":"841675ec-ed43-5b92-8783-298ee68c5770","fields":{"slug":"/data-structure05/"},"frontmatter":{"title":"[Data Structure] List - Linked List"}}},{"node":{"id":"bd72386d-8f3e-5287-97c4-2b9948d4be04","fields":{"slug":"/data-structure07/"},"frontmatter":{"title":"[Data Structure] Queue & Stack"}}},{"node":{"id":"02f0c249-255d-5fe6-9e78-f9a5b31379fc","fields":{"slug":"/data-structure06/"},"frontmatter":{"title":"[Data Structure] 자료구조에서 클래스란?"}}}]},"previous":{"fields":{"slug":"/data-structure01/"},"frontmatter":{"title":"[Data Structure] 자료구조와 알고리즘"}},"next":{"fields":{"slug":"/data-structure03/"},"frontmatter":{"title":"[Data Structure] 메모리 구조와 Node의 주소값"}}},"pageContext":{"id":"aef7201e-310f-5244-aa46-76df1320631b","series":"Data Structure","previousPostId":"92f3d338-07cc-5841-8ae3-47582ebd98d3","nextPostId":"60c54983-3540-5f7f-8da9-fea322f68e90"}},"staticQueryHashes":[],"slicesMap":{}}